<?php

/**
 * GetLoanableAssetsDataResponseRowsInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance VIP Loan REST API.
 *
 * OpenAPI Specification for the Binance VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\VipLoan\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetLoanableAssetsDataResponseRowsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetLoanableAssetsDataResponseRowsInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getLoanableAssetsDataResponse_rows_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'loanCoin' => 'string',
        'flexibleDailyInterestRate' => 'string',
        'flexibleYearlyInterestRate' => 'string',
        '_30dDailyInterestRate' => 'string',
        '_30dYearlyInterestRate' => 'string',
        '_60dDailyInterestRate' => 'string',
        '_60dYearlyInterestRate' => 'string',
        'minLimit' => 'string',
        'maxLimit' => 'string',
        'vipLevel' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'loanCoin' => null,
        'flexibleDailyInterestRate' => null,
        'flexibleYearlyInterestRate' => null,
        '_30dDailyInterestRate' => null,
        '_30dYearlyInterestRate' => null,
        '_60dDailyInterestRate' => null,
        '_60dYearlyInterestRate' => null,
        'minLimit' => null,
        'maxLimit' => null,
        'vipLevel' => 'int64',
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'loanCoin' => false,
        'flexibleDailyInterestRate' => false,
        'flexibleYearlyInterestRate' => false,
        '_30dDailyInterestRate' => false,
        '_30dYearlyInterestRate' => false,
        '_60dDailyInterestRate' => false,
        '_60dYearlyInterestRate' => false,
        'minLimit' => false,
        'maxLimit' => false,
        'vipLevel' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loanCoin' => 'loanCoin',
        'flexibleDailyInterestRate' => '_flexibleDailyInterestRate',
        'flexibleYearlyInterestRate' => '_flexibleYearlyInterestRate',
        '_30dDailyInterestRate' => '_30dDailyInterestRate',
        '_30dYearlyInterestRate' => '_30dYearlyInterestRate',
        '_60dDailyInterestRate' => '_60dDailyInterestRate',
        '_60dYearlyInterestRate' => '_60dYearlyInterestRate',
        'minLimit' => 'minLimit',
        'maxLimit' => 'maxLimit',
        'vipLevel' => 'vipLevel',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'loanCoin' => 'setLoanCoin',
        'flexibleDailyInterestRate' => 'setFlexibleDailyInterestRate',
        'flexibleYearlyInterestRate' => 'setFlexibleYearlyInterestRate',
        '_30dDailyInterestRate' => 'set30dDailyInterestRate',
        '_30dYearlyInterestRate' => 'set30dYearlyInterestRate',
        '_60dDailyInterestRate' => 'set60dDailyInterestRate',
        '_60dYearlyInterestRate' => 'set60dYearlyInterestRate',
        'minLimit' => 'setMinLimit',
        'maxLimit' => 'setMaxLimit',
        'vipLevel' => 'setVipLevel',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'loanCoin' => 'getLoanCoin',
        'flexibleDailyInterestRate' => 'getFlexibleDailyInterestRate',
        'flexibleYearlyInterestRate' => 'getFlexibleYearlyInterestRate',
        '_30dDailyInterestRate' => 'get30dDailyInterestRate',
        '_30dYearlyInterestRate' => 'get30dYearlyInterestRate',
        '_60dDailyInterestRate' => 'get60dDailyInterestRate',
        '_60dYearlyInterestRate' => 'get60dYearlyInterestRate',
        'minLimit' => 'getMinLimit',
        'maxLimit' => 'getMaxLimit',
        'vipLevel' => 'getVipLevel',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('loanCoin', $data ?? [], null);
        $this->setIfExists('flexibleDailyInterestRate', $data ?? [], null);
        $this->setIfExists('flexibleYearlyInterestRate', $data ?? [], null);
        $this->setIfExists('_30dDailyInterestRate', $data ?? [], null);
        $this->setIfExists('_30dYearlyInterestRate', $data ?? [], null);
        $this->setIfExists('_60dDailyInterestRate', $data ?? [], null);
        $this->setIfExists('_60dYearlyInterestRate', $data ?? [], null);
        $this->setIfExists('minLimit', $data ?? [], null);
        $this->setIfExists('maxLimit', $data ?? [], null);
        $this->setIfExists('vipLevel', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets loanCoin.
     *
     * @return null|string
     */
    public function getLoanCoin()
    {
        return $this->container['loanCoin'];
    }

    /**
     * Sets loanCoin.
     *
     * @param null|string $loanCoin loanCoin
     *
     * @return self
     */
    public function setLoanCoin($loanCoin)
    {
        if (is_null($loanCoin)) {
            throw new \InvalidArgumentException('non-nullable loanCoin cannot be null');
        }
        $this->container['loanCoin'] = $loanCoin;

        return $this;
    }

    /**
     * Gets flexibleDailyInterestRate.
     *
     * @return null|string
     */
    public function getFlexibleDailyInterestRate()
    {
        return $this->container['flexibleDailyInterestRate'];
    }

    /**
     * Sets flexibleDailyInterestRate.
     *
     * @param null|string $flexibleDailyInterestRate flexibleDailyInterestRate
     *
     * @return self
     */
    public function setFlexibleDailyInterestRate($flexibleDailyInterestRate)
    {
        if (is_null($flexibleDailyInterestRate)) {
            throw new \InvalidArgumentException('non-nullable flexibleDailyInterestRate cannot be null');
        }
        $this->container['flexibleDailyInterestRate'] = $flexibleDailyInterestRate;

        return $this;
    }

    /**
     * Gets flexibleYearlyInterestRate.
     *
     * @return null|string
     */
    public function getFlexibleYearlyInterestRate()
    {
        return $this->container['flexibleYearlyInterestRate'];
    }

    /**
     * Sets flexibleYearlyInterestRate.
     *
     * @param null|string $flexibleYearlyInterestRate flexibleYearlyInterestRate
     *
     * @return self
     */
    public function setFlexibleYearlyInterestRate($flexibleYearlyInterestRate)
    {
        if (is_null($flexibleYearlyInterestRate)) {
            throw new \InvalidArgumentException('non-nullable flexibleYearlyInterestRate cannot be null');
        }
        $this->container['flexibleYearlyInterestRate'] = $flexibleYearlyInterestRate;

        return $this;
    }

    /**
     * Gets _30dDailyInterestRate.
     *
     * @return null|string
     */
    public function get30dDailyInterestRate()
    {
        return $this->container['_30dDailyInterestRate'];
    }

    /**
     * Sets _30dDailyInterestRate.
     *
     * @param null|string $_30dDailyInterestRate _30dDailyInterestRate
     *
     * @return self
     */
    public function set30dDailyInterestRate($_30dDailyInterestRate)
    {
        if (is_null($_30dDailyInterestRate)) {
            throw new \InvalidArgumentException('non-nullable _30dDailyInterestRate cannot be null');
        }
        $this->container['_30dDailyInterestRate'] = $_30dDailyInterestRate;

        return $this;
    }

    /**
     * Gets _30dYearlyInterestRate.
     *
     * @return null|string
     */
    public function get30dYearlyInterestRate()
    {
        return $this->container['_30dYearlyInterestRate'];
    }

    /**
     * Sets _30dYearlyInterestRate.
     *
     * @param null|string $_30dYearlyInterestRate _30dYearlyInterestRate
     *
     * @return self
     */
    public function set30dYearlyInterestRate($_30dYearlyInterestRate)
    {
        if (is_null($_30dYearlyInterestRate)) {
            throw new \InvalidArgumentException('non-nullable _30dYearlyInterestRate cannot be null');
        }
        $this->container['_30dYearlyInterestRate'] = $_30dYearlyInterestRate;

        return $this;
    }

    /**
     * Gets _60dDailyInterestRate.
     *
     * @return null|string
     */
    public function get60dDailyInterestRate()
    {
        return $this->container['_60dDailyInterestRate'];
    }

    /**
     * Sets _60dDailyInterestRate.
     *
     * @param null|string $_60dDailyInterestRate _60dDailyInterestRate
     *
     * @return self
     */
    public function set60dDailyInterestRate($_60dDailyInterestRate)
    {
        if (is_null($_60dDailyInterestRate)) {
            throw new \InvalidArgumentException('non-nullable _60dDailyInterestRate cannot be null');
        }
        $this->container['_60dDailyInterestRate'] = $_60dDailyInterestRate;

        return $this;
    }

    /**
     * Gets _60dYearlyInterestRate.
     *
     * @return null|string
     */
    public function get60dYearlyInterestRate()
    {
        return $this->container['_60dYearlyInterestRate'];
    }

    /**
     * Sets _60dYearlyInterestRate.
     *
     * @param null|string $_60dYearlyInterestRate _60dYearlyInterestRate
     *
     * @return self
     */
    public function set60dYearlyInterestRate($_60dYearlyInterestRate)
    {
        if (is_null($_60dYearlyInterestRate)) {
            throw new \InvalidArgumentException('non-nullable _60dYearlyInterestRate cannot be null');
        }
        $this->container['_60dYearlyInterestRate'] = $_60dYearlyInterestRate;

        return $this;
    }

    /**
     * Gets minLimit.
     *
     * @return null|string
     */
    public function getMinLimit()
    {
        return $this->container['minLimit'];
    }

    /**
     * Sets minLimit.
     *
     * @param null|string $minLimit minLimit
     *
     * @return self
     */
    public function setMinLimit($minLimit)
    {
        if (is_null($minLimit)) {
            throw new \InvalidArgumentException('non-nullable minLimit cannot be null');
        }
        $this->container['minLimit'] = $minLimit;

        return $this;
    }

    /**
     * Gets maxLimit.
     *
     * @return null|string
     */
    public function getMaxLimit()
    {
        return $this->container['maxLimit'];
    }

    /**
     * Sets maxLimit.
     *
     * @param null|string $maxLimit maxLimit
     *
     * @return self
     */
    public function setMaxLimit($maxLimit)
    {
        if (is_null($maxLimit)) {
            throw new \InvalidArgumentException('non-nullable maxLimit cannot be null');
        }
        $this->container['maxLimit'] = $maxLimit;

        return $this;
    }

    /**
     * Gets vipLevel.
     *
     * @return null|int
     */
    public function getVipLevel()
    {
        return $this->container['vipLevel'];
    }

    /**
     * Sets vipLevel.
     *
     * @param null|int $vipLevel vipLevel
     *
     * @return self
     */
    public function setVipLevel($vipLevel)
    {
        if (is_null($vipLevel)) {
            throw new \InvalidArgumentException('non-nullable vipLevel cannot be null');
        }
        $this->container['vipLevel'] = $vipLevel;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
