<?php

/**
 * UserInformationApiTest
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance VIP Loan REST API.
 *
 * OpenAPI Specification for the Binance VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Binance\Client\VipLoan\Test\Api;

use Binance\Client\VipLoan\Api\UserInformationApi;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Configuration\SignatureConfiguration;
use Binance\Common\HttpClient;
use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;

/**
 * UserInformationApiTest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @internal
 *
 * @coversNothing
 */
class UserInformationApiTest extends TestCase
{
    public function getApiMock(&$request)
    {
        $clientMock = $this->createMock(HttpClient::class);
        $signatureConfig = new SignatureConfiguration();
        $signatureConfig->setApiKey('apiKey');
        $signatureConfig->setSecretKey('secretKey');
        $clientConfig = new ClientConfiguration();
        $clientConfig->setUrl('http://localhost:8080');
        $clientConfig->setSignatureConfiguration($signatureConfig);
        $responseMock = $this->createMock(ResponseInterface::class);

        $responseMock->expects($this->any())
            ->method('getStatusCode')
            ->willReturn(200)
        ;

        $responseMock->expects($this->any())
            ->method('getBody')
            ->willReturn(Utils::streamFor('{}'))
        ;

        $clientMock->expects($this->once())
            ->method('send')
            ->will($this->returnCallback(function ($actualRequest) use (&$request, $responseMock) {
                $request = $actualRequest;

                return $responseMock;
            }))
        ;

        $apiMock = $this->getMockBuilder(UserInformationApi::class)
            ->setConstructorArgs([$clientConfig, $clientMock])
            ->onlyMethods(['getTimestamp'])
            ->getMock()
        ;

        $apiMock->method('getTimestamp')->willReturn('1736393892000');

        return $apiMock;
    }

    /**
     * Test case for checkVIPLoanCollateralAccount.
     *
     * Check VIP Loan Collateral Account (USER_DATA).
     */
    public function testCheckVIPLoanCollateralAccount()
    {
        $orderId = 1;
        $collateralAccountId = 1;
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->checkVIPLoanCollateralAccount($orderId, $collateralAccountId, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/loan/vip/collateral/account', $request->getUri()->getPath());
        self::assertEquals('28bfbd8d6c88334e71162a34415d7ceee70f9d0f71d87896faa7ae90ffa43745', $queryMap['signature']);
    }

    /**
     * Test case for getVIPLoanOngoingOrders.
     *
     * Get VIP Loan Ongoing Orders(USER_DATA).
     */
    public function testGetVIPLoanOngoingOrders()
    {
        $orderId = 1;
        $collateralAccountId = 1;
        $loanCoin = '';
        $collateralCoin = '';
        $current = 1;
        $limit = 10;
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->getVIPLoanOngoingOrders($orderId, $collateralAccountId, $loanCoin, $collateralCoin, $current, $limit, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/loan/vip/ongoing/orders', $request->getUri()->getPath());
        self::assertEquals('0d4a876640b7113386c3f06fda9f2831b0bc2356e247c04fdc7ed14a011c7cd8', $queryMap['signature']);
    }

    /**
     * Test case for queryApplicationStatus.
     *
     * Query Application Status(USER_DATA).
     */
    public function testQueryApplicationStatus()
    {
        $current = 1;
        $limit = 10;
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->queryApplicationStatus($current, $limit, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/loan/vip/request/data', $request->getUri()->getPath());
        self::assertEquals('b3723d8a4f7ae362bec968406a2a68bdebe8825ae14b03114d3c9b3a4ff37904', $queryMap['signature']);
    }
}
