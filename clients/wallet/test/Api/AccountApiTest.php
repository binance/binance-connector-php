<?php

/**
 * AccountApiTest
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Wallet REST API.
 *
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Binance\Client\Wallet\Test\Api;

use Binance\Client\Wallet\Api\AccountApi;
use Binance\Client\Wallet\Model\DisableFastWithdrawSwitchRequest;
use Binance\Client\Wallet\Model\EnableFastWithdrawSwitchRequest;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Configuration\SignatureConfiguration;
use Binance\Common\HttpClient;
use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;

/**
 * AccountApiTest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @internal
 *
 * @coversNothing
 */
class AccountApiTest extends TestCase
{
    public function getApiMock(&$request)
    {
        $clientMock = $this->createMock(HttpClient::class);
        $signatureConfig = new SignatureConfiguration();
        $signatureConfig->setApiKey('apiKey');
        $signatureConfig->setSecretKey('secretKey');
        $clientConfig = new ClientConfiguration();
        $clientConfig->setUrl('http://localhost:8080');
        $clientConfig->setSignatureConfiguration($signatureConfig);
        $responseMock = $this->createMock(ResponseInterface::class);

        $responseMock->expects($this->any())
            ->method('getStatusCode')
            ->willReturn(200)
        ;

        $responseMock->expects($this->any())
            ->method('getBody')
            ->willReturn(Utils::streamFor('{}'))
        ;

        $clientMock->expects($this->once())
            ->method('send')
            ->will($this->returnCallback(function ($actualRequest) use (&$request, $responseMock) {
                $request = $actualRequest;

                return $responseMock;
            }))
        ;

        $apiMock = $this->getMockBuilder(AccountApi::class)
            ->setConstructorArgs([$clientConfig, $clientMock])
            ->onlyMethods(['getTimestamp'])
            ->getMock()
        ;

        $apiMock->method('getTimestamp')->willReturn('1736393892000');

        return $apiMock;
    }

    /**
     * Test case for accountApiTradingStatus.
     *
     * Account API Trading Status (USER_DATA).
     */
    public function testAccountApiTradingStatus()
    {
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->accountApiTradingStatus($recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/account/apiTradingStatus', $request->getUri()->getPath());
        self::assertEquals('2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75', $queryMap['signature']);
    }

    /**
     * Test case for accountInfo.
     *
     * Account info (USER_DATA).
     */
    public function testAccountInfo()
    {
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->accountInfo($recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/account/info', $request->getUri()->getPath());
        self::assertEquals('2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75', $queryMap['signature']);
    }

    /**
     * Test case for accountStatus.
     *
     * Account Status (USER_DATA).
     */
    public function testAccountStatus()
    {
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->accountStatus($recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/account/status', $request->getUri()->getPath());
        self::assertEquals('2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75', $queryMap['signature']);
    }

    /**
     * Test case for dailyAccountSnapshot.
     *
     * Daily Account Snapshot (USER_DATA).
     */
    public function testDailyAccountSnapshot()
    {
        $type = '';
        $startTime = 1623319461670;
        $endTime = 1641782889000;
        $limit = 7;
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->dailyAccountSnapshot($type, $startTime, $endTime, $limit, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/accountSnapshot', $request->getUri()->getPath());
        self::assertEquals('7f5d880300068afcaef8978dcf0b77c58c8307d0f2de2302fd75872e33a68f9e', $queryMap['signature']);
    }

    /**
     * Test case for disableFastWithdrawSwitch.
     *
     * Disable Fast Withdraw Switch (USER_DATA).
     */
    public function testDisableFastWithdrawSwitch()
    {
        $disableFastWithdrawSwitchRequest = new DisableFastWithdrawSwitchRequest();

        $this->getApiMock($request)->disableFastWithdrawSwitch($disableFastWithdrawSwitchRequest);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals('/sapi/v1/account/disableFastWithdrawSwitch', $request->getUri()->getPath());
        self::assertEquals('dc0def720e795be0f84b02a8fa211ecc3a27dd06ffdbd287a679f1321807f820', $queryMap['signature']);
    }

    /**
     * Test case for enableFastWithdrawSwitch.
     *
     * Enable Fast Withdraw Switch (USER_DATA).
     */
    public function testEnableFastWithdrawSwitch()
    {
        $enableFastWithdrawSwitchRequest = new EnableFastWithdrawSwitchRequest();

        $this->getApiMock($request)->enableFastWithdrawSwitch($enableFastWithdrawSwitchRequest);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals('/sapi/v1/account/enableFastWithdrawSwitch', $request->getUri()->getPath());
        self::assertEquals('dc0def720e795be0f84b02a8fa211ecc3a27dd06ffdbd287a679f1321807f820', $queryMap['signature']);
    }

    /**
     * Test case for getApiKeyPermission.
     *
     * Get API Key Permission (USER_DATA).
     */
    public function testGetApiKeyPermission()
    {
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->getApiKeyPermission($recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/account/apiRestrictions', $request->getUri()->getPath());
        self::assertEquals('2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75', $queryMap['signature']);
    }
}
