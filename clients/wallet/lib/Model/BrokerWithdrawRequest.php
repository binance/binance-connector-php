<?php

/**
 * BrokerWithdrawRequest.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Wallet REST API.
 *
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Wallet\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * BrokerWithdrawRequest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class BrokerWithdrawRequest implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'brokerWithdrawRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'address' => 'string',
        'addressTag' => 'string',
        'network' => 'string',
        'coin' => 'string',
        'addressName' => 'string',
        'amount' => 'float',
        'withdrawOrderId' => 'string',
        'transactionFeeFlag' => 'bool',
        'walletType' => 'int',
        'questionnaire' => 'string',
        'originatorPii' => 'string',
        'signature' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'address' => null,
        'addressTag' => null,
        'network' => null,
        'coin' => null,
        'addressName' => null,
        'amount' => 'float',
        'withdrawOrderId' => null,
        'transactionFeeFlag' => null,
        'walletType' => 'int64',
        'questionnaire' => null,
        'originatorPii' => null,
        'signature' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'address' => false,
        'addressTag' => false,
        'network' => false,
        'coin' => false,
        'addressName' => false,
        'amount' => false,
        'withdrawOrderId' => false,
        'transactionFeeFlag' => false,
        'walletType' => false,
        'questionnaire' => false,
        'originatorPii' => false,
        'signature' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'addressTag' => 'addressTag',
        'network' => 'network',
        'coin' => 'coin',
        'addressName' => 'addressName',
        'amount' => 'amount',
        'withdrawOrderId' => 'withdrawOrderId',
        'transactionFeeFlag' => 'transactionFeeFlag',
        'walletType' => 'walletType',
        'questionnaire' => 'questionnaire',
        'originatorPii' => 'originatorPii',
        'signature' => 'signature',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'addressTag' => 'setAddressTag',
        'network' => 'setNetwork',
        'coin' => 'setCoin',
        'addressName' => 'setAddressName',
        'amount' => 'setAmount',
        'withdrawOrderId' => 'setWithdrawOrderId',
        'transactionFeeFlag' => 'setTransactionFeeFlag',
        'walletType' => 'setWalletType',
        'questionnaire' => 'setQuestionnaire',
        'originatorPii' => 'setOriginatorPii',
        'signature' => 'setSignature',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'addressTag' => 'getAddressTag',
        'network' => 'getNetwork',
        'coin' => 'getCoin',
        'addressName' => 'getAddressName',
        'amount' => 'getAmount',
        'withdrawOrderId' => 'getWithdrawOrderId',
        'transactionFeeFlag' => 'getTransactionFeeFlag',
        'walletType' => 'getWalletType',
        'questionnaire' => 'getQuestionnaire',
        'originatorPii' => 'getOriginatorPii',
        'signature' => 'getSignature',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('addressTag', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('addressName', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('withdrawOrderId', $data ?? [], null);
        $this->setIfExists('transactionFeeFlag', $data ?? [], null);
        $this->setIfExists('walletType', $data ?? [], null);
        $this->setIfExists('questionnaire', $data ?? [], null);
        $this->setIfExists('originatorPii', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['address']) {
            $invalidProperties[] = "'address' can't be null";
        }
        if (null === $this->container['coin']) {
            $invalidProperties[] = "'coin' can't be null";
        }
        if (null === $this->container['amount']) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (null === $this->container['withdrawOrderId']) {
            $invalidProperties[] = "'withdrawOrderId' can't be null";
        }
        if (null === $this->container['questionnaire']) {
            $invalidProperties[] = "'questionnaire' can't be null";
        }
        if (null === $this->container['originatorPii']) {
            $invalidProperties[] = "'originatorPii' can't be null";
        }
        if (null === $this->container['signature']) {
            $invalidProperties[] = "'signature' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets address.
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address.
     *
     * @param string $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets addressTag.
     *
     * @return null|string
     */
    public function getAddressTag()
    {
        return $this->container['addressTag'];
    }

    /**
     * Sets addressTag.
     *
     * @param null|string $addressTag addressTag
     *
     * @return self
     */
    public function setAddressTag($addressTag)
    {
        if (is_null($addressTag)) {
            throw new \InvalidArgumentException('non-nullable addressTag cannot be null');
        }
        $this->container['addressTag'] = $addressTag;

        return $this;
    }

    /**
     * Gets network.
     *
     * @return null|string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network.
     *
     * @param null|string $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets coin.
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin.
     *
     * @param string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets addressName.
     *
     * @return null|string
     */
    public function getAddressName()
    {
        return $this->container['addressName'];
    }

    /**
     * Sets addressName.
     *
     * @param null|string $addressName addressName
     *
     * @return self
     */
    public function setAddressName($addressName)
    {
        if (is_null($addressName)) {
            throw new \InvalidArgumentException('non-nullable addressName cannot be null');
        }
        $this->container['addressName'] = $addressName;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets withdrawOrderId.
     *
     * @return string
     */
    public function getWithdrawOrderId()
    {
        return $this->container['withdrawOrderId'];
    }

    /**
     * Sets withdrawOrderId.
     *
     * @param string $withdrawOrderId withdrawOrderId
     *
     * @return self
     */
    public function setWithdrawOrderId($withdrawOrderId)
    {
        if (is_null($withdrawOrderId)) {
            throw new \InvalidArgumentException('non-nullable withdrawOrderId cannot be null');
        }
        $this->container['withdrawOrderId'] = $withdrawOrderId;

        return $this;
    }

    /**
     * Gets transactionFeeFlag.
     *
     * @return null|bool
     */
    public function getTransactionFeeFlag()
    {
        return $this->container['transactionFeeFlag'];
    }

    /**
     * Sets transactionFeeFlag.
     *
     * @param null|bool $transactionFeeFlag transactionFeeFlag
     *
     * @return self
     */
    public function setTransactionFeeFlag($transactionFeeFlag)
    {
        if (is_null($transactionFeeFlag)) {
            throw new \InvalidArgumentException('non-nullable transactionFeeFlag cannot be null');
        }
        $this->container['transactionFeeFlag'] = $transactionFeeFlag;

        return $this;
    }

    /**
     * Gets walletType.
     *
     * @return null|int
     */
    public function getWalletType()
    {
        return $this->container['walletType'];
    }

    /**
     * Sets walletType.
     *
     * @param null|int $walletType walletType
     *
     * @return self
     */
    public function setWalletType($walletType)
    {
        if (is_null($walletType)) {
            throw new \InvalidArgumentException('non-nullable walletType cannot be null');
        }
        $this->container['walletType'] = $walletType;

        return $this;
    }

    /**
     * Gets questionnaire.
     *
     * @return string
     */
    public function getQuestionnaire()
    {
        return $this->container['questionnaire'];
    }

    /**
     * Sets questionnaire.
     *
     * @param string $questionnaire questionnaire
     *
     * @return self
     */
    public function setQuestionnaire($questionnaire)
    {
        if (is_null($questionnaire)) {
            throw new \InvalidArgumentException('non-nullable questionnaire cannot be null');
        }
        $this->container['questionnaire'] = $questionnaire;

        return $this;
    }

    /**
     * Gets originatorPii.
     *
     * @return string
     */
    public function getOriginatorPii()
    {
        return $this->container['originatorPii'];
    }

    /**
     * Sets originatorPii.
     *
     * @param string $originatorPii originatorPii
     *
     * @return self
     */
    public function setOriginatorPii($originatorPii)
    {
        if (is_null($originatorPii)) {
            throw new \InvalidArgumentException('non-nullable originatorPii cannot be null');
        }
        $this->container['originatorPii'] = $originatorPii;

        return $this;
    }

    /**
     * Gets signature.
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature.
     *
     * @param string $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
