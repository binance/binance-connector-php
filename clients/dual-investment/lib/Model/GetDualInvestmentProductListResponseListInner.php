<?php

/**
 * GetDualInvestmentProductListResponseListInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Dual Investment REST API.
 *
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DualInvestment\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetDualInvestmentProductListResponseListInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetDualInvestmentProductListResponseListInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getDualInvestmentProductListResponse_list_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'id' => 'string',
        'investCoin' => 'string',
        'exercisedCoin' => 'string',
        'strikePrice' => 'string',
        'duration' => 'int',
        'settleDate' => 'int',
        'purchaseDecimal' => 'int',
        'purchaseEndTime' => 'int',
        'canPurchase' => 'bool',
        'apr' => 'string',
        'orderId' => 'int',
        'minAmount' => 'string',
        'maxAmount' => 'string',
        'createTimestamp' => 'int',
        'optionType' => 'string',
        'isAutoCompoundEnable' => 'bool',
        'autoCompoundPlanList' => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'id' => null,
        'investCoin' => null,
        'exercisedCoin' => null,
        'strikePrice' => null,
        'duration' => 'int64',
        'settleDate' => 'int64',
        'purchaseDecimal' => 'int64',
        'purchaseEndTime' => 'int64',
        'canPurchase' => null,
        'apr' => null,
        'orderId' => 'int64',
        'minAmount' => null,
        'maxAmount' => null,
        'createTimestamp' => 'int64',
        'optionType' => null,
        'isAutoCompoundEnable' => null,
        'autoCompoundPlanList' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'id' => false,
        'investCoin' => false,
        'exercisedCoin' => false,
        'strikePrice' => false,
        'duration' => false,
        'settleDate' => false,
        'purchaseDecimal' => false,
        'purchaseEndTime' => false,
        'canPurchase' => false,
        'apr' => false,
        'orderId' => false,
        'minAmount' => false,
        'maxAmount' => false,
        'createTimestamp' => false,
        'optionType' => false,
        'isAutoCompoundEnable' => false,
        'autoCompoundPlanList' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'investCoin' => 'investCoin',
        'exercisedCoin' => 'exercisedCoin',
        'strikePrice' => 'strikePrice',
        'duration' => 'duration',
        'settleDate' => 'settleDate',
        'purchaseDecimal' => 'purchaseDecimal',
        'purchaseEndTime' => 'purchaseEndTime',
        'canPurchase' => 'canPurchase',
        'apr' => 'apr',
        'orderId' => 'orderId',
        'minAmount' => 'minAmount',
        'maxAmount' => 'maxAmount',
        'createTimestamp' => 'createTimestamp',
        'optionType' => 'optionType',
        'isAutoCompoundEnable' => 'isAutoCompoundEnable',
        'autoCompoundPlanList' => 'autoCompoundPlanList',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'investCoin' => 'setInvestCoin',
        'exercisedCoin' => 'setExercisedCoin',
        'strikePrice' => 'setStrikePrice',
        'duration' => 'setDuration',
        'settleDate' => 'setSettleDate',
        'purchaseDecimal' => 'setPurchaseDecimal',
        'purchaseEndTime' => 'setPurchaseEndTime',
        'canPurchase' => 'setCanPurchase',
        'apr' => 'setApr',
        'orderId' => 'setOrderId',
        'minAmount' => 'setMinAmount',
        'maxAmount' => 'setMaxAmount',
        'createTimestamp' => 'setCreateTimestamp',
        'optionType' => 'setOptionType',
        'isAutoCompoundEnable' => 'setIsAutoCompoundEnable',
        'autoCompoundPlanList' => 'setAutoCompoundPlanList',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'investCoin' => 'getInvestCoin',
        'exercisedCoin' => 'getExercisedCoin',
        'strikePrice' => 'getStrikePrice',
        'duration' => 'getDuration',
        'settleDate' => 'getSettleDate',
        'purchaseDecimal' => 'getPurchaseDecimal',
        'purchaseEndTime' => 'getPurchaseEndTime',
        'canPurchase' => 'getCanPurchase',
        'apr' => 'getApr',
        'orderId' => 'getOrderId',
        'minAmount' => 'getMinAmount',
        'maxAmount' => 'getMaxAmount',
        'createTimestamp' => 'getCreateTimestamp',
        'optionType' => 'getOptionType',
        'isAutoCompoundEnable' => 'getIsAutoCompoundEnable',
        'autoCompoundPlanList' => 'getAutoCompoundPlanList',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('investCoin', $data ?? [], null);
        $this->setIfExists('exercisedCoin', $data ?? [], null);
        $this->setIfExists('strikePrice', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('settleDate', $data ?? [], null);
        $this->setIfExists('purchaseDecimal', $data ?? [], null);
        $this->setIfExists('purchaseEndTime', $data ?? [], null);
        $this->setIfExists('canPurchase', $data ?? [], null);
        $this->setIfExists('apr', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('minAmount', $data ?? [], null);
        $this->setIfExists('maxAmount', $data ?? [], null);
        $this->setIfExists('createTimestamp', $data ?? [], null);
        $this->setIfExists('optionType', $data ?? [], null);
        $this->setIfExists('isAutoCompoundEnable', $data ?? [], null);
        $this->setIfExists('autoCompoundPlanList', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return null|string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param null|string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets investCoin.
     *
     * @return null|string
     */
    public function getInvestCoin()
    {
        return $this->container['investCoin'];
    }

    /**
     * Sets investCoin.
     *
     * @param null|string $investCoin investCoin
     *
     * @return self
     */
    public function setInvestCoin($investCoin)
    {
        if (is_null($investCoin)) {
            throw new \InvalidArgumentException('non-nullable investCoin cannot be null');
        }
        $this->container['investCoin'] = $investCoin;

        return $this;
    }

    /**
     * Gets exercisedCoin.
     *
     * @return null|string
     */
    public function getExercisedCoin()
    {
        return $this->container['exercisedCoin'];
    }

    /**
     * Sets exercisedCoin.
     *
     * @param null|string $exercisedCoin exercisedCoin
     *
     * @return self
     */
    public function setExercisedCoin($exercisedCoin)
    {
        if (is_null($exercisedCoin)) {
            throw new \InvalidArgumentException('non-nullable exercisedCoin cannot be null');
        }
        $this->container['exercisedCoin'] = $exercisedCoin;

        return $this;
    }

    /**
     * Gets strikePrice.
     *
     * @return null|string
     */
    public function getStrikePrice()
    {
        return $this->container['strikePrice'];
    }

    /**
     * Sets strikePrice.
     *
     * @param null|string $strikePrice strikePrice
     *
     * @return self
     */
    public function setStrikePrice($strikePrice)
    {
        if (is_null($strikePrice)) {
            throw new \InvalidArgumentException('non-nullable strikePrice cannot be null');
        }
        $this->container['strikePrice'] = $strikePrice;

        return $this;
    }

    /**
     * Gets duration.
     *
     * @return null|int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration.
     *
     * @param null|int $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets settleDate.
     *
     * @return null|int
     */
    public function getSettleDate()
    {
        return $this->container['settleDate'];
    }

    /**
     * Sets settleDate.
     *
     * @param null|int $settleDate settleDate
     *
     * @return self
     */
    public function setSettleDate($settleDate)
    {
        if (is_null($settleDate)) {
            throw new \InvalidArgumentException('non-nullable settleDate cannot be null');
        }
        $this->container['settleDate'] = $settleDate;

        return $this;
    }

    /**
     * Gets purchaseDecimal.
     *
     * @return null|int
     */
    public function getPurchaseDecimal()
    {
        return $this->container['purchaseDecimal'];
    }

    /**
     * Sets purchaseDecimal.
     *
     * @param null|int $purchaseDecimal purchaseDecimal
     *
     * @return self
     */
    public function setPurchaseDecimal($purchaseDecimal)
    {
        if (is_null($purchaseDecimal)) {
            throw new \InvalidArgumentException('non-nullable purchaseDecimal cannot be null');
        }
        $this->container['purchaseDecimal'] = $purchaseDecimal;

        return $this;
    }

    /**
     * Gets purchaseEndTime.
     *
     * @return null|int
     */
    public function getPurchaseEndTime()
    {
        return $this->container['purchaseEndTime'];
    }

    /**
     * Sets purchaseEndTime.
     *
     * @param null|int $purchaseEndTime purchaseEndTime
     *
     * @return self
     */
    public function setPurchaseEndTime($purchaseEndTime)
    {
        if (is_null($purchaseEndTime)) {
            throw new \InvalidArgumentException('non-nullable purchaseEndTime cannot be null');
        }
        $this->container['purchaseEndTime'] = $purchaseEndTime;

        return $this;
    }

    /**
     * Gets canPurchase.
     *
     * @return null|bool
     */
    public function getCanPurchase()
    {
        return $this->container['canPurchase'];
    }

    /**
     * Sets canPurchase.
     *
     * @param null|bool $canPurchase canPurchase
     *
     * @return self
     */
    public function setCanPurchase($canPurchase)
    {
        if (is_null($canPurchase)) {
            throw new \InvalidArgumentException('non-nullable canPurchase cannot be null');
        }
        $this->container['canPurchase'] = $canPurchase;

        return $this;
    }

    /**
     * Gets apr.
     *
     * @return null|string
     */
    public function getApr()
    {
        return $this->container['apr'];
    }

    /**
     * Sets apr.
     *
     * @param null|string $apr apr
     *
     * @return self
     */
    public function setApr($apr)
    {
        if (is_null($apr)) {
            throw new \InvalidArgumentException('non-nullable apr cannot be null');
        }
        $this->container['apr'] = $apr;

        return $this;
    }

    /**
     * Gets orderId.
     *
     * @return null|int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId.
     *
     * @param null|int $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets minAmount.
     *
     * @return null|string
     */
    public function getMinAmount()
    {
        return $this->container['minAmount'];
    }

    /**
     * Sets minAmount.
     *
     * @param null|string $minAmount minAmount
     *
     * @return self
     */
    public function setMinAmount($minAmount)
    {
        if (is_null($minAmount)) {
            throw new \InvalidArgumentException('non-nullable minAmount cannot be null');
        }
        $this->container['minAmount'] = $minAmount;

        return $this;
    }

    /**
     * Gets maxAmount.
     *
     * @return null|string
     */
    public function getMaxAmount()
    {
        return $this->container['maxAmount'];
    }

    /**
     * Sets maxAmount.
     *
     * @param null|string $maxAmount maxAmount
     *
     * @return self
     */
    public function setMaxAmount($maxAmount)
    {
        if (is_null($maxAmount)) {
            throw new \InvalidArgumentException('non-nullable maxAmount cannot be null');
        }
        $this->container['maxAmount'] = $maxAmount;

        return $this;
    }

    /**
     * Gets createTimestamp.
     *
     * @return null|int
     */
    public function getCreateTimestamp()
    {
        return $this->container['createTimestamp'];
    }

    /**
     * Sets createTimestamp.
     *
     * @param null|int $createTimestamp createTimestamp
     *
     * @return self
     */
    public function setCreateTimestamp($createTimestamp)
    {
        if (is_null($createTimestamp)) {
            throw new \InvalidArgumentException('non-nullable createTimestamp cannot be null');
        }
        $this->container['createTimestamp'] = $createTimestamp;

        return $this;
    }

    /**
     * Gets optionType.
     *
     * @return null|string
     */
    public function getOptionType()
    {
        return $this->container['optionType'];
    }

    /**
     * Sets optionType.
     *
     * @param null|string $optionType optionType
     *
     * @return self
     */
    public function setOptionType($optionType)
    {
        if (is_null($optionType)) {
            throw new \InvalidArgumentException('non-nullable optionType cannot be null');
        }
        $this->container['optionType'] = $optionType;

        return $this;
    }

    /**
     * Gets isAutoCompoundEnable.
     *
     * @return null|bool
     */
    public function getIsAutoCompoundEnable()
    {
        return $this->container['isAutoCompoundEnable'];
    }

    /**
     * Sets isAutoCompoundEnable.
     *
     * @param null|bool $isAutoCompoundEnable isAutoCompoundEnable
     *
     * @return self
     */
    public function setIsAutoCompoundEnable($isAutoCompoundEnable)
    {
        if (is_null($isAutoCompoundEnable)) {
            throw new \InvalidArgumentException('non-nullable isAutoCompoundEnable cannot be null');
        }
        $this->container['isAutoCompoundEnable'] = $isAutoCompoundEnable;

        return $this;
    }

    /**
     * Gets autoCompoundPlanList.
     *
     * @return null|string[]
     */
    public function getAutoCompoundPlanList()
    {
        return $this->container['autoCompoundPlanList'];
    }

    /**
     * Sets autoCompoundPlanList.
     *
     * @param null|string[] $autoCompoundPlanList autoCompoundPlanList
     *
     * @return self
     */
    public function setAutoCompoundPlanList($autoCompoundPlanList)
    {
        if (is_null($autoCompoundPlanList)) {
            throw new \InvalidArgumentException('non-nullable autoCompoundPlanList cannot be null');
        }
        $this->container['autoCompoundPlanList'] = $autoCompoundPlanList;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
