<?php

/**
 * TradeApiTest
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Dual Investment REST API.
 *
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Binance\Client\DualInvestment\Test\Api;

use Binance\Client\DualInvestment\Api\TradeApi;
use Binance\Client\DualInvestment\Model\ChangeAutoCompoundStatusRequest;
use Binance\Client\DualInvestment\Model\SubscribeDualInvestmentProductsRequest;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Configuration\SignatureConfiguration;
use Binance\Common\HttpClient;
use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;

/**
 * TradeApiTest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @internal
 *
 * @coversNothing
 */
class TradeApiTest extends TestCase
{
    public function getApiMock(&$request)
    {
        $clientMock = $this->createMock(HttpClient::class);
        $signatureConfig = new SignatureConfiguration();
        $signatureConfig->setApiKey('apiKey');
        $signatureConfig->setSecretKey('secretKey');
        $clientConfig = new ClientConfiguration();
        $clientConfig->setUrl('http://localhost:8080');
        $clientConfig->setSignatureConfiguration($signatureConfig);
        $responseMock = $this->createMock(ResponseInterface::class);

        $responseMock->expects($this->any())
            ->method('getStatusCode')
            ->willReturn(200)
        ;

        $responseMock->expects($this->any())
            ->method('getBody')
            ->willReturn(Utils::streamFor('{}'))
        ;

        $clientMock->expects($this->once())
            ->method('send')
            ->will($this->returnCallback(function ($actualRequest) use (&$request, $responseMock) {
                $request = $actualRequest;

                return $responseMock;
            }))
        ;

        $apiMock = $this->getMockBuilder(TradeApi::class)
            ->setConstructorArgs([$clientConfig, $clientMock])
            ->onlyMethods(['getTimestamp'])
            ->getMock()
        ;

        $apiMock->method('getTimestamp')->willReturn('1736393892000');

        return $apiMock;
    }

    /**
     * Test case for changeAutoCompoundStatus.
     *
     * Change Auto-Compound status(USER_DATA).
     */
    public function testChangeAutoCompoundStatus()
    {
        $changeAutoCompoundStatusRequest = new ChangeAutoCompoundStatusRequest();
        $changeAutoCompoundStatusRequest->setPositionId('1');

        $response = $this->getApiMock($request)->changeAutoCompoundStatus($changeAutoCompoundStatusRequest);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/dci/product/auto_compound/edit-status', $request->getUri()->getPath());
        self::assertEquals('05345189012e725ecf394a569c76b468c3a9d6377f5b644a1b90e1551920ce91', $queryMap['signature']);
    }

    /**
     * Test case for checkDualInvestmentAccounts.
     *
     * Check Dual Investment accounts(USER_DATA).
     */
    public function testCheckDualInvestmentAccounts()
    {
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->checkDualInvestmentAccounts($recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/dci/product/accounts', $request->getUri()->getPath());
        self::assertEquals('2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75', $queryMap['signature']);
    }

    /**
     * Test case for getDualInvestmentPositions.
     *
     * Get Dual Investment positions(USER_DATA).
     */
    public function testGetDualInvestmentPositions()
    {
        $status = '';
        $pageSize = 10;
        $pageIndex = 1;
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->getDualInvestmentPositions($status, $pageSize, $pageIndex, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/dci/product/positions', $request->getUri()->getPath());
        self::assertEquals('2b91c6c8aa68a088b3d582e3aa7dff000d3d6e8056a0327ea4031d366ee9efcf', $queryMap['signature']);
    }

    /**
     * Test case for subscribeDualInvestmentProducts.
     *
     * Subscribe Dual Investment products(USER_DATA).
     */
    public function testSubscribeDualInvestmentProducts()
    {
        $subscribeDualInvestmentProductsRequest = new SubscribeDualInvestmentProductsRequest();
        $subscribeDualInvestmentProductsRequest->setId('');
        $subscribeDualInvestmentProductsRequest->setOrderId('1');
        $subscribeDualInvestmentProductsRequest->setDepositAmount(1.0);
        $subscribeDualInvestmentProductsRequest->setAutoCompoundPlan('NONE');

        $response = $this->getApiMock($request)->subscribeDualInvestmentProducts($subscribeDualInvestmentProductsRequest);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/dci/product/subscribe', $request->getUri()->getPath());
        self::assertEquals('465852a41f6158a14d495983e5302888dbc16f53b3009c48eea67a3f33d85502', $queryMap['signature']);
    }
}
