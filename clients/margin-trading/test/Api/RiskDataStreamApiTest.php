<?php

/**
 * RiskDataStreamApiTest
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Margin Trading REST API.
 *
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Binance\Client\MarginTrading\Test\Api;

use Binance\Client\MarginTrading\Api\RiskDataStreamApi;
use Binance\Client\MarginTrading\Model\KeepaliveUserDataStreamRequest;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Configuration\SignatureConfiguration;
use Binance\Common\HttpClient;
use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;

/**
 * RiskDataStreamApiTest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @internal
 *
 * @coversNothing
 */
class RiskDataStreamApiTest extends TestCase
{
    public function getApiMock(&$request)
    {
        $clientMock = $this->createMock(HttpClient::class);
        $signatureConfig = new SignatureConfiguration();
        $signatureConfig->setApiKey('apiKey');
        $signatureConfig->setSecretKey('secretKey');
        $clientConfig = new ClientConfiguration();
        $clientConfig->setUrl('http://localhost:8080');
        $clientConfig->setSignatureConfiguration($signatureConfig);
        $responseMock = $this->createMock(ResponseInterface::class);

        $responseMock->expects($this->any())
            ->method('getStatusCode')
            ->willReturn(200)
        ;

        $responseMock->expects($this->any())
            ->method('getBody')
            ->willReturn(Utils::streamFor('{}'))
        ;

        $clientMock->expects($this->once())
            ->method('send')
            ->will($this->returnCallback(function ($actualRequest) use (&$request, $responseMock) {
                $request = $actualRequest;

                return $responseMock;
            }))
        ;

        $apiMock = $this->getMockBuilder(RiskDataStreamApi::class)
            ->setConstructorArgs([$clientConfig, $clientMock])
            ->onlyMethods(['getTimestamp'])
            ->getMock()
        ;

        $apiMock->method('getTimestamp')->willReturn('1736393892000');

        return $apiMock;
    }

    /**
     * Test case for closeUserDataStream.
     *
     * Close User Data Stream (USER_STREAM).
     */
    public function testCloseUserDataStream()
    {
        $this->getApiMock($request)->closeUserDataStream();

        parse_str($request->getUri(), $queryMap);

        self::assertEquals('/sapi/v1/margin/listen-key', $request->getUri()->getPath());
        self::assertTrue(!isset($queryMap['signature']));
    }

    /**
     * Test case for keepaliveUserDataStream.
     *
     * Keepalive User Data Stream (USER_STREAM).
     */
    public function testKeepaliveUserDataStream()
    {
        $keepaliveUserDataStreamRequest = new KeepaliveUserDataStreamRequest();
        $keepaliveUserDataStreamRequest->setListenKey('');

        $this->getApiMock($request)->keepaliveUserDataStream($keepaliveUserDataStreamRequest);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals('/sapi/v1/margin/listen-key', $request->getUri()->getPath());
        self::assertTrue(!isset($queryMap['signature']));
    }

    /**
     * Test case for startUserDataStream.
     *
     * Start User Data Stream (USER_STREAM).
     */
    public function testStartUserDataStream()
    {
        $response = $this->getApiMock($request)->startUserDataStream();

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/margin/listen-key', $request->getUri()->getPath());
        self::assertTrue(!isset($queryMap['signature']));
    }
}
