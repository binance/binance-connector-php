<?php

/**
 * GetPayTradeHistoryResponseDataInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Pay REST API.
 *
 * OpenAPI Specification for the Binance Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Pay\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetPayTradeHistoryResponseDataInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetPayTradeHistoryResponseDataInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getPayTradeHistoryResponse_data_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'orderType' => 'string',
        'transactionId' => 'string',
        'transactionTime' => 'int',
        'amount' => 'string',
        'currency' => 'string',
        'walletType' => 'int',
        'walletTypes' => 'int[]',
        'fundsDetail' => '\Binance\Client\Pay\Model\GetPayTradeHistoryResponseDataInnerFundsDetailInner[]',
        'payerInfo' => '\Binance\Client\Pay\Model\GetPayTradeHistoryResponseDataInnerPayerInfo',
        'receiverInfo' => '\Binance\Client\Pay\Model\GetPayTradeHistoryResponseDataInnerReceiverInfo',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'orderType' => null,
        'transactionId' => null,
        'transactionTime' => 'int64',
        'amount' => null,
        'currency' => null,
        'walletType' => 'int64',
        'walletTypes' => 'int64',
        'fundsDetail' => null,
        'payerInfo' => null,
        'receiverInfo' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'orderType' => false,
        'transactionId' => false,
        'transactionTime' => false,
        'amount' => false,
        'currency' => false,
        'walletType' => false,
        'walletTypes' => false,
        'fundsDetail' => false,
        'payerInfo' => false,
        'receiverInfo' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderType' => 'orderType',
        'transactionId' => 'transactionId',
        'transactionTime' => 'transactionTime',
        'amount' => 'amount',
        'currency' => 'currency',
        'walletType' => 'walletType',
        'walletTypes' => 'walletTypes',
        'fundsDetail' => 'fundsDetail',
        'payerInfo' => 'payerInfo',
        'receiverInfo' => 'receiverInfo',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'orderType' => 'setOrderType',
        'transactionId' => 'setTransactionId',
        'transactionTime' => 'setTransactionTime',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'walletType' => 'setWalletType',
        'walletTypes' => 'setWalletTypes',
        'fundsDetail' => 'setFundsDetail',
        'payerInfo' => 'setPayerInfo',
        'receiverInfo' => 'setReceiverInfo',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'orderType' => 'getOrderType',
        'transactionId' => 'getTransactionId',
        'transactionTime' => 'getTransactionTime',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'walletType' => 'getWalletType',
        'walletTypes' => 'getWalletTypes',
        'fundsDetail' => 'getFundsDetail',
        'payerInfo' => 'getPayerInfo',
        'receiverInfo' => 'getReceiverInfo',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('orderType', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
        $this->setIfExists('transactionTime', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('walletType', $data ?? [], null);
        $this->setIfExists('walletTypes', $data ?? [], null);
        $this->setIfExists('fundsDetail', $data ?? [], null);
        $this->setIfExists('payerInfo', $data ?? [], null);
        $this->setIfExists('receiverInfo', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets orderType.
     *
     * @return null|string
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType.
     *
     * @param null|string $orderType orderType
     *
     * @return self
     */
    public function setOrderType($orderType)
    {
        if (is_null($orderType)) {
            throw new \InvalidArgumentException('non-nullable orderType cannot be null');
        }
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets transactionId.
     *
     * @return null|string
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId.
     *
     * @param null|string $transactionId transactionId
     *
     * @return self
     */
    public function setTransactionId($transactionId)
    {
        if (is_null($transactionId)) {
            throw new \InvalidArgumentException('non-nullable transactionId cannot be null');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets transactionTime.
     *
     * @return null|int
     */
    public function getTransactionTime()
    {
        return $this->container['transactionTime'];
    }

    /**
     * Sets transactionTime.
     *
     * @param null|int $transactionTime transactionTime
     *
     * @return self
     */
    public function setTransactionTime($transactionTime)
    {
        if (is_null($transactionTime)) {
            throw new \InvalidArgumentException('non-nullable transactionTime cannot be null');
        }
        $this->container['transactionTime'] = $transactionTime;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return null|string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param null|string $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency.
     *
     * @return null|string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency.
     *
     * @param null|string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets walletType.
     *
     * @return null|int
     */
    public function getWalletType()
    {
        return $this->container['walletType'];
    }

    /**
     * Sets walletType.
     *
     * @param null|int $walletType walletType
     *
     * @return self
     */
    public function setWalletType($walletType)
    {
        if (is_null($walletType)) {
            throw new \InvalidArgumentException('non-nullable walletType cannot be null');
        }
        $this->container['walletType'] = $walletType;

        return $this;
    }

    /**
     * Gets walletTypes.
     *
     * @return null|int[]
     */
    public function getWalletTypes()
    {
        return $this->container['walletTypes'];
    }

    /**
     * Sets walletTypes.
     *
     * @param null|int[] $walletTypes walletTypes
     *
     * @return self
     */
    public function setWalletTypes($walletTypes)
    {
        if (is_null($walletTypes)) {
            throw new \InvalidArgumentException('non-nullable walletTypes cannot be null');
        }
        $this->container['walletTypes'] = $walletTypes;

        return $this;
    }

    /**
     * Gets fundsDetail.
     *
     * @return null|GetPayTradeHistoryResponseDataInnerFundsDetailInner[]
     */
    public function getFundsDetail()
    {
        return $this->container['fundsDetail'];
    }

    /**
     * Sets fundsDetail.
     *
     * @param null|GetPayTradeHistoryResponseDataInnerFundsDetailInner[] $fundsDetail fundsDetail
     *
     * @return self
     */
    public function setFundsDetail($fundsDetail)
    {
        if (is_null($fundsDetail)) {
            throw new \InvalidArgumentException('non-nullable fundsDetail cannot be null');
        }
        $this->container['fundsDetail'] = $fundsDetail;

        return $this;
    }

    /**
     * Gets payerInfo.
     *
     * @return null|GetPayTradeHistoryResponseDataInnerPayerInfo
     */
    public function getPayerInfo()
    {
        return $this->container['payerInfo'];
    }

    /**
     * Sets payerInfo.
     *
     * @param null|GetPayTradeHistoryResponseDataInnerPayerInfo $payerInfo payerInfo
     *
     * @return self
     */
    public function setPayerInfo($payerInfo)
    {
        if (is_null($payerInfo)) {
            throw new \InvalidArgumentException('non-nullable payerInfo cannot be null');
        }
        $this->container['payerInfo'] = $payerInfo;

        return $this;
    }

    /**
     * Gets receiverInfo.
     *
     * @return null|GetPayTradeHistoryResponseDataInnerReceiverInfo
     */
    public function getReceiverInfo()
    {
        return $this->container['receiverInfo'];
    }

    /**
     * Sets receiverInfo.
     *
     * @param null|GetPayTradeHistoryResponseDataInnerReceiverInfo $receiverInfo receiverInfo
     *
     * @return self
     */
    public function setReceiverInfo($receiverInfo)
    {
        if (is_null($receiverInfo)) {
            throw new \InvalidArgumentException('non-nullable receiverInfo cannot be null');
        }
        $this->container['receiverInfo'] = $receiverInfo;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
