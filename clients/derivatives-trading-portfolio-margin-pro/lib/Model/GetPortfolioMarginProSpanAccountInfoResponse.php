<?php

/**
 * GetPortfolioMarginProSpanAccountInfoResponse.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Portfolio Margin Pro REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingPortfolioMarginPro\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetPortfolioMarginProSpanAccountInfoResponse Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetPortfolioMarginProSpanAccountInfoResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getPortfolioMarginProSpanAccountInfoResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'uniMMR' => 'string',
        'accountEquity' => 'string',
        'actualEquity' => 'string',
        'accountMaintMargin' => 'string',
        'riskUnitMMList' => '\Binance\Client\DerivativesTradingPortfolioMarginPro\Model\GetPortfolioMarginProSpanAccountInfoResponseRiskUnitMMListInner[]',
        'marginMM' => 'string',
        'otherMM' => 'string',
        'accountStatus' => 'string',
        'accountType' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'uniMMR' => null,
        'accountEquity' => null,
        'actualEquity' => null,
        'accountMaintMargin' => null,
        'riskUnitMMList' => null,
        'marginMM' => null,
        'otherMM' => null,
        'accountStatus' => null,
        'accountType' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'uniMMR' => false,
        'accountEquity' => false,
        'actualEquity' => false,
        'accountMaintMargin' => false,
        'riskUnitMMList' => false,
        'marginMM' => false,
        'otherMM' => false,
        'accountStatus' => false,
        'accountType' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uniMMR' => 'uniMMR',
        'accountEquity' => 'accountEquity',
        'actualEquity' => 'actualEquity',
        'accountMaintMargin' => 'accountMaintMargin',
        'riskUnitMMList' => 'riskUnitMMList',
        'marginMM' => 'marginMM',
        'otherMM' => 'otherMM',
        'accountStatus' => 'accountStatus',
        'accountType' => 'accountType',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'uniMMR' => 'setUniMMR',
        'accountEquity' => 'setAccountEquity',
        'actualEquity' => 'setActualEquity',
        'accountMaintMargin' => 'setAccountMaintMargin',
        'riskUnitMMList' => 'setRiskUnitMMList',
        'marginMM' => 'setMarginMM',
        'otherMM' => 'setOtherMM',
        'accountStatus' => 'setAccountStatus',
        'accountType' => 'setAccountType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'uniMMR' => 'getUniMMR',
        'accountEquity' => 'getAccountEquity',
        'actualEquity' => 'getActualEquity',
        'accountMaintMargin' => 'getAccountMaintMargin',
        'riskUnitMMList' => 'getRiskUnitMMList',
        'marginMM' => 'getMarginMM',
        'otherMM' => 'getOtherMM',
        'accountStatus' => 'getAccountStatus',
        'accountType' => 'getAccountType',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('uniMMR', $data ?? [], null);
        $this->setIfExists('accountEquity', $data ?? [], null);
        $this->setIfExists('actualEquity', $data ?? [], null);
        $this->setIfExists('accountMaintMargin', $data ?? [], null);
        $this->setIfExists('riskUnitMMList', $data ?? [], null);
        $this->setIfExists('marginMM', $data ?? [], null);
        $this->setIfExists('otherMM', $data ?? [], null);
        $this->setIfExists('accountStatus', $data ?? [], null);
        $this->setIfExists('accountType', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets uniMMR.
     *
     * @return null|string
     */
    public function getUniMMR()
    {
        return $this->container['uniMMR'];
    }

    /**
     * Sets uniMMR.
     *
     * @param null|string $uniMMR uniMMR
     *
     * @return self
     */
    public function setUniMMR($uniMMR)
    {
        if (is_null($uniMMR)) {
            throw new \InvalidArgumentException('non-nullable uniMMR cannot be null');
        }
        $this->container['uniMMR'] = $uniMMR;

        return $this;
    }

    /**
     * Gets accountEquity.
     *
     * @return null|string
     */
    public function getAccountEquity()
    {
        return $this->container['accountEquity'];
    }

    /**
     * Sets accountEquity.
     *
     * @param null|string $accountEquity accountEquity
     *
     * @return self
     */
    public function setAccountEquity($accountEquity)
    {
        if (is_null($accountEquity)) {
            throw new \InvalidArgumentException('non-nullable accountEquity cannot be null');
        }
        $this->container['accountEquity'] = $accountEquity;

        return $this;
    }

    /**
     * Gets actualEquity.
     *
     * @return null|string
     */
    public function getActualEquity()
    {
        return $this->container['actualEquity'];
    }

    /**
     * Sets actualEquity.
     *
     * @param null|string $actualEquity actualEquity
     *
     * @return self
     */
    public function setActualEquity($actualEquity)
    {
        if (is_null($actualEquity)) {
            throw new \InvalidArgumentException('non-nullable actualEquity cannot be null');
        }
        $this->container['actualEquity'] = $actualEquity;

        return $this;
    }

    /**
     * Gets accountMaintMargin.
     *
     * @return null|string
     */
    public function getAccountMaintMargin()
    {
        return $this->container['accountMaintMargin'];
    }

    /**
     * Sets accountMaintMargin.
     *
     * @param null|string $accountMaintMargin accountMaintMargin
     *
     * @return self
     */
    public function setAccountMaintMargin($accountMaintMargin)
    {
        if (is_null($accountMaintMargin)) {
            throw new \InvalidArgumentException('non-nullable accountMaintMargin cannot be null');
        }
        $this->container['accountMaintMargin'] = $accountMaintMargin;

        return $this;
    }

    /**
     * Gets riskUnitMMList.
     *
     * @return null|GetPortfolioMarginProSpanAccountInfoResponseRiskUnitMMListInner[]
     */
    public function getRiskUnitMMList()
    {
        return $this->container['riskUnitMMList'];
    }

    /**
     * Sets riskUnitMMList.
     *
     * @param null|GetPortfolioMarginProSpanAccountInfoResponseRiskUnitMMListInner[] $riskUnitMMList riskUnitMMList
     *
     * @return self
     */
    public function setRiskUnitMMList($riskUnitMMList)
    {
        if (is_null($riskUnitMMList)) {
            throw new \InvalidArgumentException('non-nullable riskUnitMMList cannot be null');
        }
        $this->container['riskUnitMMList'] = $riskUnitMMList;

        return $this;
    }

    /**
     * Gets marginMM.
     *
     * @return null|string
     */
    public function getMarginMM()
    {
        return $this->container['marginMM'];
    }

    /**
     * Sets marginMM.
     *
     * @param null|string $marginMM marginMM
     *
     * @return self
     */
    public function setMarginMM($marginMM)
    {
        if (is_null($marginMM)) {
            throw new \InvalidArgumentException('non-nullable marginMM cannot be null');
        }
        $this->container['marginMM'] = $marginMM;

        return $this;
    }

    /**
     * Gets otherMM.
     *
     * @return null|string
     */
    public function getOtherMM()
    {
        return $this->container['otherMM'];
    }

    /**
     * Sets otherMM.
     *
     * @param null|string $otherMM otherMM
     *
     * @return self
     */
    public function setOtherMM($otherMM)
    {
        if (is_null($otherMM)) {
            throw new \InvalidArgumentException('non-nullable otherMM cannot be null');
        }
        $this->container['otherMM'] = $otherMM;

        return $this;
    }

    /**
     * Gets accountStatus.
     *
     * @return null|string
     */
    public function getAccountStatus()
    {
        return $this->container['accountStatus'];
    }

    /**
     * Sets accountStatus.
     *
     * @param null|string $accountStatus accountStatus
     *
     * @return self
     */
    public function setAccountStatus($accountStatus)
    {
        if (is_null($accountStatus)) {
            throw new \InvalidArgumentException('non-nullable accountStatus cannot be null');
        }
        $this->container['accountStatus'] = $accountStatus;

        return $this;
    }

    /**
     * Gets accountType.
     *
     * @return null|string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType.
     *
     * @param null|string $accountType accountType
     *
     * @return self
     */
    public function setAccountType($accountType)
    {
        if (is_null($accountType)) {
            throw new \InvalidArgumentException('non-nullable accountType cannot be null');
        }
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
