<?php

/**
 * QueryUmModifyOrderHistoryResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Portfolio Margin REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingPortfolioMargin\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * QueryUmModifyOrderHistoryResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class QueryUmModifyOrderHistoryResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'queryUmModifyOrderHistoryResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'amendmentId' => 'int',
        'symbol' => 'string',
        'pair' => 'string',
        'orderId' => 'int',
        'clientOrderId' => 'string',
        'time' => 'int',
        'amendment' => '\Binance\Client\DerivativesTradingPortfolioMargin\Model\QueryCmModifyOrderHistoryResponseInnerAmendment',
        'priceMatch' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'amendmentId' => 'int64',
        'symbol' => null,
        'pair' => null,
        'orderId' => 'int64',
        'clientOrderId' => null,
        'time' => 'int64',
        'amendment' => null,
        'priceMatch' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'amendmentId' => false,
        'symbol' => false,
        'pair' => false,
        'orderId' => false,
        'clientOrderId' => false,
        'time' => false,
        'amendment' => false,
        'priceMatch' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amendmentId' => 'amendmentId',
        'symbol' => 'symbol',
        'pair' => 'pair',
        'orderId' => 'orderId',
        'clientOrderId' => 'clientOrderId',
        'time' => 'time',
        'amendment' => 'amendment',
        'priceMatch' => 'priceMatch',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'amendmentId' => 'setAmendmentId',
        'symbol' => 'setSymbol',
        'pair' => 'setPair',
        'orderId' => 'setOrderId',
        'clientOrderId' => 'setClientOrderId',
        'time' => 'setTime',
        'amendment' => 'setAmendment',
        'priceMatch' => 'setPriceMatch',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'amendmentId' => 'getAmendmentId',
        'symbol' => 'getSymbol',
        'pair' => 'getPair',
        'orderId' => 'getOrderId',
        'clientOrderId' => 'getClientOrderId',
        'time' => 'getTime',
        'amendment' => 'getAmendment',
        'priceMatch' => 'getPriceMatch',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amendmentId', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('pair', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('clientOrderId', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('amendment', $data ?? [], null);
        $this->setIfExists('priceMatch', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets amendmentId.
     *
     * @return null|int
     */
    public function getAmendmentId()
    {
        return $this->container['amendmentId'];
    }

    /**
     * Sets amendmentId.
     *
     * @param null|int $amendmentId amendmentId
     *
     * @return self
     */
    public function setAmendmentId($amendmentId)
    {
        if (is_null($amendmentId)) {
            throw new \InvalidArgumentException('non-nullable amendmentId cannot be null');
        }
        $this->container['amendmentId'] = $amendmentId;

        return $this;
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets pair.
     *
     * @return null|string
     */
    public function getPair()
    {
        return $this->container['pair'];
    }

    /**
     * Sets pair.
     *
     * @param null|string $pair pair
     *
     * @return self
     */
    public function setPair($pair)
    {
        if (is_null($pair)) {
            throw new \InvalidArgumentException('non-nullable pair cannot be null');
        }
        $this->container['pair'] = $pair;

        return $this;
    }

    /**
     * Gets orderId.
     *
     * @return null|int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId.
     *
     * @param null|int $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets clientOrderId.
     *
     * @return null|string
     */
    public function getClientOrderId()
    {
        return $this->container['clientOrderId'];
    }

    /**
     * Sets clientOrderId.
     *
     * @param null|string $clientOrderId clientOrderId
     *
     * @return self
     */
    public function setClientOrderId($clientOrderId)
    {
        if (is_null($clientOrderId)) {
            throw new \InvalidArgumentException('non-nullable clientOrderId cannot be null');
        }
        $this->container['clientOrderId'] = $clientOrderId;

        return $this;
    }

    /**
     * Gets time.
     *
     * @return null|int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time.
     *
     * @param null|int $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets amendment.
     *
     * @return null|QueryCmModifyOrderHistoryResponseInnerAmendment
     */
    public function getAmendment()
    {
        return $this->container['amendment'];
    }

    /**
     * Sets amendment.
     *
     * @param null|QueryCmModifyOrderHistoryResponseInnerAmendment $amendment amendment
     *
     * @return self
     */
    public function setAmendment($amendment)
    {
        if (is_null($amendment)) {
            throw new \InvalidArgumentException('non-nullable amendment cannot be null');
        }
        $this->container['amendment'] = $amendment;

        return $this;
    }

    /**
     * Gets priceMatch.
     *
     * @return null|string
     */
    public function getPriceMatch()
    {
        return $this->container['priceMatch'];
    }

    /**
     * Sets priceMatch.
     *
     * @param null|string $priceMatch priceMatch
     *
     * @return self
     */
    public function setPriceMatch($priceMatch)
    {
        if (is_null($priceMatch)) {
            throw new \InvalidArgumentException('non-nullable priceMatch cannot be null');
        }
        $this->container['priceMatch'] = $priceMatch;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
