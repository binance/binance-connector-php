<?php

/**
 * GetLockedSubscriptionPreviewResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Simple Earn REST API.
 *
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\SimpleEarn\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetLockedSubscriptionPreviewResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetLockedSubscriptionPreviewResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getLockedSubscriptionPreviewResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'rewardAsset' => 'string',
        'totalRewardAmt' => 'string',
        'extraRewardAsset' => 'string',
        'estTotalExtraRewardAmt' => 'string',
        'boostRewardAsset' => 'string',
        'estDailyRewardAmt' => 'string',
        'nextPay' => 'string',
        'nextPayDate' => 'string',
        'valueDate' => 'string',
        'rewardsEndDate' => 'string',
        'deliverDate' => 'string',
        'nextSubscriptionDate' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'rewardAsset' => null,
        'totalRewardAmt' => null,
        'extraRewardAsset' => null,
        'estTotalExtraRewardAmt' => null,
        'boostRewardAsset' => null,
        'estDailyRewardAmt' => null,
        'nextPay' => null,
        'nextPayDate' => null,
        'valueDate' => null,
        'rewardsEndDate' => null,
        'deliverDate' => null,
        'nextSubscriptionDate' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'rewardAsset' => false,
        'totalRewardAmt' => false,
        'extraRewardAsset' => false,
        'estTotalExtraRewardAmt' => false,
        'boostRewardAsset' => false,
        'estDailyRewardAmt' => false,
        'nextPay' => false,
        'nextPayDate' => false,
        'valueDate' => false,
        'rewardsEndDate' => false,
        'deliverDate' => false,
        'nextSubscriptionDate' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rewardAsset' => 'rewardAsset',
        'totalRewardAmt' => 'totalRewardAmt',
        'extraRewardAsset' => 'extraRewardAsset',
        'estTotalExtraRewardAmt' => 'estTotalExtraRewardAmt',
        'boostRewardAsset' => 'boostRewardAsset',
        'estDailyRewardAmt' => 'estDailyRewardAmt',
        'nextPay' => 'nextPay',
        'nextPayDate' => 'nextPayDate',
        'valueDate' => 'valueDate',
        'rewardsEndDate' => 'rewardsEndDate',
        'deliverDate' => 'deliverDate',
        'nextSubscriptionDate' => 'nextSubscriptionDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'rewardAsset' => 'setRewardAsset',
        'totalRewardAmt' => 'setTotalRewardAmt',
        'extraRewardAsset' => 'setExtraRewardAsset',
        'estTotalExtraRewardAmt' => 'setEstTotalExtraRewardAmt',
        'boostRewardAsset' => 'setBoostRewardAsset',
        'estDailyRewardAmt' => 'setEstDailyRewardAmt',
        'nextPay' => 'setNextPay',
        'nextPayDate' => 'setNextPayDate',
        'valueDate' => 'setValueDate',
        'rewardsEndDate' => 'setRewardsEndDate',
        'deliverDate' => 'setDeliverDate',
        'nextSubscriptionDate' => 'setNextSubscriptionDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'rewardAsset' => 'getRewardAsset',
        'totalRewardAmt' => 'getTotalRewardAmt',
        'extraRewardAsset' => 'getExtraRewardAsset',
        'estTotalExtraRewardAmt' => 'getEstTotalExtraRewardAmt',
        'boostRewardAsset' => 'getBoostRewardAsset',
        'estDailyRewardAmt' => 'getEstDailyRewardAmt',
        'nextPay' => 'getNextPay',
        'nextPayDate' => 'getNextPayDate',
        'valueDate' => 'getValueDate',
        'rewardsEndDate' => 'getRewardsEndDate',
        'deliverDate' => 'getDeliverDate',
        'nextSubscriptionDate' => 'getNextSubscriptionDate',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('rewardAsset', $data ?? [], null);
        $this->setIfExists('totalRewardAmt', $data ?? [], null);
        $this->setIfExists('extraRewardAsset', $data ?? [], null);
        $this->setIfExists('estTotalExtraRewardAmt', $data ?? [], null);
        $this->setIfExists('boostRewardAsset', $data ?? [], null);
        $this->setIfExists('estDailyRewardAmt', $data ?? [], null);
        $this->setIfExists('nextPay', $data ?? [], null);
        $this->setIfExists('nextPayDate', $data ?? [], null);
        $this->setIfExists('valueDate', $data ?? [], null);
        $this->setIfExists('rewardsEndDate', $data ?? [], null);
        $this->setIfExists('deliverDate', $data ?? [], null);
        $this->setIfExists('nextSubscriptionDate', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets rewardAsset.
     *
     * @return null|string
     */
    public function getRewardAsset()
    {
        return $this->container['rewardAsset'];
    }

    /**
     * Sets rewardAsset.
     *
     * @param null|string $rewardAsset rewardAsset
     *
     * @return self
     */
    public function setRewardAsset($rewardAsset)
    {
        if (is_null($rewardAsset)) {
            throw new \InvalidArgumentException('non-nullable rewardAsset cannot be null');
        }
        $this->container['rewardAsset'] = $rewardAsset;

        return $this;
    }

    /**
     * Gets totalRewardAmt.
     *
     * @return null|string
     */
    public function getTotalRewardAmt()
    {
        return $this->container['totalRewardAmt'];
    }

    /**
     * Sets totalRewardAmt.
     *
     * @param null|string $totalRewardAmt totalRewardAmt
     *
     * @return self
     */
    public function setTotalRewardAmt($totalRewardAmt)
    {
        if (is_null($totalRewardAmt)) {
            throw new \InvalidArgumentException('non-nullable totalRewardAmt cannot be null');
        }
        $this->container['totalRewardAmt'] = $totalRewardAmt;

        return $this;
    }

    /**
     * Gets extraRewardAsset.
     *
     * @return null|string
     */
    public function getExtraRewardAsset()
    {
        return $this->container['extraRewardAsset'];
    }

    /**
     * Sets extraRewardAsset.
     *
     * @param null|string $extraRewardAsset extraRewardAsset
     *
     * @return self
     */
    public function setExtraRewardAsset($extraRewardAsset)
    {
        if (is_null($extraRewardAsset)) {
            throw new \InvalidArgumentException('non-nullable extraRewardAsset cannot be null');
        }
        $this->container['extraRewardAsset'] = $extraRewardAsset;

        return $this;
    }

    /**
     * Gets estTotalExtraRewardAmt.
     *
     * @return null|string
     */
    public function getEstTotalExtraRewardAmt()
    {
        return $this->container['estTotalExtraRewardAmt'];
    }

    /**
     * Sets estTotalExtraRewardAmt.
     *
     * @param null|string $estTotalExtraRewardAmt estTotalExtraRewardAmt
     *
     * @return self
     */
    public function setEstTotalExtraRewardAmt($estTotalExtraRewardAmt)
    {
        if (is_null($estTotalExtraRewardAmt)) {
            throw new \InvalidArgumentException('non-nullable estTotalExtraRewardAmt cannot be null');
        }
        $this->container['estTotalExtraRewardAmt'] = $estTotalExtraRewardAmt;

        return $this;
    }

    /**
     * Gets boostRewardAsset.
     *
     * @return null|string
     */
    public function getBoostRewardAsset()
    {
        return $this->container['boostRewardAsset'];
    }

    /**
     * Sets boostRewardAsset.
     *
     * @param null|string $boostRewardAsset boostRewardAsset
     *
     * @return self
     */
    public function setBoostRewardAsset($boostRewardAsset)
    {
        if (is_null($boostRewardAsset)) {
            throw new \InvalidArgumentException('non-nullable boostRewardAsset cannot be null');
        }
        $this->container['boostRewardAsset'] = $boostRewardAsset;

        return $this;
    }

    /**
     * Gets estDailyRewardAmt.
     *
     * @return null|string
     */
    public function getEstDailyRewardAmt()
    {
        return $this->container['estDailyRewardAmt'];
    }

    /**
     * Sets estDailyRewardAmt.
     *
     * @param null|string $estDailyRewardAmt estDailyRewardAmt
     *
     * @return self
     */
    public function setEstDailyRewardAmt($estDailyRewardAmt)
    {
        if (is_null($estDailyRewardAmt)) {
            throw new \InvalidArgumentException('non-nullable estDailyRewardAmt cannot be null');
        }
        $this->container['estDailyRewardAmt'] = $estDailyRewardAmt;

        return $this;
    }

    /**
     * Gets nextPay.
     *
     * @return null|string
     */
    public function getNextPay()
    {
        return $this->container['nextPay'];
    }

    /**
     * Sets nextPay.
     *
     * @param null|string $nextPay nextPay
     *
     * @return self
     */
    public function setNextPay($nextPay)
    {
        if (is_null($nextPay)) {
            throw new \InvalidArgumentException('non-nullable nextPay cannot be null');
        }
        $this->container['nextPay'] = $nextPay;

        return $this;
    }

    /**
     * Gets nextPayDate.
     *
     * @return null|string
     */
    public function getNextPayDate()
    {
        return $this->container['nextPayDate'];
    }

    /**
     * Sets nextPayDate.
     *
     * @param null|string $nextPayDate nextPayDate
     *
     * @return self
     */
    public function setNextPayDate($nextPayDate)
    {
        if (is_null($nextPayDate)) {
            throw new \InvalidArgumentException('non-nullable nextPayDate cannot be null');
        }
        $this->container['nextPayDate'] = $nextPayDate;

        return $this;
    }

    /**
     * Gets valueDate.
     *
     * @return null|string
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate.
     *
     * @param null|string $valueDate valueDate
     *
     * @return self
     */
    public function setValueDate($valueDate)
    {
        if (is_null($valueDate)) {
            throw new \InvalidArgumentException('non-nullable valueDate cannot be null');
        }
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Gets rewardsEndDate.
     *
     * @return null|string
     */
    public function getRewardsEndDate()
    {
        return $this->container['rewardsEndDate'];
    }

    /**
     * Sets rewardsEndDate.
     *
     * @param null|string $rewardsEndDate rewardsEndDate
     *
     * @return self
     */
    public function setRewardsEndDate($rewardsEndDate)
    {
        if (is_null($rewardsEndDate)) {
            throw new \InvalidArgumentException('non-nullable rewardsEndDate cannot be null');
        }
        $this->container['rewardsEndDate'] = $rewardsEndDate;

        return $this;
    }

    /**
     * Gets deliverDate.
     *
     * @return null|string
     */
    public function getDeliverDate()
    {
        return $this->container['deliverDate'];
    }

    /**
     * Sets deliverDate.
     *
     * @param null|string $deliverDate deliverDate
     *
     * @return self
     */
    public function setDeliverDate($deliverDate)
    {
        if (is_null($deliverDate)) {
            throw new \InvalidArgumentException('non-nullable deliverDate cannot be null');
        }
        $this->container['deliverDate'] = $deliverDate;

        return $this;
    }

    /**
     * Gets nextSubscriptionDate.
     *
     * @return null|string
     */
    public function getNextSubscriptionDate()
    {
        return $this->container['nextSubscriptionDate'];
    }

    /**
     * Sets nextSubscriptionDate.
     *
     * @param null|string $nextSubscriptionDate nextSubscriptionDate
     *
     * @return self
     */
    public function setNextSubscriptionDate($nextSubscriptionDate)
    {
        if (is_null($nextSubscriptionDate)) {
            throw new \InvalidArgumentException('non-nullable nextSubscriptionDate cannot be null');
        }
        $this->container['nextSubscriptionDate'] = $nextSubscriptionDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
