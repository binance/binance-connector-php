<?php

/**
 * AccountApiTest
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Options REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Binance\Client\DerivativesTradingOptions\Test\Api;

use Binance\Client\DerivativesTradingOptions\Api\AccountApi;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Configuration\SignatureConfiguration;
use Binance\Common\HttpClient;
use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;

/**
 * AccountApiTest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @internal
 *
 * @coversNothing
 */
class AccountApiTest extends TestCase
{
    public function getApiMock(&$request)
    {
        $clientMock = $this->createMock(HttpClient::class);
        $signatureConfig = new SignatureConfiguration();
        $signatureConfig->setApiKey('apiKey');
        $signatureConfig->setSecretKey('secretKey');
        $clientConfig = new ClientConfiguration();
        $clientConfig->setUrl('http://localhost:8080');
        $clientConfig->setSignatureConfiguration($signatureConfig);
        $responseMock = $this->createMock(ResponseInterface::class);

        $responseMock->expects($this->any())
            ->method('getStatusCode')
            ->willReturn(200)
        ;

        $responseMock->expects($this->any())
            ->method('getBody')
            ->willReturn(Utils::streamFor('{}'))
        ;

        $clientMock->expects($this->once())
            ->method('send')
            ->will($this->returnCallback(function ($actualRequest) use (&$request, $responseMock) {
                $request = $actualRequest;

                return $responseMock;
            }))
        ;

        $apiMock = $this->getMockBuilder(AccountApi::class)
            ->setConstructorArgs([$clientConfig, $clientMock])
            ->onlyMethods(['getTimestamp'])
            ->getMock()
        ;

        $apiMock->method('getTimestamp')->willReturn('1736393892000');

        return $apiMock;
    }

    /**
     * Test case for accountFundingFlow.
     *
     * Account Funding Flow (USER_DATA).
     */
    public function testAccountFundingFlow()
    {
        $currency = '';
        $recordId = 1;
        $startTime = 1623319461670;
        $endTime = 1641782889000;
        $limit = 100;
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->accountFundingFlow($currency, $recordId, $startTime, $endTime, $limit, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/eapi/v1/bill', $request->getUri()->getPath());
        self::assertEquals('f0086e9f3895b2783af30133a64c5d01c9b045c0032c9eea19078ecf24771e9d', $queryMap['signature']);
    }

    /**
     * Test case for getDownloadIdForOptionTransactionHistory.
     *
     * Get Download Id For Option Transaction History (USER_DATA).
     */
    public function testGetDownloadIdForOptionTransactionHistory()
    {
        $startTime = 1623319461670;
        $endTime = 1641782889000;
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->getDownloadIdForOptionTransactionHistory($startTime, $endTime, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/eapi/v1/income/asyn', $request->getUri()->getPath());
        self::assertEquals('812caedbe8f349196a4532c2050ff706ed2569fed185039c7b60a78cd84bc718', $queryMap['signature']);
    }

    /**
     * Test case for getOptionTransactionHistoryDownloadLinkById.
     *
     * Get Option Transaction History Download Link by Id (USER_DATA).
     */
    public function testGetOptionTransactionHistoryDownloadLinkById()
    {
        $downloadId = '1';
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->getOptionTransactionHistoryDownloadLinkById($downloadId, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/eapi/v1/income/asyn/id', $request->getUri()->getPath());
        self::assertEquals('4947fe463a17e3ec0b50fc22b21afc2aafddf3da892fa0c8dfd1b9c50af87349', $queryMap['signature']);
    }

    /**
     * Test case for optionAccountInformation.
     *
     * Option Account Information(TRADE).
     */
    public function testOptionAccountInformation()
    {
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->optionAccountInformation($recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/eapi/v1/account', $request->getUri()->getPath());
        self::assertEquals('2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75', $queryMap['signature']);
    }
}
