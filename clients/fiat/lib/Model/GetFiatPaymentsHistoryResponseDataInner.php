<?php

/**
 * GetFiatPaymentsHistoryResponseDataInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Fiat REST API.
 *
 * OpenAPI Specification for the Binance Fiat REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Fiat\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetFiatPaymentsHistoryResponseDataInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetFiatPaymentsHistoryResponseDataInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getFiatPaymentsHistoryResponse_data_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'orderNo' => 'string',
        'sourceAmount' => 'string',
        'fiatCurrency' => 'string',
        'obtainAmount' => 'string',
        'cryptoCurrency' => 'string',
        'totalFee' => 'string',
        'price' => 'string',
        'status' => 'string',
        'paymentMethod' => 'string',
        'createTime' => 'int',
        'updateTime' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'orderNo' => null,
        'sourceAmount' => null,
        'fiatCurrency' => null,
        'obtainAmount' => null,
        'cryptoCurrency' => null,
        'totalFee' => null,
        'price' => null,
        'status' => null,
        'paymentMethod' => null,
        'createTime' => 'int64',
        'updateTime' => 'int64',
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'orderNo' => false,
        'sourceAmount' => false,
        'fiatCurrency' => false,
        'obtainAmount' => false,
        'cryptoCurrency' => false,
        'totalFee' => false,
        'price' => false,
        'status' => false,
        'paymentMethod' => false,
        'createTime' => false,
        'updateTime' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderNo' => 'orderNo',
        'sourceAmount' => 'sourceAmount',
        'fiatCurrency' => 'fiatCurrency',
        'obtainAmount' => 'obtainAmount',
        'cryptoCurrency' => 'cryptoCurrency',
        'totalFee' => 'totalFee',
        'price' => 'price',
        'status' => 'status',
        'paymentMethod' => 'paymentMethod',
        'createTime' => 'createTime',
        'updateTime' => 'updateTime',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'orderNo' => 'setOrderNo',
        'sourceAmount' => 'setSourceAmount',
        'fiatCurrency' => 'setFiatCurrency',
        'obtainAmount' => 'setObtainAmount',
        'cryptoCurrency' => 'setCryptoCurrency',
        'totalFee' => 'setTotalFee',
        'price' => 'setPrice',
        'status' => 'setStatus',
        'paymentMethod' => 'setPaymentMethod',
        'createTime' => 'setCreateTime',
        'updateTime' => 'setUpdateTime',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'orderNo' => 'getOrderNo',
        'sourceAmount' => 'getSourceAmount',
        'fiatCurrency' => 'getFiatCurrency',
        'obtainAmount' => 'getObtainAmount',
        'cryptoCurrency' => 'getCryptoCurrency',
        'totalFee' => 'getTotalFee',
        'price' => 'getPrice',
        'status' => 'getStatus',
        'paymentMethod' => 'getPaymentMethod',
        'createTime' => 'getCreateTime',
        'updateTime' => 'getUpdateTime',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('orderNo', $data ?? [], null);
        $this->setIfExists('sourceAmount', $data ?? [], null);
        $this->setIfExists('fiatCurrency', $data ?? [], null);
        $this->setIfExists('obtainAmount', $data ?? [], null);
        $this->setIfExists('cryptoCurrency', $data ?? [], null);
        $this->setIfExists('totalFee', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('createTime', $data ?? [], null);
        $this->setIfExists('updateTime', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets orderNo.
     *
     * @return null|string
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo.
     *
     * @param null|string $orderNo orderNo
     *
     * @return self
     */
    public function setOrderNo($orderNo)
    {
        if (is_null($orderNo)) {
            throw new \InvalidArgumentException('non-nullable orderNo cannot be null');
        }
        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets sourceAmount.
     *
     * @return null|string
     */
    public function getSourceAmount()
    {
        return $this->container['sourceAmount'];
    }

    /**
     * Sets sourceAmount.
     *
     * @param null|string $sourceAmount sourceAmount
     *
     * @return self
     */
    public function setSourceAmount($sourceAmount)
    {
        if (is_null($sourceAmount)) {
            throw new \InvalidArgumentException('non-nullable sourceAmount cannot be null');
        }
        $this->container['sourceAmount'] = $sourceAmount;

        return $this;
    }

    /**
     * Gets fiatCurrency.
     *
     * @return null|string
     */
    public function getFiatCurrency()
    {
        return $this->container['fiatCurrency'];
    }

    /**
     * Sets fiatCurrency.
     *
     * @param null|string $fiatCurrency fiatCurrency
     *
     * @return self
     */
    public function setFiatCurrency($fiatCurrency)
    {
        if (is_null($fiatCurrency)) {
            throw new \InvalidArgumentException('non-nullable fiatCurrency cannot be null');
        }
        $this->container['fiatCurrency'] = $fiatCurrency;

        return $this;
    }

    /**
     * Gets obtainAmount.
     *
     * @return null|string
     */
    public function getObtainAmount()
    {
        return $this->container['obtainAmount'];
    }

    /**
     * Sets obtainAmount.
     *
     * @param null|string $obtainAmount obtainAmount
     *
     * @return self
     */
    public function setObtainAmount($obtainAmount)
    {
        if (is_null($obtainAmount)) {
            throw new \InvalidArgumentException('non-nullable obtainAmount cannot be null');
        }
        $this->container['obtainAmount'] = $obtainAmount;

        return $this;
    }

    /**
     * Gets cryptoCurrency.
     *
     * @return null|string
     */
    public function getCryptoCurrency()
    {
        return $this->container['cryptoCurrency'];
    }

    /**
     * Sets cryptoCurrency.
     *
     * @param null|string $cryptoCurrency cryptoCurrency
     *
     * @return self
     */
    public function setCryptoCurrency($cryptoCurrency)
    {
        if (is_null($cryptoCurrency)) {
            throw new \InvalidArgumentException('non-nullable cryptoCurrency cannot be null');
        }
        $this->container['cryptoCurrency'] = $cryptoCurrency;

        return $this;
    }

    /**
     * Gets totalFee.
     *
     * @return null|string
     */
    public function getTotalFee()
    {
        return $this->container['totalFee'];
    }

    /**
     * Sets totalFee.
     *
     * @param null|string $totalFee totalFee
     *
     * @return self
     */
    public function setTotalFee($totalFee)
    {
        if (is_null($totalFee)) {
            throw new \InvalidArgumentException('non-nullable totalFee cannot be null');
        }
        $this->container['totalFee'] = $totalFee;

        return $this;
    }

    /**
     * Gets price.
     *
     * @return null|string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price.
     *
     * @param null|string $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return null|string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets paymentMethod.
     *
     * @return null|string
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod.
     *
     * @param null|string $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets createTime.
     *
     * @return null|int
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime.
     *
     * @param null|int $createTime createTime
     *
     * @return self
     */
    public function setCreateTime($createTime)
    {
        if (is_null($createTime)) {
            throw new \InvalidArgumentException('non-nullable createTime cannot be null');
        }
        $this->container['createTime'] = $createTime;

        return $this;
    }

    /**
     * Gets updateTime.
     *
     * @return null|int
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime.
     *
     * @param null|int $updateTime updateTime
     *
     * @return self
     */
    public function setUpdateTime($updateTime)
    {
        if (is_null($updateTime)) {
            throw new \InvalidArgumentException('non-nullable updateTime cannot be null');
        }
        $this->container['updateTime'] = $updateTime;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
