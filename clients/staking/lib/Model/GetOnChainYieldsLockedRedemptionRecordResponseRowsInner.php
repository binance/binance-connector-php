<?php

/**
 * GetOnChainYieldsLockedRedemptionRecordResponseRowsInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Staking REST API.
 *
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Staking\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetOnChainYieldsLockedRedemptionRecordResponseRowsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetOnChainYieldsLockedRedemptionRecordResponseRowsInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getOnChainYieldsLockedRedemptionRecordResponse_rows_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'positionId' => 'string',
        'redeemId' => 'int',
        'time' => 'int',
        'asset' => 'string',
        'lockPeriod' => 'string',
        'amount' => 'string',
        'originalAmount' => 'string',
        'type' => 'string',
        'deliverDate' => 'string',
        'lossAmount' => 'string',
        'isComplete' => 'bool',
        'rewardAsset' => 'string',
        'rewardAmt' => 'string',
        'status' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'positionId' => null,
        'redeemId' => 'int64',
        'time' => 'int64',
        'asset' => null,
        'lockPeriod' => null,
        'amount' => null,
        'originalAmount' => null,
        'type' => null,
        'deliverDate' => null,
        'lossAmount' => null,
        'isComplete' => null,
        'rewardAsset' => null,
        'rewardAmt' => null,
        'status' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'positionId' => false,
        'redeemId' => false,
        'time' => false,
        'asset' => false,
        'lockPeriod' => false,
        'amount' => false,
        'originalAmount' => false,
        'type' => false,
        'deliverDate' => false,
        'lossAmount' => false,
        'isComplete' => false,
        'rewardAsset' => false,
        'rewardAmt' => false,
        'status' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'positionId' => 'positionId',
        'redeemId' => 'redeemId',
        'time' => 'time',
        'asset' => 'asset',
        'lockPeriod' => 'lockPeriod',
        'amount' => 'amount',
        'originalAmount' => 'originalAmount',
        'type' => 'type',
        'deliverDate' => 'deliverDate',
        'lossAmount' => 'lossAmount',
        'isComplete' => 'isComplete',
        'rewardAsset' => 'rewardAsset',
        'rewardAmt' => 'rewardAmt',
        'status' => 'status',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'positionId' => 'setPositionId',
        'redeemId' => 'setRedeemId',
        'time' => 'setTime',
        'asset' => 'setAsset',
        'lockPeriod' => 'setLockPeriod',
        'amount' => 'setAmount',
        'originalAmount' => 'setOriginalAmount',
        'type' => 'setType',
        'deliverDate' => 'setDeliverDate',
        'lossAmount' => 'setLossAmount',
        'isComplete' => 'setIsComplete',
        'rewardAsset' => 'setRewardAsset',
        'rewardAmt' => 'setRewardAmt',
        'status' => 'setStatus',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'positionId' => 'getPositionId',
        'redeemId' => 'getRedeemId',
        'time' => 'getTime',
        'asset' => 'getAsset',
        'lockPeriod' => 'getLockPeriod',
        'amount' => 'getAmount',
        'originalAmount' => 'getOriginalAmount',
        'type' => 'getType',
        'deliverDate' => 'getDeliverDate',
        'lossAmount' => 'getLossAmount',
        'isComplete' => 'getIsComplete',
        'rewardAsset' => 'getRewardAsset',
        'rewardAmt' => 'getRewardAmt',
        'status' => 'getStatus',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('positionId', $data ?? [], null);
        $this->setIfExists('redeemId', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('lockPeriod', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('originalAmount', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('deliverDate', $data ?? [], null);
        $this->setIfExists('lossAmount', $data ?? [], null);
        $this->setIfExists('isComplete', $data ?? [], null);
        $this->setIfExists('rewardAsset', $data ?? [], null);
        $this->setIfExists('rewardAmt', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets positionId.
     *
     * @return null|string
     */
    public function getPositionId()
    {
        return $this->container['positionId'];
    }

    /**
     * Sets positionId.
     *
     * @param null|string $positionId positionId
     *
     * @return self
     */
    public function setPositionId($positionId)
    {
        if (is_null($positionId)) {
            throw new \InvalidArgumentException('non-nullable positionId cannot be null');
        }
        $this->container['positionId'] = $positionId;

        return $this;
    }

    /**
     * Gets redeemId.
     *
     * @return null|int
     */
    public function getRedeemId()
    {
        return $this->container['redeemId'];
    }

    /**
     * Sets redeemId.
     *
     * @param null|int $redeemId redeemId
     *
     * @return self
     */
    public function setRedeemId($redeemId)
    {
        if (is_null($redeemId)) {
            throw new \InvalidArgumentException('non-nullable redeemId cannot be null');
        }
        $this->container['redeemId'] = $redeemId;

        return $this;
    }

    /**
     * Gets time.
     *
     * @return null|int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time.
     *
     * @param null|int $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets asset.
     *
     * @return null|string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset.
     *
     * @param null|string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets lockPeriod.
     *
     * @return null|string
     */
    public function getLockPeriod()
    {
        return $this->container['lockPeriod'];
    }

    /**
     * Sets lockPeriod.
     *
     * @param null|string $lockPeriod lockPeriod
     *
     * @return self
     */
    public function setLockPeriod($lockPeriod)
    {
        if (is_null($lockPeriod)) {
            throw new \InvalidArgumentException('non-nullable lockPeriod cannot be null');
        }
        $this->container['lockPeriod'] = $lockPeriod;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return null|string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param null|string $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets originalAmount.
     *
     * @return null|string
     */
    public function getOriginalAmount()
    {
        return $this->container['originalAmount'];
    }

    /**
     * Sets originalAmount.
     *
     * @param null|string $originalAmount originalAmount
     *
     * @return self
     */
    public function setOriginalAmount($originalAmount)
    {
        if (is_null($originalAmount)) {
            throw new \InvalidArgumentException('non-nullable originalAmount cannot be null');
        }
        $this->container['originalAmount'] = $originalAmount;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return null|string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param null|string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets deliverDate.
     *
     * @return null|string
     */
    public function getDeliverDate()
    {
        return $this->container['deliverDate'];
    }

    /**
     * Sets deliverDate.
     *
     * @param null|string $deliverDate deliverDate
     *
     * @return self
     */
    public function setDeliverDate($deliverDate)
    {
        if (is_null($deliverDate)) {
            throw new \InvalidArgumentException('non-nullable deliverDate cannot be null');
        }
        $this->container['deliverDate'] = $deliverDate;

        return $this;
    }

    /**
     * Gets lossAmount.
     *
     * @return null|string
     */
    public function getLossAmount()
    {
        return $this->container['lossAmount'];
    }

    /**
     * Sets lossAmount.
     *
     * @param null|string $lossAmount lossAmount
     *
     * @return self
     */
    public function setLossAmount($lossAmount)
    {
        if (is_null($lossAmount)) {
            throw new \InvalidArgumentException('non-nullable lossAmount cannot be null');
        }
        $this->container['lossAmount'] = $lossAmount;

        return $this;
    }

    /**
     * Gets isComplete.
     *
     * @return null|bool
     */
    public function getIsComplete()
    {
        return $this->container['isComplete'];
    }

    /**
     * Sets isComplete.
     *
     * @param null|bool $isComplete isComplete
     *
     * @return self
     */
    public function setIsComplete($isComplete)
    {
        if (is_null($isComplete)) {
            throw new \InvalidArgumentException('non-nullable isComplete cannot be null');
        }
        $this->container['isComplete'] = $isComplete;

        return $this;
    }

    /**
     * Gets rewardAsset.
     *
     * @return null|string
     */
    public function getRewardAsset()
    {
        return $this->container['rewardAsset'];
    }

    /**
     * Sets rewardAsset.
     *
     * @param null|string $rewardAsset rewardAsset
     *
     * @return self
     */
    public function setRewardAsset($rewardAsset)
    {
        if (is_null($rewardAsset)) {
            throw new \InvalidArgumentException('non-nullable rewardAsset cannot be null');
        }
        $this->container['rewardAsset'] = $rewardAsset;

        return $this;
    }

    /**
     * Gets rewardAmt.
     *
     * @return null|string
     */
    public function getRewardAmt()
    {
        return $this->container['rewardAmt'];
    }

    /**
     * Sets rewardAmt.
     *
     * @param null|string $rewardAmt rewardAmt
     *
     * @return self
     */
    public function setRewardAmt($rewardAmt)
    {
        if (is_null($rewardAmt)) {
            throw new \InvalidArgumentException('non-nullable rewardAmt cannot be null');
        }
        $this->container['rewardAmt'] = $rewardAmt;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return null|string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
