<?php

/**
 * MarketDataApi
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Gift Card REST API.
 *
 * OpenAPI Specification for the Binance Gift Card REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\GiftCard\Api;

use Binance\Client\GiftCard\Model\CreateADualTokenGiftCardRequest;
use Binance\Client\GiftCard\Model\CreateADualTokenGiftCardResponse;
use Binance\Client\GiftCard\Model\CreateASingleTokenGiftCardRequest;
use Binance\Client\GiftCard\Model\CreateASingleTokenGiftCardResponse;
use Binance\Client\GiftCard\Model\FetchRsaPublicKeyResponse;
use Binance\Client\GiftCard\Model\FetchTokenLimitResponse;
use Binance\Client\GiftCard\Model\RedeemABinanceGiftCardRequest;
use Binance\Client\GiftCard\Model\RedeemABinanceGiftCardResponse;
use Binance\Client\GiftCard\Model\VerifyBinanceGiftCardByGiftCardNumberResponse;
use Binance\Common\ApiException;
use Binance\Common\Auth\SignerFactory;
use Binance\Common\Auth\SignerInterface;
use Binance\Common\CommonUtils;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Dtos\ApiResponse;
use Binance\Common\HeaderSelector;
use Binance\Common\HttpClient;
use Binance\Common\ObjectSerializer;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Utils;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * MarketDataApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class MarketDataApi
{
    /** @var string[] */
    public const contentTypes = [
        'createADualTokenGiftCard' => ['application/x-www-form-urlencoded'],
        'createASingleTokenGiftCard' => ['application/x-www-form-urlencoded'],
        'fetchRsaPublicKey' => ['application/x-www-form-urlencoded'],
        'fetchTokenLimit' => ['application/x-www-form-urlencoded'],
        'redeemABinanceGiftCard' => ['application/x-www-form-urlencoded'],
        'verifyBinanceGiftCardByGiftCardNumber' => ['application/x-www-form-urlencoded'],
    ];
    private const HAS_TIME_UNIT = false;

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * Summary of clientConfig.
     *
     * @var ClientConfiguration
     */
    protected $clientConfig;

    /**
     * Summary of signer.
     *
     * @var SignerInterface
     */
    protected $signer;

    /**
     * userAgent for HTTP requests.
     *
     * @var string
     */
    private $userAgent;

    public function __construct(
        ?ClientConfiguration $clientConfig = new ClientConfiguration(),
        ?ClientInterface $client = null,
        ?HeaderSelector $selector = null,
    ) {
        $this->clientConfig = $clientConfig;
        $this->client = $client ?: new HttpClient($clientConfig);
        $this->headerSelector = $selector ?: new HeaderSelector();
        if (!empty($clientConfig->getSignatureConfiguration())) {
            $this->signer = SignerFactory::getSigner($clientConfig->getSignatureConfiguration());
        }
        $this->userAgent = sprintf('binance-gift-card/1.0.0 (PHP/%s; %s; %s)', phpversion(), PHP_OS_FAMILY, php_uname('m'));
    }

    /**
     * Operation createADualTokenGiftCard.
     *
     * Create a dual-token gift card(fixed value, discount feature)(TRADE)
     *
     * @param CreateADualTokenGiftCardRequest $createADualTokenGiftCardRequest createADualTokenGiftCardRequest (required)
     *
     * @return ApiResponse<CreateADualTokenGiftCardResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function createADualTokenGiftCard($createADualTokenGiftCardRequest): ApiResponse
    {
        return $this->createADualTokenGiftCardWithHttpInfo($createADualTokenGiftCardRequest);
    }

    /**
     * Operation createADualTokenGiftCardWithHttpInfo.
     *
     * Create a dual-token gift card(fixed value, discount feature)(TRADE)
     *
     * @param CreateADualTokenGiftCardRequest $createADualTokenGiftCardRequest (required)
     *
     * @return ApiResponse<CreateADualTokenGiftCardResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function createADualTokenGiftCardWithHttpInfo($createADualTokenGiftCardRequest): ApiResponse
    {
        $request = $this->createADualTokenGiftCardRequest($createADualTokenGiftCardRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\GiftCard\Model\CreateADualTokenGiftCardResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\GiftCard\Model\CreateADualTokenGiftCardResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\GiftCard\Model\CreateADualTokenGiftCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'createADualTokenGiftCard'.
     *
     * @param CreateADualTokenGiftCardRequest $createADualTokenGiftCardRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function createADualTokenGiftCardRequest($createADualTokenGiftCardRequest)
    {
        $contentType = self::contentTypes['createADualTokenGiftCard'][0];

        // verify the required parameter 'createADualTokenGiftCardRequest' is set
        if (null === $createADualTokenGiftCardRequest || (is_array($createADualTokenGiftCardRequest) && 0 === count($createADualTokenGiftCardRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createADualTokenGiftCardRequest when calling createADualTokenGiftCard'
            );
        }

        $resourcePath = '/sapi/v1/giftcard/buyCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $createADualTokenGiftCardRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $createADualTokenGiftCardRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $createADualTokenGiftCardRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($createADualTokenGiftCardRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createADualTokenGiftCardRequest));
            } else {
                $httpBody = $createADualTokenGiftCardRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createASingleTokenGiftCard.
     *
     * Create a single-token gift card (USER_DATA)
     *
     * @param CreateASingleTokenGiftCardRequest $createASingleTokenGiftCardRequest createASingleTokenGiftCardRequest (required)
     *
     * @return ApiResponse<CreateASingleTokenGiftCardResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function createASingleTokenGiftCard($createASingleTokenGiftCardRequest): ApiResponse
    {
        return $this->createASingleTokenGiftCardWithHttpInfo($createASingleTokenGiftCardRequest);
    }

    /**
     * Operation createASingleTokenGiftCardWithHttpInfo.
     *
     * Create a single-token gift card (USER_DATA)
     *
     * @param CreateASingleTokenGiftCardRequest $createASingleTokenGiftCardRequest (required)
     *
     * @return ApiResponse<CreateASingleTokenGiftCardResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function createASingleTokenGiftCardWithHttpInfo($createASingleTokenGiftCardRequest): ApiResponse
    {
        $request = $this->createASingleTokenGiftCardRequest($createASingleTokenGiftCardRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\GiftCard\Model\CreateASingleTokenGiftCardResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\GiftCard\Model\CreateASingleTokenGiftCardResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\GiftCard\Model\CreateASingleTokenGiftCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'createASingleTokenGiftCard'.
     *
     * @param CreateASingleTokenGiftCardRequest $createASingleTokenGiftCardRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function createASingleTokenGiftCardRequest($createASingleTokenGiftCardRequest)
    {
        $contentType = self::contentTypes['createASingleTokenGiftCard'][0];

        // verify the required parameter 'createASingleTokenGiftCardRequest' is set
        if (null === $createASingleTokenGiftCardRequest || (is_array($createASingleTokenGiftCardRequest) && 0 === count($createASingleTokenGiftCardRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createASingleTokenGiftCardRequest when calling createASingleTokenGiftCard'
            );
        }

        $resourcePath = '/sapi/v1/giftcard/createCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $createASingleTokenGiftCardRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $createASingleTokenGiftCardRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $createASingleTokenGiftCardRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($createASingleTokenGiftCardRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createASingleTokenGiftCardRequest));
            } else {
                $httpBody = $createASingleTokenGiftCardRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchRsaPublicKey.
     *
     * Fetch RSA Public Key(USER_DATA)
     *
     * @param null|int $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<FetchRsaPublicKeyResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function fetchRsaPublicKey($recvWindow = null): ApiResponse
    {
        return $this->fetchRsaPublicKeyWithHttpInfo($recvWindow);
    }

    /**
     * Operation fetchRsaPublicKeyWithHttpInfo.
     *
     * Fetch RSA Public Key(USER_DATA)
     *
     * @param null|int $recvWindow (optional)
     *
     * @return ApiResponse<FetchRsaPublicKeyResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function fetchRsaPublicKeyWithHttpInfo($recvWindow = null): ApiResponse
    {
        $request = $this->fetchRsaPublicKeyRequest($recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\GiftCard\Model\FetchRsaPublicKeyResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\GiftCard\Model\FetchRsaPublicKeyResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\GiftCard\Model\FetchRsaPublicKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'fetchRsaPublicKey'.
     *
     * @param null|int $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function fetchRsaPublicKeyRequest($recvWindow = null)
    {
        $contentType = self::contentTypes['fetchRsaPublicKey'][0];

        $resourcePath = '/sapi/v1/giftcard/cryptography/rsa-public-key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchTokenLimit.
     *
     * Fetch Token Limit(USER_DATA)
     *
     * @param string   $baseToken  The token you want to pay, example: BUSD (required)
     * @param null|int $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<FetchTokenLimitResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function fetchTokenLimit($baseToken, $recvWindow = null): ApiResponse
    {
        return $this->fetchTokenLimitWithHttpInfo($baseToken, $recvWindow);
    }

    /**
     * Operation fetchTokenLimitWithHttpInfo.
     *
     * Fetch Token Limit(USER_DATA)
     *
     * @param string   $baseToken  The token you want to pay, example: BUSD (required)
     * @param null|int $recvWindow (optional)
     *
     * @return ApiResponse<FetchTokenLimitResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function fetchTokenLimitWithHttpInfo($baseToken, $recvWindow = null): ApiResponse
    {
        $request = $this->fetchTokenLimitRequest($baseToken, $recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\GiftCard\Model\FetchTokenLimitResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\GiftCard\Model\FetchTokenLimitResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\GiftCard\Model\FetchTokenLimitResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'fetchTokenLimit'.
     *
     * @param string   $baseToken  The token you want to pay, example: BUSD (required)
     * @param null|int $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function fetchTokenLimitRequest($baseToken, $recvWindow = null)
    {
        $contentType = self::contentTypes['fetchTokenLimit'][0];

        // verify the required parameter 'baseToken' is set
        if (null === $baseToken || (is_array($baseToken) && 0 === count($baseToken))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $baseToken when calling fetchTokenLimit'
            );
        }

        $resourcePath = '/sapi/v1/giftcard/buyCode/token-limit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $baseToken,
            'baseToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemABinanceGiftCard.
     *
     * Redeem a Binance Gift Card(USER_DATA)
     *
     * @param RedeemABinanceGiftCardRequest $redeemABinanceGiftCardRequest redeemABinanceGiftCardRequest (required)
     *
     * @return ApiResponse<RedeemABinanceGiftCardResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function redeemABinanceGiftCard($redeemABinanceGiftCardRequest): ApiResponse
    {
        return $this->redeemABinanceGiftCardWithHttpInfo($redeemABinanceGiftCardRequest);
    }

    /**
     * Operation redeemABinanceGiftCardWithHttpInfo.
     *
     * Redeem a Binance Gift Card(USER_DATA)
     *
     * @param RedeemABinanceGiftCardRequest $redeemABinanceGiftCardRequest (required)
     *
     * @return ApiResponse<RedeemABinanceGiftCardResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function redeemABinanceGiftCardWithHttpInfo($redeemABinanceGiftCardRequest): ApiResponse
    {
        $request = $this->redeemABinanceGiftCardRequest($redeemABinanceGiftCardRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\GiftCard\Model\RedeemABinanceGiftCardResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\GiftCard\Model\RedeemABinanceGiftCardResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\GiftCard\Model\RedeemABinanceGiftCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'redeemABinanceGiftCard'.
     *
     * @param RedeemABinanceGiftCardRequest $redeemABinanceGiftCardRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function redeemABinanceGiftCardRequest($redeemABinanceGiftCardRequest)
    {
        $contentType = self::contentTypes['redeemABinanceGiftCard'][0];

        // verify the required parameter 'redeemABinanceGiftCardRequest' is set
        if (null === $redeemABinanceGiftCardRequest || (is_array($redeemABinanceGiftCardRequest) && 0 === count($redeemABinanceGiftCardRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redeemABinanceGiftCardRequest when calling redeemABinanceGiftCard'
            );
        }

        $resourcePath = '/sapi/v1/giftcard/redeemCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $redeemABinanceGiftCardRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $redeemABinanceGiftCardRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $redeemABinanceGiftCardRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($redeemABinanceGiftCardRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($redeemABinanceGiftCardRequest));
            } else {
                $httpBody = $redeemABinanceGiftCardRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyBinanceGiftCardByGiftCardNumber.
     *
     * Verify Binance Gift Card by Gift Card Number(USER_DATA)
     *
     * @param string   $referenceNo Enter the Gift Card Number (required)
     * @param null|int $recvWindow  recvWindow (optional)
     *
     * @return ApiResponse<VerifyBinanceGiftCardByGiftCardNumberResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function verifyBinanceGiftCardByGiftCardNumber($referenceNo, $recvWindow = null): ApiResponse
    {
        return $this->verifyBinanceGiftCardByGiftCardNumberWithHttpInfo($referenceNo, $recvWindow);
    }

    /**
     * Operation verifyBinanceGiftCardByGiftCardNumberWithHttpInfo.
     *
     * Verify Binance Gift Card by Gift Card Number(USER_DATA)
     *
     * @param string   $referenceNo Enter the Gift Card Number (required)
     * @param null|int $recvWindow  (optional)
     *
     * @return ApiResponse<VerifyBinanceGiftCardByGiftCardNumberResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function verifyBinanceGiftCardByGiftCardNumberWithHttpInfo($referenceNo, $recvWindow = null): ApiResponse
    {
        $request = $this->verifyBinanceGiftCardByGiftCardNumberRequest($referenceNo, $recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\GiftCard\Model\VerifyBinanceGiftCardByGiftCardNumberResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\GiftCard\Model\VerifyBinanceGiftCardByGiftCardNumberResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\GiftCard\Model\VerifyBinanceGiftCardByGiftCardNumberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'verifyBinanceGiftCardByGiftCardNumber'.
     *
     * @param string   $referenceNo Enter the Gift Card Number (required)
     * @param null|int $recvWindow  (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function verifyBinanceGiftCardByGiftCardNumberRequest($referenceNo, $recvWindow = null)
    {
        $contentType = self::contentTypes['verifyBinanceGiftCardByGiftCardNumber'][0];

        // verify the required parameter 'referenceNo' is set
        if (null === $referenceNo || (is_array($referenceNo) && 0 === count($referenceNo))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $referenceNo when calling verifyBinanceGiftCardByGiftCardNumber'
            );
        }

        $resourcePath = '/sapi/v1/giftcard/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $referenceNo,
            'referenceNo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Summary of getTimestamp.
     */
    public function getTimestamp(): string
    {
        return date_create()->format('Uv');
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): ApiResponse {
        if ('\SplFileObject' === $dataType) {
            $content = $response->getBody(); // stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ('string' !== $dataType) {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        $rateLimits = CommonUtils::getRateLimits($response->getStatusCode(), $response->getHeaders());

        return new ApiResponse(
            $response->getStatusCode(),
            $response->getHeaders(),
            ObjectSerializer::deserialize($content, $dataType, []),
            $rateLimits
        );
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
