<?php

/**
 * GetMarginBorrowLoanInterestHistoryResponseRowsInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Portfolio Margin REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingPortfolioMargin\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetMarginBorrowLoanInterestHistoryResponseRowsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetMarginBorrowLoanInterestHistoryResponseRowsInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getMarginBorrowLoanInterestHistoryResponse_rows_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'txId' => 'int',
        'interestAccuredTime' => 'int',
        'asset' => 'string',
        'rawAsset' => 'string',
        'principal' => 'string',
        'interest' => 'string',
        'interestRate' => 'string',
        'type' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'txId' => 'int64',
        'interestAccuredTime' => 'int64',
        'asset' => null,
        'rawAsset' => null,
        'principal' => null,
        'interest' => null,
        'interestRate' => null,
        'type' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'txId' => false,
        'interestAccuredTime' => false,
        'asset' => false,
        'rawAsset' => false,
        'principal' => false,
        'interest' => false,
        'interestRate' => false,
        'type' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'txId' => 'txId',
        'interestAccuredTime' => 'interestAccuredTime',
        'asset' => 'asset',
        'rawAsset' => 'rawAsset',
        'principal' => 'principal',
        'interest' => 'interest',
        'interestRate' => 'interestRate',
        'type' => 'type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'txId' => 'setTxId',
        'interestAccuredTime' => 'setInterestAccuredTime',
        'asset' => 'setAsset',
        'rawAsset' => 'setRawAsset',
        'principal' => 'setPrincipal',
        'interest' => 'setInterest',
        'interestRate' => 'setInterestRate',
        'type' => 'setType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'txId' => 'getTxId',
        'interestAccuredTime' => 'getInterestAccuredTime',
        'asset' => 'getAsset',
        'rawAsset' => 'getRawAsset',
        'principal' => 'getPrincipal',
        'interest' => 'getInterest',
        'interestRate' => 'getInterestRate',
        'type' => 'getType',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('txId', $data ?? [], null);
        $this->setIfExists('interestAccuredTime', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('rawAsset', $data ?? [], null);
        $this->setIfExists('principal', $data ?? [], null);
        $this->setIfExists('interest', $data ?? [], null);
        $this->setIfExists('interestRate', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets txId.
     *
     * @return null|int
     */
    public function getTxId()
    {
        return $this->container['txId'];
    }

    /**
     * Sets txId.
     *
     * @param null|int $txId txId
     *
     * @return self
     */
    public function setTxId($txId)
    {
        if (is_null($txId)) {
            throw new \InvalidArgumentException('non-nullable txId cannot be null');
        }
        $this->container['txId'] = $txId;

        return $this;
    }

    /**
     * Gets interestAccuredTime.
     *
     * @return null|int
     */
    public function getInterestAccuredTime()
    {
        return $this->container['interestAccuredTime'];
    }

    /**
     * Sets interestAccuredTime.
     *
     * @param null|int $interestAccuredTime interestAccuredTime
     *
     * @return self
     */
    public function setInterestAccuredTime($interestAccuredTime)
    {
        if (is_null($interestAccuredTime)) {
            throw new \InvalidArgumentException('non-nullable interestAccuredTime cannot be null');
        }
        $this->container['interestAccuredTime'] = $interestAccuredTime;

        return $this;
    }

    /**
     * Gets asset.
     *
     * @return null|string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset.
     *
     * @param null|string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets rawAsset.
     *
     * @return null|string
     */
    public function getRawAsset()
    {
        return $this->container['rawAsset'];
    }

    /**
     * Sets rawAsset.
     *
     * @param null|string $rawAsset rawAsset
     *
     * @return self
     */
    public function setRawAsset($rawAsset)
    {
        if (is_null($rawAsset)) {
            throw new \InvalidArgumentException('non-nullable rawAsset cannot be null');
        }
        $this->container['rawAsset'] = $rawAsset;

        return $this;
    }

    /**
     * Gets principal.
     *
     * @return null|string
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal.
     *
     * @param null|string $principal principal
     *
     * @return self
     */
    public function setPrincipal($principal)
    {
        if (is_null($principal)) {
            throw new \InvalidArgumentException('non-nullable principal cannot be null');
        }
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets interest.
     *
     * @return null|string
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest.
     *
     * @param null|string $interest interest
     *
     * @return self
     */
    public function setInterest($interest)
    {
        if (is_null($interest)) {
            throw new \InvalidArgumentException('non-nullable interest cannot be null');
        }
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets interestRate.
     *
     * @return null|string
     */
    public function getInterestRate()
    {
        return $this->container['interestRate'];
    }

    /**
     * Sets interestRate.
     *
     * @param null|string $interestRate interestRate
     *
     * @return self
     */
    public function setInterestRate($interestRate)
    {
        if (is_null($interestRate)) {
            throw new \InvalidArgumentException('non-nullable interestRate cannot be null');
        }
        $this->container['interestRate'] = $interestRate;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return null|string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param null|string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
