<?php

/**
 * AccountBalanceResponse1Inner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Portfolio Margin REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingPortfolioMargin\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * AccountBalanceResponse1Inner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class AccountBalanceResponse1Inner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'accountBalanceResponse1_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'asset' => 'string',
        'totalWalletBalance' => 'string',
        'crossMarginAsset' => 'string',
        'crossMarginBorrowed' => 'string',
        'crossMarginFree' => 'string',
        'crossMarginInterest' => 'string',
        'crossMarginLocked' => 'string',
        'umWalletBalance' => 'string',
        'umUnrealizedPNL' => 'string',
        'cmWalletBalance' => 'string',
        'cmUnrealizedPNL' => 'string',
        'updateTime' => 'int',
        'negativeBalance' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'asset' => null,
        'totalWalletBalance' => null,
        'crossMarginAsset' => null,
        'crossMarginBorrowed' => null,
        'crossMarginFree' => null,
        'crossMarginInterest' => null,
        'crossMarginLocked' => null,
        'umWalletBalance' => null,
        'umUnrealizedPNL' => null,
        'cmWalletBalance' => null,
        'cmUnrealizedPNL' => null,
        'updateTime' => 'int64',
        'negativeBalance' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'asset' => false,
        'totalWalletBalance' => false,
        'crossMarginAsset' => false,
        'crossMarginBorrowed' => false,
        'crossMarginFree' => false,
        'crossMarginInterest' => false,
        'crossMarginLocked' => false,
        'umWalletBalance' => false,
        'umUnrealizedPNL' => false,
        'cmWalletBalance' => false,
        'cmUnrealizedPNL' => false,
        'updateTime' => false,
        'negativeBalance' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset' => 'asset',
        'totalWalletBalance' => 'totalWalletBalance',
        'crossMarginAsset' => 'crossMarginAsset',
        'crossMarginBorrowed' => 'crossMarginBorrowed',
        'crossMarginFree' => 'crossMarginFree',
        'crossMarginInterest' => 'crossMarginInterest',
        'crossMarginLocked' => 'crossMarginLocked',
        'umWalletBalance' => 'umWalletBalance',
        'umUnrealizedPNL' => 'umUnrealizedPNL',
        'cmWalletBalance' => 'cmWalletBalance',
        'cmUnrealizedPNL' => 'cmUnrealizedPNL',
        'updateTime' => 'updateTime',
        'negativeBalance' => 'negativeBalance',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'asset' => 'setAsset',
        'totalWalletBalance' => 'setTotalWalletBalance',
        'crossMarginAsset' => 'setCrossMarginAsset',
        'crossMarginBorrowed' => 'setCrossMarginBorrowed',
        'crossMarginFree' => 'setCrossMarginFree',
        'crossMarginInterest' => 'setCrossMarginInterest',
        'crossMarginLocked' => 'setCrossMarginLocked',
        'umWalletBalance' => 'setUmWalletBalance',
        'umUnrealizedPNL' => 'setUmUnrealizedPNL',
        'cmWalletBalance' => 'setCmWalletBalance',
        'cmUnrealizedPNL' => 'setCmUnrealizedPNL',
        'updateTime' => 'setUpdateTime',
        'negativeBalance' => 'setNegativeBalance',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'asset' => 'getAsset',
        'totalWalletBalance' => 'getTotalWalletBalance',
        'crossMarginAsset' => 'getCrossMarginAsset',
        'crossMarginBorrowed' => 'getCrossMarginBorrowed',
        'crossMarginFree' => 'getCrossMarginFree',
        'crossMarginInterest' => 'getCrossMarginInterest',
        'crossMarginLocked' => 'getCrossMarginLocked',
        'umWalletBalance' => 'getUmWalletBalance',
        'umUnrealizedPNL' => 'getUmUnrealizedPNL',
        'cmWalletBalance' => 'getCmWalletBalance',
        'cmUnrealizedPNL' => 'getCmUnrealizedPNL',
        'updateTime' => 'getUpdateTime',
        'negativeBalance' => 'getNegativeBalance',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('totalWalletBalance', $data ?? [], null);
        $this->setIfExists('crossMarginAsset', $data ?? [], null);
        $this->setIfExists('crossMarginBorrowed', $data ?? [], null);
        $this->setIfExists('crossMarginFree', $data ?? [], null);
        $this->setIfExists('crossMarginInterest', $data ?? [], null);
        $this->setIfExists('crossMarginLocked', $data ?? [], null);
        $this->setIfExists('umWalletBalance', $data ?? [], null);
        $this->setIfExists('umUnrealizedPNL', $data ?? [], null);
        $this->setIfExists('cmWalletBalance', $data ?? [], null);
        $this->setIfExists('cmUnrealizedPNL', $data ?? [], null);
        $this->setIfExists('updateTime', $data ?? [], null);
        $this->setIfExists('negativeBalance', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets asset.
     *
     * @return null|string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset.
     *
     * @param null|string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets totalWalletBalance.
     *
     * @return null|string
     */
    public function getTotalWalletBalance()
    {
        return $this->container['totalWalletBalance'];
    }

    /**
     * Sets totalWalletBalance.
     *
     * @param null|string $totalWalletBalance totalWalletBalance
     *
     * @return self
     */
    public function setTotalWalletBalance($totalWalletBalance)
    {
        if (is_null($totalWalletBalance)) {
            throw new \InvalidArgumentException('non-nullable totalWalletBalance cannot be null');
        }
        $this->container['totalWalletBalance'] = $totalWalletBalance;

        return $this;
    }

    /**
     * Gets crossMarginAsset.
     *
     * @return null|string
     */
    public function getCrossMarginAsset()
    {
        return $this->container['crossMarginAsset'];
    }

    /**
     * Sets crossMarginAsset.
     *
     * @param null|string $crossMarginAsset crossMarginAsset
     *
     * @return self
     */
    public function setCrossMarginAsset($crossMarginAsset)
    {
        if (is_null($crossMarginAsset)) {
            throw new \InvalidArgumentException('non-nullable crossMarginAsset cannot be null');
        }
        $this->container['crossMarginAsset'] = $crossMarginAsset;

        return $this;
    }

    /**
     * Gets crossMarginBorrowed.
     *
     * @return null|string
     */
    public function getCrossMarginBorrowed()
    {
        return $this->container['crossMarginBorrowed'];
    }

    /**
     * Sets crossMarginBorrowed.
     *
     * @param null|string $crossMarginBorrowed crossMarginBorrowed
     *
     * @return self
     */
    public function setCrossMarginBorrowed($crossMarginBorrowed)
    {
        if (is_null($crossMarginBorrowed)) {
            throw new \InvalidArgumentException('non-nullable crossMarginBorrowed cannot be null');
        }
        $this->container['crossMarginBorrowed'] = $crossMarginBorrowed;

        return $this;
    }

    /**
     * Gets crossMarginFree.
     *
     * @return null|string
     */
    public function getCrossMarginFree()
    {
        return $this->container['crossMarginFree'];
    }

    /**
     * Sets crossMarginFree.
     *
     * @param null|string $crossMarginFree crossMarginFree
     *
     * @return self
     */
    public function setCrossMarginFree($crossMarginFree)
    {
        if (is_null($crossMarginFree)) {
            throw new \InvalidArgumentException('non-nullable crossMarginFree cannot be null');
        }
        $this->container['crossMarginFree'] = $crossMarginFree;

        return $this;
    }

    /**
     * Gets crossMarginInterest.
     *
     * @return null|string
     */
    public function getCrossMarginInterest()
    {
        return $this->container['crossMarginInterest'];
    }

    /**
     * Sets crossMarginInterest.
     *
     * @param null|string $crossMarginInterest crossMarginInterest
     *
     * @return self
     */
    public function setCrossMarginInterest($crossMarginInterest)
    {
        if (is_null($crossMarginInterest)) {
            throw new \InvalidArgumentException('non-nullable crossMarginInterest cannot be null');
        }
        $this->container['crossMarginInterest'] = $crossMarginInterest;

        return $this;
    }

    /**
     * Gets crossMarginLocked.
     *
     * @return null|string
     */
    public function getCrossMarginLocked()
    {
        return $this->container['crossMarginLocked'];
    }

    /**
     * Sets crossMarginLocked.
     *
     * @param null|string $crossMarginLocked crossMarginLocked
     *
     * @return self
     */
    public function setCrossMarginLocked($crossMarginLocked)
    {
        if (is_null($crossMarginLocked)) {
            throw new \InvalidArgumentException('non-nullable crossMarginLocked cannot be null');
        }
        $this->container['crossMarginLocked'] = $crossMarginLocked;

        return $this;
    }

    /**
     * Gets umWalletBalance.
     *
     * @return null|string
     */
    public function getUmWalletBalance()
    {
        return $this->container['umWalletBalance'];
    }

    /**
     * Sets umWalletBalance.
     *
     * @param null|string $umWalletBalance umWalletBalance
     *
     * @return self
     */
    public function setUmWalletBalance($umWalletBalance)
    {
        if (is_null($umWalletBalance)) {
            throw new \InvalidArgumentException('non-nullable umWalletBalance cannot be null');
        }
        $this->container['umWalletBalance'] = $umWalletBalance;

        return $this;
    }

    /**
     * Gets umUnrealizedPNL.
     *
     * @return null|string
     */
    public function getUmUnrealizedPNL()
    {
        return $this->container['umUnrealizedPNL'];
    }

    /**
     * Sets umUnrealizedPNL.
     *
     * @param null|string $umUnrealizedPNL umUnrealizedPNL
     *
     * @return self
     */
    public function setUmUnrealizedPNL($umUnrealizedPNL)
    {
        if (is_null($umUnrealizedPNL)) {
            throw new \InvalidArgumentException('non-nullable umUnrealizedPNL cannot be null');
        }
        $this->container['umUnrealizedPNL'] = $umUnrealizedPNL;

        return $this;
    }

    /**
     * Gets cmWalletBalance.
     *
     * @return null|string
     */
    public function getCmWalletBalance()
    {
        return $this->container['cmWalletBalance'];
    }

    /**
     * Sets cmWalletBalance.
     *
     * @param null|string $cmWalletBalance cmWalletBalance
     *
     * @return self
     */
    public function setCmWalletBalance($cmWalletBalance)
    {
        if (is_null($cmWalletBalance)) {
            throw new \InvalidArgumentException('non-nullable cmWalletBalance cannot be null');
        }
        $this->container['cmWalletBalance'] = $cmWalletBalance;

        return $this;
    }

    /**
     * Gets cmUnrealizedPNL.
     *
     * @return null|string
     */
    public function getCmUnrealizedPNL()
    {
        return $this->container['cmUnrealizedPNL'];
    }

    /**
     * Sets cmUnrealizedPNL.
     *
     * @param null|string $cmUnrealizedPNL cmUnrealizedPNL
     *
     * @return self
     */
    public function setCmUnrealizedPNL($cmUnrealizedPNL)
    {
        if (is_null($cmUnrealizedPNL)) {
            throw new \InvalidArgumentException('non-nullable cmUnrealizedPNL cannot be null');
        }
        $this->container['cmUnrealizedPNL'] = $cmUnrealizedPNL;

        return $this;
    }

    /**
     * Gets updateTime.
     *
     * @return null|int
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime.
     *
     * @param null|int $updateTime updateTime
     *
     * @return self
     */
    public function setUpdateTime($updateTime)
    {
        if (is_null($updateTime)) {
            throw new \InvalidArgumentException('non-nullable updateTime cannot be null');
        }
        $this->container['updateTime'] = $updateTime;

        return $this;
    }

    /**
     * Gets negativeBalance.
     *
     * @return null|string
     */
    public function getNegativeBalance()
    {
        return $this->container['negativeBalance'];
    }

    /**
     * Sets negativeBalance.
     *
     * @param null|string $negativeBalance negativeBalance
     *
     * @return self
     */
    public function setNegativeBalance($negativeBalance)
    {
        if (is_null($negativeBalance)) {
            throw new \InvalidArgumentException('non-nullable negativeBalance cannot be null');
        }
        $this->container['negativeBalance'] = $negativeBalance;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
