<?php

/**
 * GetVIPLoanOngoingOrdersResponseRowsInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance VIP Loan REST API.
 *
 * OpenAPI Specification for the Binance VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\VipLoan\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetVIPLoanOngoingOrdersResponseRowsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetVIPLoanOngoingOrdersResponseRowsInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getVIPLoanOngoingOrdersResponse_rows_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'orderId' => 'int',
        'loanCoin' => 'string',
        'totalDebt' => 'string',
        'residualInterest' => 'string',
        'collateralAccountId' => 'string',
        'collateralCoin' => 'string',
        'totalCollateralValueAfterHaircut' => 'string',
        'lockedCollateralValue' => 'string',
        'currentLTV' => 'string',
        'expirationTime' => 'int',
        'loanDate' => 'string',
        'loanTerm' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'orderId' => 'int64',
        'loanCoin' => null,
        'totalDebt' => null,
        'residualInterest' => null,
        'collateralAccountId' => null,
        'collateralCoin' => null,
        'totalCollateralValueAfterHaircut' => null,
        'lockedCollateralValue' => null,
        'currentLTV' => null,
        'expirationTime' => 'int64',
        'loanDate' => null,
        'loanTerm' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'orderId' => false,
        'loanCoin' => false,
        'totalDebt' => false,
        'residualInterest' => false,
        'collateralAccountId' => false,
        'collateralCoin' => false,
        'totalCollateralValueAfterHaircut' => false,
        'lockedCollateralValue' => false,
        'currentLTV' => false,
        'expirationTime' => false,
        'loanDate' => false,
        'loanTerm' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderId' => 'orderId',
        'loanCoin' => 'loanCoin',
        'totalDebt' => 'totalDebt',
        'residualInterest' => 'residualInterest',
        'collateralAccountId' => 'collateralAccountId',
        'collateralCoin' => 'collateralCoin',
        'totalCollateralValueAfterHaircut' => 'totalCollateralValueAfterHaircut',
        'lockedCollateralValue' => 'lockedCollateralValue',
        'currentLTV' => 'currentLTV',
        'expirationTime' => 'expirationTime',
        'loanDate' => 'loanDate',
        'loanTerm' => 'loanTerm',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'orderId' => 'setOrderId',
        'loanCoin' => 'setLoanCoin',
        'totalDebt' => 'setTotalDebt',
        'residualInterest' => 'setResidualInterest',
        'collateralAccountId' => 'setCollateralAccountId',
        'collateralCoin' => 'setCollateralCoin',
        'totalCollateralValueAfterHaircut' => 'setTotalCollateralValueAfterHaircut',
        'lockedCollateralValue' => 'setLockedCollateralValue',
        'currentLTV' => 'setCurrentLTV',
        'expirationTime' => 'setExpirationTime',
        'loanDate' => 'setLoanDate',
        'loanTerm' => 'setLoanTerm',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'orderId' => 'getOrderId',
        'loanCoin' => 'getLoanCoin',
        'totalDebt' => 'getTotalDebt',
        'residualInterest' => 'getResidualInterest',
        'collateralAccountId' => 'getCollateralAccountId',
        'collateralCoin' => 'getCollateralCoin',
        'totalCollateralValueAfterHaircut' => 'getTotalCollateralValueAfterHaircut',
        'lockedCollateralValue' => 'getLockedCollateralValue',
        'currentLTV' => 'getCurrentLTV',
        'expirationTime' => 'getExpirationTime',
        'loanDate' => 'getLoanDate',
        'loanTerm' => 'getLoanTerm',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('loanCoin', $data ?? [], null);
        $this->setIfExists('totalDebt', $data ?? [], null);
        $this->setIfExists('residualInterest', $data ?? [], null);
        $this->setIfExists('collateralAccountId', $data ?? [], null);
        $this->setIfExists('collateralCoin', $data ?? [], null);
        $this->setIfExists('totalCollateralValueAfterHaircut', $data ?? [], null);
        $this->setIfExists('lockedCollateralValue', $data ?? [], null);
        $this->setIfExists('currentLTV', $data ?? [], null);
        $this->setIfExists('expirationTime', $data ?? [], null);
        $this->setIfExists('loanDate', $data ?? [], null);
        $this->setIfExists('loanTerm', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets orderId.
     *
     * @return null|int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId.
     *
     * @param null|int $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets loanCoin.
     *
     * @return null|string
     */
    public function getLoanCoin()
    {
        return $this->container['loanCoin'];
    }

    /**
     * Sets loanCoin.
     *
     * @param null|string $loanCoin loanCoin
     *
     * @return self
     */
    public function setLoanCoin($loanCoin)
    {
        if (is_null($loanCoin)) {
            throw new \InvalidArgumentException('non-nullable loanCoin cannot be null');
        }
        $this->container['loanCoin'] = $loanCoin;

        return $this;
    }

    /**
     * Gets totalDebt.
     *
     * @return null|string
     */
    public function getTotalDebt()
    {
        return $this->container['totalDebt'];
    }

    /**
     * Sets totalDebt.
     *
     * @param null|string $totalDebt totalDebt
     *
     * @return self
     */
    public function setTotalDebt($totalDebt)
    {
        if (is_null($totalDebt)) {
            throw new \InvalidArgumentException('non-nullable totalDebt cannot be null');
        }
        $this->container['totalDebt'] = $totalDebt;

        return $this;
    }

    /**
     * Gets residualInterest.
     *
     * @return null|string
     */
    public function getResidualInterest()
    {
        return $this->container['residualInterest'];
    }

    /**
     * Sets residualInterest.
     *
     * @param null|string $residualInterest residualInterest
     *
     * @return self
     */
    public function setResidualInterest($residualInterest)
    {
        if (is_null($residualInterest)) {
            throw new \InvalidArgumentException('non-nullable residualInterest cannot be null');
        }
        $this->container['residualInterest'] = $residualInterest;

        return $this;
    }

    /**
     * Gets collateralAccountId.
     *
     * @return null|string
     */
    public function getCollateralAccountId()
    {
        return $this->container['collateralAccountId'];
    }

    /**
     * Sets collateralAccountId.
     *
     * @param null|string $collateralAccountId collateralAccountId
     *
     * @return self
     */
    public function setCollateralAccountId($collateralAccountId)
    {
        if (is_null($collateralAccountId)) {
            throw new \InvalidArgumentException('non-nullable collateralAccountId cannot be null');
        }
        $this->container['collateralAccountId'] = $collateralAccountId;

        return $this;
    }

    /**
     * Gets collateralCoin.
     *
     * @return null|string
     */
    public function getCollateralCoin()
    {
        return $this->container['collateralCoin'];
    }

    /**
     * Sets collateralCoin.
     *
     * @param null|string $collateralCoin collateralCoin
     *
     * @return self
     */
    public function setCollateralCoin($collateralCoin)
    {
        if (is_null($collateralCoin)) {
            throw new \InvalidArgumentException('non-nullable collateralCoin cannot be null');
        }
        $this->container['collateralCoin'] = $collateralCoin;

        return $this;
    }

    /**
     * Gets totalCollateralValueAfterHaircut.
     *
     * @return null|string
     */
    public function getTotalCollateralValueAfterHaircut()
    {
        return $this->container['totalCollateralValueAfterHaircut'];
    }

    /**
     * Sets totalCollateralValueAfterHaircut.
     *
     * @param null|string $totalCollateralValueAfterHaircut totalCollateralValueAfterHaircut
     *
     * @return self
     */
    public function setTotalCollateralValueAfterHaircut($totalCollateralValueAfterHaircut)
    {
        if (is_null($totalCollateralValueAfterHaircut)) {
            throw new \InvalidArgumentException('non-nullable totalCollateralValueAfterHaircut cannot be null');
        }
        $this->container['totalCollateralValueAfterHaircut'] = $totalCollateralValueAfterHaircut;

        return $this;
    }

    /**
     * Gets lockedCollateralValue.
     *
     * @return null|string
     */
    public function getLockedCollateralValue()
    {
        return $this->container['lockedCollateralValue'];
    }

    /**
     * Sets lockedCollateralValue.
     *
     * @param null|string $lockedCollateralValue lockedCollateralValue
     *
     * @return self
     */
    public function setLockedCollateralValue($lockedCollateralValue)
    {
        if (is_null($lockedCollateralValue)) {
            throw new \InvalidArgumentException('non-nullable lockedCollateralValue cannot be null');
        }
        $this->container['lockedCollateralValue'] = $lockedCollateralValue;

        return $this;
    }

    /**
     * Gets currentLTV.
     *
     * @return null|string
     */
    public function getCurrentLTV()
    {
        return $this->container['currentLTV'];
    }

    /**
     * Sets currentLTV.
     *
     * @param null|string $currentLTV currentLTV
     *
     * @return self
     */
    public function setCurrentLTV($currentLTV)
    {
        if (is_null($currentLTV)) {
            throw new \InvalidArgumentException('non-nullable currentLTV cannot be null');
        }
        $this->container['currentLTV'] = $currentLTV;

        return $this;
    }

    /**
     * Gets expirationTime.
     *
     * @return null|int
     */
    public function getExpirationTime()
    {
        return $this->container['expirationTime'];
    }

    /**
     * Sets expirationTime.
     *
     * @param null|int $expirationTime expirationTime
     *
     * @return self
     */
    public function setExpirationTime($expirationTime)
    {
        if (is_null($expirationTime)) {
            throw new \InvalidArgumentException('non-nullable expirationTime cannot be null');
        }
        $this->container['expirationTime'] = $expirationTime;

        return $this;
    }

    /**
     * Gets loanDate.
     *
     * @return null|string
     */
    public function getLoanDate()
    {
        return $this->container['loanDate'];
    }

    /**
     * Sets loanDate.
     *
     * @param null|string $loanDate loanDate
     *
     * @return self
     */
    public function setLoanDate($loanDate)
    {
        if (is_null($loanDate)) {
            throw new \InvalidArgumentException('non-nullable loanDate cannot be null');
        }
        $this->container['loanDate'] = $loanDate;

        return $this;
    }

    /**
     * Gets loanTerm.
     *
     * @return null|string
     */
    public function getLoanTerm()
    {
        return $this->container['loanTerm'];
    }

    /**
     * Sets loanTerm.
     *
     * @param null|string $loanTerm loanTerm
     *
     * @return self
     */
    public function setLoanTerm($loanTerm)
    {
        if (is_null($loanTerm)) {
            throw new \InvalidArgumentException('non-nullable loanTerm cannot be null');
        }
        $this->container['loanTerm'] = $loanTerm;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
