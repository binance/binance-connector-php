<?php

/**
 * AccountInformationV2ResponsePositionsInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading USDS Futures REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingUsdsFutures\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * AccountInformationV2ResponsePositionsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class AccountInformationV2ResponsePositionsInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'accountInformationV2Response_positions_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'initialMargin' => 'string',
        'maintMargin' => 'string',
        'unrealizedProfit' => 'string',
        'positionInitialMargin' => 'string',
        'openOrderInitialMargin' => 'string',
        'leverage' => 'string',
        'isolated' => 'bool',
        'entryPrice' => 'string',
        'maxNotional' => 'string',
        'bidNotional' => 'string',
        'askNotional' => 'string',
        'positionSide' => 'string',
        'positionAmt' => 'string',
        'updateTime' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'symbol' => null,
        'initialMargin' => null,
        'maintMargin' => null,
        'unrealizedProfit' => null,
        'positionInitialMargin' => null,
        'openOrderInitialMargin' => null,
        'leverage' => null,
        'isolated' => null,
        'entryPrice' => null,
        'maxNotional' => null,
        'bidNotional' => null,
        'askNotional' => null,
        'positionSide' => null,
        'positionAmt' => null,
        'updateTime' => 'int64',
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'symbol' => false,
        'initialMargin' => false,
        'maintMargin' => false,
        'unrealizedProfit' => false,
        'positionInitialMargin' => false,
        'openOrderInitialMargin' => false,
        'leverage' => false,
        'isolated' => false,
        'entryPrice' => false,
        'maxNotional' => false,
        'bidNotional' => false,
        'askNotional' => false,
        'positionSide' => false,
        'positionAmt' => false,
        'updateTime' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'initialMargin' => 'initialMargin',
        'maintMargin' => 'maintMargin',
        'unrealizedProfit' => 'unrealizedProfit',
        'positionInitialMargin' => 'positionInitialMargin',
        'openOrderInitialMargin' => 'openOrderInitialMargin',
        'leverage' => 'leverage',
        'isolated' => 'isolated',
        'entryPrice' => 'entryPrice',
        'maxNotional' => 'maxNotional',
        'bidNotional' => 'bidNotional',
        'askNotional' => 'askNotional',
        'positionSide' => 'positionSide',
        'positionAmt' => 'positionAmt',
        'updateTime' => 'updateTime',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'initialMargin' => 'setInitialMargin',
        'maintMargin' => 'setMaintMargin',
        'unrealizedProfit' => 'setUnrealizedProfit',
        'positionInitialMargin' => 'setPositionInitialMargin',
        'openOrderInitialMargin' => 'setOpenOrderInitialMargin',
        'leverage' => 'setLeverage',
        'isolated' => 'setIsolated',
        'entryPrice' => 'setEntryPrice',
        'maxNotional' => 'setMaxNotional',
        'bidNotional' => 'setBidNotional',
        'askNotional' => 'setAskNotional',
        'positionSide' => 'setPositionSide',
        'positionAmt' => 'setPositionAmt',
        'updateTime' => 'setUpdateTime',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'initialMargin' => 'getInitialMargin',
        'maintMargin' => 'getMaintMargin',
        'unrealizedProfit' => 'getUnrealizedProfit',
        'positionInitialMargin' => 'getPositionInitialMargin',
        'openOrderInitialMargin' => 'getOpenOrderInitialMargin',
        'leverage' => 'getLeverage',
        'isolated' => 'getIsolated',
        'entryPrice' => 'getEntryPrice',
        'maxNotional' => 'getMaxNotional',
        'bidNotional' => 'getBidNotional',
        'askNotional' => 'getAskNotional',
        'positionSide' => 'getPositionSide',
        'positionAmt' => 'getPositionAmt',
        'updateTime' => 'getUpdateTime',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('initialMargin', $data ?? [], null);
        $this->setIfExists('maintMargin', $data ?? [], null);
        $this->setIfExists('unrealizedProfit', $data ?? [], null);
        $this->setIfExists('positionInitialMargin', $data ?? [], null);
        $this->setIfExists('openOrderInitialMargin', $data ?? [], null);
        $this->setIfExists('leverage', $data ?? [], null);
        $this->setIfExists('isolated', $data ?? [], null);
        $this->setIfExists('entryPrice', $data ?? [], null);
        $this->setIfExists('maxNotional', $data ?? [], null);
        $this->setIfExists('bidNotional', $data ?? [], null);
        $this->setIfExists('askNotional', $data ?? [], null);
        $this->setIfExists('positionSide', $data ?? [], null);
        $this->setIfExists('positionAmt', $data ?? [], null);
        $this->setIfExists('updateTime', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets initialMargin.
     *
     * @return null|string
     */
    public function getInitialMargin()
    {
        return $this->container['initialMargin'];
    }

    /**
     * Sets initialMargin.
     *
     * @param null|string $initialMargin initialMargin
     *
     * @return self
     */
    public function setInitialMargin($initialMargin)
    {
        if (is_null($initialMargin)) {
            throw new \InvalidArgumentException('non-nullable initialMargin cannot be null');
        }
        $this->container['initialMargin'] = $initialMargin;

        return $this;
    }

    /**
     * Gets maintMargin.
     *
     * @return null|string
     */
    public function getMaintMargin()
    {
        return $this->container['maintMargin'];
    }

    /**
     * Sets maintMargin.
     *
     * @param null|string $maintMargin maintMargin
     *
     * @return self
     */
    public function setMaintMargin($maintMargin)
    {
        if (is_null($maintMargin)) {
            throw new \InvalidArgumentException('non-nullable maintMargin cannot be null');
        }
        $this->container['maintMargin'] = $maintMargin;

        return $this;
    }

    /**
     * Gets unrealizedProfit.
     *
     * @return null|string
     */
    public function getUnrealizedProfit()
    {
        return $this->container['unrealizedProfit'];
    }

    /**
     * Sets unrealizedProfit.
     *
     * @param null|string $unrealizedProfit unrealizedProfit
     *
     * @return self
     */
    public function setUnrealizedProfit($unrealizedProfit)
    {
        if (is_null($unrealizedProfit)) {
            throw new \InvalidArgumentException('non-nullable unrealizedProfit cannot be null');
        }
        $this->container['unrealizedProfit'] = $unrealizedProfit;

        return $this;
    }

    /**
     * Gets positionInitialMargin.
     *
     * @return null|string
     */
    public function getPositionInitialMargin()
    {
        return $this->container['positionInitialMargin'];
    }

    /**
     * Sets positionInitialMargin.
     *
     * @param null|string $positionInitialMargin positionInitialMargin
     *
     * @return self
     */
    public function setPositionInitialMargin($positionInitialMargin)
    {
        if (is_null($positionInitialMargin)) {
            throw new \InvalidArgumentException('non-nullable positionInitialMargin cannot be null');
        }
        $this->container['positionInitialMargin'] = $positionInitialMargin;

        return $this;
    }

    /**
     * Gets openOrderInitialMargin.
     *
     * @return null|string
     */
    public function getOpenOrderInitialMargin()
    {
        return $this->container['openOrderInitialMargin'];
    }

    /**
     * Sets openOrderInitialMargin.
     *
     * @param null|string $openOrderInitialMargin openOrderInitialMargin
     *
     * @return self
     */
    public function setOpenOrderInitialMargin($openOrderInitialMargin)
    {
        if (is_null($openOrderInitialMargin)) {
            throw new \InvalidArgumentException('non-nullable openOrderInitialMargin cannot be null');
        }
        $this->container['openOrderInitialMargin'] = $openOrderInitialMargin;

        return $this;
    }

    /**
     * Gets leverage.
     *
     * @return null|string
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage.
     *
     * @param null|string $leverage leverage
     *
     * @return self
     */
    public function setLeverage($leverage)
    {
        if (is_null($leverage)) {
            throw new \InvalidArgumentException('non-nullable leverage cannot be null');
        }
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets isolated.
     *
     * @return null|bool
     */
    public function getIsolated()
    {
        return $this->container['isolated'];
    }

    /**
     * Sets isolated.
     *
     * @param null|bool $isolated isolated
     *
     * @return self
     */
    public function setIsolated($isolated)
    {
        if (is_null($isolated)) {
            throw new \InvalidArgumentException('non-nullable isolated cannot be null');
        }
        $this->container['isolated'] = $isolated;

        return $this;
    }

    /**
     * Gets entryPrice.
     *
     * @return null|string
     */
    public function getEntryPrice()
    {
        return $this->container['entryPrice'];
    }

    /**
     * Sets entryPrice.
     *
     * @param null|string $entryPrice entryPrice
     *
     * @return self
     */
    public function setEntryPrice($entryPrice)
    {
        if (is_null($entryPrice)) {
            throw new \InvalidArgumentException('non-nullable entryPrice cannot be null');
        }
        $this->container['entryPrice'] = $entryPrice;

        return $this;
    }

    /**
     * Gets maxNotional.
     *
     * @return null|string
     */
    public function getMaxNotional()
    {
        return $this->container['maxNotional'];
    }

    /**
     * Sets maxNotional.
     *
     * @param null|string $maxNotional maxNotional
     *
     * @return self
     */
    public function setMaxNotional($maxNotional)
    {
        if (is_null($maxNotional)) {
            throw new \InvalidArgumentException('non-nullable maxNotional cannot be null');
        }
        $this->container['maxNotional'] = $maxNotional;

        return $this;
    }

    /**
     * Gets bidNotional.
     *
     * @return null|string
     */
    public function getBidNotional()
    {
        return $this->container['bidNotional'];
    }

    /**
     * Sets bidNotional.
     *
     * @param null|string $bidNotional bidNotional
     *
     * @return self
     */
    public function setBidNotional($bidNotional)
    {
        if (is_null($bidNotional)) {
            throw new \InvalidArgumentException('non-nullable bidNotional cannot be null');
        }
        $this->container['bidNotional'] = $bidNotional;

        return $this;
    }

    /**
     * Gets askNotional.
     *
     * @return null|string
     */
    public function getAskNotional()
    {
        return $this->container['askNotional'];
    }

    /**
     * Sets askNotional.
     *
     * @param null|string $askNotional askNotional
     *
     * @return self
     */
    public function setAskNotional($askNotional)
    {
        if (is_null($askNotional)) {
            throw new \InvalidArgumentException('non-nullable askNotional cannot be null');
        }
        $this->container['askNotional'] = $askNotional;

        return $this;
    }

    /**
     * Gets positionSide.
     *
     * @return null|string
     */
    public function getPositionSide()
    {
        return $this->container['positionSide'];
    }

    /**
     * Sets positionSide.
     *
     * @param null|string $positionSide positionSide
     *
     * @return self
     */
    public function setPositionSide($positionSide)
    {
        if (is_null($positionSide)) {
            throw new \InvalidArgumentException('non-nullable positionSide cannot be null');
        }
        $this->container['positionSide'] = $positionSide;

        return $this;
    }

    /**
     * Gets positionAmt.
     *
     * @return null|string
     */
    public function getPositionAmt()
    {
        return $this->container['positionAmt'];
    }

    /**
     * Sets positionAmt.
     *
     * @param null|string $positionAmt positionAmt
     *
     * @return self
     */
    public function setPositionAmt($positionAmt)
    {
        if (is_null($positionAmt)) {
            throw new \InvalidArgumentException('non-nullable positionAmt cannot be null');
        }
        $this->container['positionAmt'] = $positionAmt;

        return $this;
    }

    /**
     * Gets updateTime.
     *
     * @return null|int
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime.
     *
     * @param null|int $updateTime updateTime
     *
     * @return self
     */
    public function setUpdateTime($updateTime)
    {
        if (is_null($updateTime)) {
            throw new \InvalidArgumentException('non-nullable updateTime cannot be null');
        }
        $this->container['updateTime'] = $updateTime;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
