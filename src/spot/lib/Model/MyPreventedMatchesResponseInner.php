<?php

/**
 * MyPreventedMatchesResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Spot REST API.
 *
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Spot\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * MyPreventedMatchesResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class MyPreventedMatchesResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'myPreventedMatchesResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'preventedMatchId' => 'int',
        'takerOrderId' => 'int',
        'makerSymbol' => 'string',
        'makerOrderId' => 'int',
        'tradeGroupId' => 'int',
        'selfTradePreventionMode' => 'string',
        'price' => 'string',
        'makerPreventedQuantity' => 'string',
        'transactTime' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'symbol' => null,
        'preventedMatchId' => 'int64',
        'takerOrderId' => 'int64',
        'makerSymbol' => null,
        'makerOrderId' => 'int64',
        'tradeGroupId' => 'int64',
        'selfTradePreventionMode' => null,
        'price' => null,
        'makerPreventedQuantity' => null,
        'transactTime' => 'int64',
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'symbol' => false,
        'preventedMatchId' => false,
        'takerOrderId' => false,
        'makerSymbol' => false,
        'makerOrderId' => false,
        'tradeGroupId' => false,
        'selfTradePreventionMode' => false,
        'price' => false,
        'makerPreventedQuantity' => false,
        'transactTime' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'preventedMatchId' => 'preventedMatchId',
        'takerOrderId' => 'takerOrderId',
        'makerSymbol' => 'makerSymbol',
        'makerOrderId' => 'makerOrderId',
        'tradeGroupId' => 'tradeGroupId',
        'selfTradePreventionMode' => 'selfTradePreventionMode',
        'price' => 'price',
        'makerPreventedQuantity' => 'makerPreventedQuantity',
        'transactTime' => 'transactTime',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'preventedMatchId' => 'setPreventedMatchId',
        'takerOrderId' => 'setTakerOrderId',
        'makerSymbol' => 'setMakerSymbol',
        'makerOrderId' => 'setMakerOrderId',
        'tradeGroupId' => 'setTradeGroupId',
        'selfTradePreventionMode' => 'setSelfTradePreventionMode',
        'price' => 'setPrice',
        'makerPreventedQuantity' => 'setMakerPreventedQuantity',
        'transactTime' => 'setTransactTime',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'preventedMatchId' => 'getPreventedMatchId',
        'takerOrderId' => 'getTakerOrderId',
        'makerSymbol' => 'getMakerSymbol',
        'makerOrderId' => 'getMakerOrderId',
        'tradeGroupId' => 'getTradeGroupId',
        'selfTradePreventionMode' => 'getSelfTradePreventionMode',
        'price' => 'getPrice',
        'makerPreventedQuantity' => 'getMakerPreventedQuantity',
        'transactTime' => 'getTransactTime',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('preventedMatchId', $data ?? [], null);
        $this->setIfExists('takerOrderId', $data ?? [], null);
        $this->setIfExists('makerSymbol', $data ?? [], null);
        $this->setIfExists('makerOrderId', $data ?? [], null);
        $this->setIfExists('tradeGroupId', $data ?? [], null);
        $this->setIfExists('selfTradePreventionMode', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('makerPreventedQuantity', $data ?? [], null);
        $this->setIfExists('transactTime', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets preventedMatchId.
     *
     * @return null|int
     */
    public function getPreventedMatchId()
    {
        return $this->container['preventedMatchId'];
    }

    /**
     * Sets preventedMatchId.
     *
     * @param null|int $preventedMatchId preventedMatchId
     *
     * @return self
     */
    public function setPreventedMatchId($preventedMatchId)
    {
        if (is_null($preventedMatchId)) {
            throw new \InvalidArgumentException('non-nullable preventedMatchId cannot be null');
        }
        $this->container['preventedMatchId'] = $preventedMatchId;

        return $this;
    }

    /**
     * Gets takerOrderId.
     *
     * @return null|int
     */
    public function getTakerOrderId()
    {
        return $this->container['takerOrderId'];
    }

    /**
     * Sets takerOrderId.
     *
     * @param null|int $takerOrderId takerOrderId
     *
     * @return self
     */
    public function setTakerOrderId($takerOrderId)
    {
        if (is_null($takerOrderId)) {
            throw new \InvalidArgumentException('non-nullable takerOrderId cannot be null');
        }
        $this->container['takerOrderId'] = $takerOrderId;

        return $this;
    }

    /**
     * Gets makerSymbol.
     *
     * @return null|string
     */
    public function getMakerSymbol()
    {
        return $this->container['makerSymbol'];
    }

    /**
     * Sets makerSymbol.
     *
     * @param null|string $makerSymbol makerSymbol
     *
     * @return self
     */
    public function setMakerSymbol($makerSymbol)
    {
        if (is_null($makerSymbol)) {
            throw new \InvalidArgumentException('non-nullable makerSymbol cannot be null');
        }
        $this->container['makerSymbol'] = $makerSymbol;

        return $this;
    }

    /**
     * Gets makerOrderId.
     *
     * @return null|int
     */
    public function getMakerOrderId()
    {
        return $this->container['makerOrderId'];
    }

    /**
     * Sets makerOrderId.
     *
     * @param null|int $makerOrderId makerOrderId
     *
     * @return self
     */
    public function setMakerOrderId($makerOrderId)
    {
        if (is_null($makerOrderId)) {
            throw new \InvalidArgumentException('non-nullable makerOrderId cannot be null');
        }
        $this->container['makerOrderId'] = $makerOrderId;

        return $this;
    }

    /**
     * Gets tradeGroupId.
     *
     * @return null|int
     */
    public function getTradeGroupId()
    {
        return $this->container['tradeGroupId'];
    }

    /**
     * Sets tradeGroupId.
     *
     * @param null|int $tradeGroupId tradeGroupId
     *
     * @return self
     */
    public function setTradeGroupId($tradeGroupId)
    {
        if (is_null($tradeGroupId)) {
            throw new \InvalidArgumentException('non-nullable tradeGroupId cannot be null');
        }
        $this->container['tradeGroupId'] = $tradeGroupId;

        return $this;
    }

    /**
     * Gets selfTradePreventionMode.
     *
     * @return null|string
     */
    public function getSelfTradePreventionMode()
    {
        return $this->container['selfTradePreventionMode'];
    }

    /**
     * Sets selfTradePreventionMode.
     *
     * @param null|string $selfTradePreventionMode selfTradePreventionMode
     *
     * @return self
     */
    public function setSelfTradePreventionMode($selfTradePreventionMode)
    {
        if (is_null($selfTradePreventionMode)) {
            throw new \InvalidArgumentException('non-nullable selfTradePreventionMode cannot be null');
        }
        $this->container['selfTradePreventionMode'] = $selfTradePreventionMode;

        return $this;
    }

    /**
     * Gets price.
     *
     * @return null|string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price.
     *
     * @param null|string $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets makerPreventedQuantity.
     *
     * @return null|string
     */
    public function getMakerPreventedQuantity()
    {
        return $this->container['makerPreventedQuantity'];
    }

    /**
     * Sets makerPreventedQuantity.
     *
     * @param null|string $makerPreventedQuantity makerPreventedQuantity
     *
     * @return self
     */
    public function setMakerPreventedQuantity($makerPreventedQuantity)
    {
        if (is_null($makerPreventedQuantity)) {
            throw new \InvalidArgumentException('non-nullable makerPreventedQuantity cannot be null');
        }
        $this->container['makerPreventedQuantity'] = $makerPreventedQuantity;

        return $this;
    }

    /**
     * Gets transactTime.
     *
     * @return null|int
     */
    public function getTransactTime()
    {
        return $this->container['transactTime'];
    }

    /**
     * Sets transactTime.
     *
     * @param null|int $transactTime transactTime
     *
     * @return self
     */
    public function setTransactTime($transactTime)
    {
        if (is_null($transactTime)) {
            throw new \InvalidArgumentException('non-nullable transactTime cannot be null');
        }
        $this->container['transactTime'] = $transactTime;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
