<?php

/**
 * FuturesAccountBalanceResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading COIN Futures REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingCoinFutures\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * FuturesAccountBalanceResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class FuturesAccountBalanceResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'futuresAccountBalanceResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'accountAlias' => 'string',
        'asset' => 'string',
        'balance' => 'string',
        'withdrawAvailable' => 'string',
        'crossWalletBalance' => 'string',
        'crossUnPnl' => 'string',
        'availableBalance' => 'string',
        'updateTime' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'accountAlias' => null,
        'asset' => null,
        'balance' => null,
        'withdrawAvailable' => null,
        'crossWalletBalance' => null,
        'crossUnPnl' => null,
        'availableBalance' => null,
        'updateTime' => 'int64',
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'accountAlias' => false,
        'asset' => false,
        'balance' => false,
        'withdrawAvailable' => false,
        'crossWalletBalance' => false,
        'crossUnPnl' => false,
        'availableBalance' => false,
        'updateTime' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountAlias' => 'accountAlias',
        'asset' => 'asset',
        'balance' => 'balance',
        'withdrawAvailable' => 'withdrawAvailable',
        'crossWalletBalance' => 'crossWalletBalance',
        'crossUnPnl' => 'crossUnPnl',
        'availableBalance' => 'availableBalance',
        'updateTime' => 'updateTime',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'accountAlias' => 'setAccountAlias',
        'asset' => 'setAsset',
        'balance' => 'setBalance',
        'withdrawAvailable' => 'setWithdrawAvailable',
        'crossWalletBalance' => 'setCrossWalletBalance',
        'crossUnPnl' => 'setCrossUnPnl',
        'availableBalance' => 'setAvailableBalance',
        'updateTime' => 'setUpdateTime',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'accountAlias' => 'getAccountAlias',
        'asset' => 'getAsset',
        'balance' => 'getBalance',
        'withdrawAvailable' => 'getWithdrawAvailable',
        'crossWalletBalance' => 'getCrossWalletBalance',
        'crossUnPnl' => 'getCrossUnPnl',
        'availableBalance' => 'getAvailableBalance',
        'updateTime' => 'getUpdateTime',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accountAlias', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('withdrawAvailable', $data ?? [], null);
        $this->setIfExists('crossWalletBalance', $data ?? [], null);
        $this->setIfExists('crossUnPnl', $data ?? [], null);
        $this->setIfExists('availableBalance', $data ?? [], null);
        $this->setIfExists('updateTime', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets accountAlias.
     *
     * @return null|string
     */
    public function getAccountAlias()
    {
        return $this->container['accountAlias'];
    }

    /**
     * Sets accountAlias.
     *
     * @param null|string $accountAlias accountAlias
     *
     * @return self
     */
    public function setAccountAlias($accountAlias)
    {
        if (is_null($accountAlias)) {
            throw new \InvalidArgumentException('non-nullable accountAlias cannot be null');
        }
        $this->container['accountAlias'] = $accountAlias;

        return $this;
    }

    /**
     * Gets asset.
     *
     * @return null|string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset.
     *
     * @param null|string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets balance.
     *
     * @return null|string
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance.
     *
     * @param null|string $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets withdrawAvailable.
     *
     * @return null|string
     */
    public function getWithdrawAvailable()
    {
        return $this->container['withdrawAvailable'];
    }

    /**
     * Sets withdrawAvailable.
     *
     * @param null|string $withdrawAvailable withdrawAvailable
     *
     * @return self
     */
    public function setWithdrawAvailable($withdrawAvailable)
    {
        if (is_null($withdrawAvailable)) {
            throw new \InvalidArgumentException('non-nullable withdrawAvailable cannot be null');
        }
        $this->container['withdrawAvailable'] = $withdrawAvailable;

        return $this;
    }

    /**
     * Gets crossWalletBalance.
     *
     * @return null|string
     */
    public function getCrossWalletBalance()
    {
        return $this->container['crossWalletBalance'];
    }

    /**
     * Sets crossWalletBalance.
     *
     * @param null|string $crossWalletBalance crossWalletBalance
     *
     * @return self
     */
    public function setCrossWalletBalance($crossWalletBalance)
    {
        if (is_null($crossWalletBalance)) {
            throw new \InvalidArgumentException('non-nullable crossWalletBalance cannot be null');
        }
        $this->container['crossWalletBalance'] = $crossWalletBalance;

        return $this;
    }

    /**
     * Gets crossUnPnl.
     *
     * @return null|string
     */
    public function getCrossUnPnl()
    {
        return $this->container['crossUnPnl'];
    }

    /**
     * Sets crossUnPnl.
     *
     * @param null|string $crossUnPnl crossUnPnl
     *
     * @return self
     */
    public function setCrossUnPnl($crossUnPnl)
    {
        if (is_null($crossUnPnl)) {
            throw new \InvalidArgumentException('non-nullable crossUnPnl cannot be null');
        }
        $this->container['crossUnPnl'] = $crossUnPnl;

        return $this;
    }

    /**
     * Gets availableBalance.
     *
     * @return null|string
     */
    public function getAvailableBalance()
    {
        return $this->container['availableBalance'];
    }

    /**
     * Sets availableBalance.
     *
     * @param null|string $availableBalance availableBalance
     *
     * @return self
     */
    public function setAvailableBalance($availableBalance)
    {
        if (is_null($availableBalance)) {
            throw new \InvalidArgumentException('non-nullable availableBalance cannot be null');
        }
        $this->container['availableBalance'] = $availableBalance;

        return $this;
    }

    /**
     * Gets updateTime.
     *
     * @return null|int
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime.
     *
     * @param null|int $updateTime updateTime
     *
     * @return self
     */
    public function setUpdateTime($updateTime)
    {
        if (is_null($updateTime)) {
            throw new \InvalidArgumentException('non-nullable updateTime cannot be null');
        }
        $this->container['updateTime'] = $updateTime;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
