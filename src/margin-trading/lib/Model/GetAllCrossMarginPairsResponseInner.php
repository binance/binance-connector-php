<?php

/**
 * GetAllCrossMarginPairsResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Margin Trading REST API.
 *
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\MarginTrading\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetAllCrossMarginPairsResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetAllCrossMarginPairsResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getAllCrossMarginPairsResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'base' => 'string',
        'id' => 'int',
        'isBuyAllowed' => 'bool',
        'isMarginTrade' => 'bool',
        'isSellAllowed' => 'bool',
        'quote' => 'string',
        'symbol' => 'string',
        'delistTime' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'base' => null,
        'id' => 'int64',
        'isBuyAllowed' => null,
        'isMarginTrade' => null,
        'isSellAllowed' => null,
        'quote' => null,
        'symbol' => null,
        'delistTime' => 'int64',
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'base' => false,
        'id' => false,
        'isBuyAllowed' => false,
        'isMarginTrade' => false,
        'isSellAllowed' => false,
        'quote' => false,
        'symbol' => false,
        'delistTime' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base' => 'base',
        'id' => 'id',
        'isBuyAllowed' => 'isBuyAllowed',
        'isMarginTrade' => 'isMarginTrade',
        'isSellAllowed' => 'isSellAllowed',
        'quote' => 'quote',
        'symbol' => 'symbol',
        'delistTime' => 'delistTime',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'base' => 'setBase',
        'id' => 'setId',
        'isBuyAllowed' => 'setIsBuyAllowed',
        'isMarginTrade' => 'setIsMarginTrade',
        'isSellAllowed' => 'setIsSellAllowed',
        'quote' => 'setQuote',
        'symbol' => 'setSymbol',
        'delistTime' => 'setDelistTime',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'base' => 'getBase',
        'id' => 'getId',
        'isBuyAllowed' => 'getIsBuyAllowed',
        'isMarginTrade' => 'getIsMarginTrade',
        'isSellAllowed' => 'getIsSellAllowed',
        'quote' => 'getQuote',
        'symbol' => 'getSymbol',
        'delistTime' => 'getDelistTime',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('base', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('isBuyAllowed', $data ?? [], null);
        $this->setIfExists('isMarginTrade', $data ?? [], null);
        $this->setIfExists('isSellAllowed', $data ?? [], null);
        $this->setIfExists('quote', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('delistTime', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets base.
     *
     * @return null|string
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base.
     *
     * @param null|string $base base
     *
     * @return self
     */
    public function setBase($base)
    {
        if (is_null($base)) {
            throw new \InvalidArgumentException('non-nullable base cannot be null');
        }
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return null|int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param null|int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isBuyAllowed.
     *
     * @return null|bool
     */
    public function getIsBuyAllowed()
    {
        return $this->container['isBuyAllowed'];
    }

    /**
     * Sets isBuyAllowed.
     *
     * @param null|bool $isBuyAllowed isBuyAllowed
     *
     * @return self
     */
    public function setIsBuyAllowed($isBuyAllowed)
    {
        if (is_null($isBuyAllowed)) {
            throw new \InvalidArgumentException('non-nullable isBuyAllowed cannot be null');
        }
        $this->container['isBuyAllowed'] = $isBuyAllowed;

        return $this;
    }

    /**
     * Gets isMarginTrade.
     *
     * @return null|bool
     */
    public function getIsMarginTrade()
    {
        return $this->container['isMarginTrade'];
    }

    /**
     * Sets isMarginTrade.
     *
     * @param null|bool $isMarginTrade isMarginTrade
     *
     * @return self
     */
    public function setIsMarginTrade($isMarginTrade)
    {
        if (is_null($isMarginTrade)) {
            throw new \InvalidArgumentException('non-nullable isMarginTrade cannot be null');
        }
        $this->container['isMarginTrade'] = $isMarginTrade;

        return $this;
    }

    /**
     * Gets isSellAllowed.
     *
     * @return null|bool
     */
    public function getIsSellAllowed()
    {
        return $this->container['isSellAllowed'];
    }

    /**
     * Sets isSellAllowed.
     *
     * @param null|bool $isSellAllowed isSellAllowed
     *
     * @return self
     */
    public function setIsSellAllowed($isSellAllowed)
    {
        if (is_null($isSellAllowed)) {
            throw new \InvalidArgumentException('non-nullable isSellAllowed cannot be null');
        }
        $this->container['isSellAllowed'] = $isSellAllowed;

        return $this;
    }

    /**
     * Gets quote.
     *
     * @return null|string
     */
    public function getQuote()
    {
        return $this->container['quote'];
    }

    /**
     * Sets quote.
     *
     * @param null|string $quote quote
     *
     * @return self
     */
    public function setQuote($quote)
    {
        if (is_null($quote)) {
            throw new \InvalidArgumentException('non-nullable quote cannot be null');
        }
        $this->container['quote'] = $quote;

        return $this;
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets delistTime.
     *
     * @return null|int
     */
    public function getDelistTime()
    {
        return $this->container['delistTime'];
    }

    /**
     * Sets delistTime.
     *
     * @param null|int $delistTime delistTime
     *
     * @return self
     */
    public function setDelistTime($delistTime)
    {
        if (is_null($delistTime)) {
            throw new \InvalidArgumentException('non-nullable delistTime cannot be null');
        }
        $this->container['delistTime'] = $delistTime;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
