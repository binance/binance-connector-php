<?php

/**
 * QueryCrossMarginAccountDetailsResponse.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Margin Trading REST API.
 *
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\MarginTrading\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * QueryCrossMarginAccountDetailsResponse Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class QueryCrossMarginAccountDetailsResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'queryCrossMarginAccountDetailsResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'created' => 'bool',
        'borrowEnabled' => 'bool',
        'marginLevel' => 'string',
        'collateralMarginLevel' => 'string',
        'totalAssetOfBtc' => 'string',
        'totalLiabilityOfBtc' => 'string',
        'totalNetAssetOfBtc' => 'string',
        'totalCollateralValueInUSDT' => 'string',
        'totalOpenOrderLossInUSDT' => 'string',
        'tradeEnabled' => 'bool',
        'transferInEnabled' => 'bool',
        'transferOutEnabled' => 'bool',
        'accountType' => 'string',
        'userAssets' => '\Binance\Client\MarginTrading\Model\QueryCrossMarginAccountDetailsResponseUserAssetsInner[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'created' => null,
        'borrowEnabled' => null,
        'marginLevel' => null,
        'collateralMarginLevel' => null,
        'totalAssetOfBtc' => null,
        'totalLiabilityOfBtc' => null,
        'totalNetAssetOfBtc' => null,
        'totalCollateralValueInUSDT' => null,
        'totalOpenOrderLossInUSDT' => null,
        'tradeEnabled' => null,
        'transferInEnabled' => null,
        'transferOutEnabled' => null,
        'accountType' => null,
        'userAssets' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'created' => false,
        'borrowEnabled' => false,
        'marginLevel' => false,
        'collateralMarginLevel' => false,
        'totalAssetOfBtc' => false,
        'totalLiabilityOfBtc' => false,
        'totalNetAssetOfBtc' => false,
        'totalCollateralValueInUSDT' => false,
        'totalOpenOrderLossInUSDT' => false,
        'tradeEnabled' => false,
        'transferInEnabled' => false,
        'transferOutEnabled' => false,
        'accountType' => false,
        'userAssets' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'borrowEnabled' => 'borrowEnabled',
        'marginLevel' => 'marginLevel',
        'collateralMarginLevel' => 'collateralMarginLevel',
        'totalAssetOfBtc' => 'totalAssetOfBtc',
        'totalLiabilityOfBtc' => 'totalLiabilityOfBtc',
        'totalNetAssetOfBtc' => 'totalNetAssetOfBtc',
        'totalCollateralValueInUSDT' => 'TotalCollateralValueInUSDT',
        'totalOpenOrderLossInUSDT' => 'totalOpenOrderLossInUSDT',
        'tradeEnabled' => 'tradeEnabled',
        'transferInEnabled' => 'transferInEnabled',
        'transferOutEnabled' => 'transferOutEnabled',
        'accountType' => 'accountType',
        'userAssets' => 'userAssets',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'borrowEnabled' => 'setBorrowEnabled',
        'marginLevel' => 'setMarginLevel',
        'collateralMarginLevel' => 'setCollateralMarginLevel',
        'totalAssetOfBtc' => 'setTotalAssetOfBtc',
        'totalLiabilityOfBtc' => 'setTotalLiabilityOfBtc',
        'totalNetAssetOfBtc' => 'setTotalNetAssetOfBtc',
        'totalCollateralValueInUSDT' => 'setTotalCollateralValueInUSDT',
        'totalOpenOrderLossInUSDT' => 'setTotalOpenOrderLossInUSDT',
        'tradeEnabled' => 'setTradeEnabled',
        'transferInEnabled' => 'setTransferInEnabled',
        'transferOutEnabled' => 'setTransferOutEnabled',
        'accountType' => 'setAccountType',
        'userAssets' => 'setUserAssets',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'borrowEnabled' => 'getBorrowEnabled',
        'marginLevel' => 'getMarginLevel',
        'collateralMarginLevel' => 'getCollateralMarginLevel',
        'totalAssetOfBtc' => 'getTotalAssetOfBtc',
        'totalLiabilityOfBtc' => 'getTotalLiabilityOfBtc',
        'totalNetAssetOfBtc' => 'getTotalNetAssetOfBtc',
        'totalCollateralValueInUSDT' => 'getTotalCollateralValueInUSDT',
        'totalOpenOrderLossInUSDT' => 'getTotalOpenOrderLossInUSDT',
        'tradeEnabled' => 'getTradeEnabled',
        'transferInEnabled' => 'getTransferInEnabled',
        'transferOutEnabled' => 'getTransferOutEnabled',
        'accountType' => 'getAccountType',
        'userAssets' => 'getUserAssets',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('borrowEnabled', $data ?? [], null);
        $this->setIfExists('marginLevel', $data ?? [], null);
        $this->setIfExists('collateralMarginLevel', $data ?? [], null);
        $this->setIfExists('totalAssetOfBtc', $data ?? [], null);
        $this->setIfExists('totalLiabilityOfBtc', $data ?? [], null);
        $this->setIfExists('totalNetAssetOfBtc', $data ?? [], null);
        $this->setIfExists('totalCollateralValueInUSDT', $data ?? [], null);
        $this->setIfExists('totalOpenOrderLossInUSDT', $data ?? [], null);
        $this->setIfExists('tradeEnabled', $data ?? [], null);
        $this->setIfExists('transferInEnabled', $data ?? [], null);
        $this->setIfExists('transferOutEnabled', $data ?? [], null);
        $this->setIfExists('accountType', $data ?? [], null);
        $this->setIfExists('userAssets', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets created.
     *
     * @return null|bool
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param null|bool $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets borrowEnabled.
     *
     * @return null|bool
     */
    public function getBorrowEnabled()
    {
        return $this->container['borrowEnabled'];
    }

    /**
     * Sets borrowEnabled.
     *
     * @param null|bool $borrowEnabled borrowEnabled
     *
     * @return self
     */
    public function setBorrowEnabled($borrowEnabled)
    {
        if (is_null($borrowEnabled)) {
            throw new \InvalidArgumentException('non-nullable borrowEnabled cannot be null');
        }
        $this->container['borrowEnabled'] = $borrowEnabled;

        return $this;
    }

    /**
     * Gets marginLevel.
     *
     * @return null|string
     */
    public function getMarginLevel()
    {
        return $this->container['marginLevel'];
    }

    /**
     * Sets marginLevel.
     *
     * @param null|string $marginLevel marginLevel
     *
     * @return self
     */
    public function setMarginLevel($marginLevel)
    {
        if (is_null($marginLevel)) {
            throw new \InvalidArgumentException('non-nullable marginLevel cannot be null');
        }
        $this->container['marginLevel'] = $marginLevel;

        return $this;
    }

    /**
     * Gets collateralMarginLevel.
     *
     * @return null|string
     */
    public function getCollateralMarginLevel()
    {
        return $this->container['collateralMarginLevel'];
    }

    /**
     * Sets collateralMarginLevel.
     *
     * @param null|string $collateralMarginLevel collateralMarginLevel
     *
     * @return self
     */
    public function setCollateralMarginLevel($collateralMarginLevel)
    {
        if (is_null($collateralMarginLevel)) {
            throw new \InvalidArgumentException('non-nullable collateralMarginLevel cannot be null');
        }
        $this->container['collateralMarginLevel'] = $collateralMarginLevel;

        return $this;
    }

    /**
     * Gets totalAssetOfBtc.
     *
     * @return null|string
     */
    public function getTotalAssetOfBtc()
    {
        return $this->container['totalAssetOfBtc'];
    }

    /**
     * Sets totalAssetOfBtc.
     *
     * @param null|string $totalAssetOfBtc totalAssetOfBtc
     *
     * @return self
     */
    public function setTotalAssetOfBtc($totalAssetOfBtc)
    {
        if (is_null($totalAssetOfBtc)) {
            throw new \InvalidArgumentException('non-nullable totalAssetOfBtc cannot be null');
        }
        $this->container['totalAssetOfBtc'] = $totalAssetOfBtc;

        return $this;
    }

    /**
     * Gets totalLiabilityOfBtc.
     *
     * @return null|string
     */
    public function getTotalLiabilityOfBtc()
    {
        return $this->container['totalLiabilityOfBtc'];
    }

    /**
     * Sets totalLiabilityOfBtc.
     *
     * @param null|string $totalLiabilityOfBtc totalLiabilityOfBtc
     *
     * @return self
     */
    public function setTotalLiabilityOfBtc($totalLiabilityOfBtc)
    {
        if (is_null($totalLiabilityOfBtc)) {
            throw new \InvalidArgumentException('non-nullable totalLiabilityOfBtc cannot be null');
        }
        $this->container['totalLiabilityOfBtc'] = $totalLiabilityOfBtc;

        return $this;
    }

    /**
     * Gets totalNetAssetOfBtc.
     *
     * @return null|string
     */
    public function getTotalNetAssetOfBtc()
    {
        return $this->container['totalNetAssetOfBtc'];
    }

    /**
     * Sets totalNetAssetOfBtc.
     *
     * @param null|string $totalNetAssetOfBtc totalNetAssetOfBtc
     *
     * @return self
     */
    public function setTotalNetAssetOfBtc($totalNetAssetOfBtc)
    {
        if (is_null($totalNetAssetOfBtc)) {
            throw new \InvalidArgumentException('non-nullable totalNetAssetOfBtc cannot be null');
        }
        $this->container['totalNetAssetOfBtc'] = $totalNetAssetOfBtc;

        return $this;
    }

    /**
     * Gets totalCollateralValueInUSDT.
     *
     * @return null|string
     */
    public function getTotalCollateralValueInUSDT()
    {
        return $this->container['totalCollateralValueInUSDT'];
    }

    /**
     * Sets totalCollateralValueInUSDT.
     *
     * @param null|string $totalCollateralValueInUSDT totalCollateralValueInUSDT
     *
     * @return self
     */
    public function setTotalCollateralValueInUSDT($totalCollateralValueInUSDT)
    {
        if (is_null($totalCollateralValueInUSDT)) {
            throw new \InvalidArgumentException('non-nullable totalCollateralValueInUSDT cannot be null');
        }
        $this->container['totalCollateralValueInUSDT'] = $totalCollateralValueInUSDT;

        return $this;
    }

    /**
     * Gets totalOpenOrderLossInUSDT.
     *
     * @return null|string
     */
    public function getTotalOpenOrderLossInUSDT()
    {
        return $this->container['totalOpenOrderLossInUSDT'];
    }

    /**
     * Sets totalOpenOrderLossInUSDT.
     *
     * @param null|string $totalOpenOrderLossInUSDT totalOpenOrderLossInUSDT
     *
     * @return self
     */
    public function setTotalOpenOrderLossInUSDT($totalOpenOrderLossInUSDT)
    {
        if (is_null($totalOpenOrderLossInUSDT)) {
            throw new \InvalidArgumentException('non-nullable totalOpenOrderLossInUSDT cannot be null');
        }
        $this->container['totalOpenOrderLossInUSDT'] = $totalOpenOrderLossInUSDT;

        return $this;
    }

    /**
     * Gets tradeEnabled.
     *
     * @return null|bool
     */
    public function getTradeEnabled()
    {
        return $this->container['tradeEnabled'];
    }

    /**
     * Sets tradeEnabled.
     *
     * @param null|bool $tradeEnabled tradeEnabled
     *
     * @return self
     */
    public function setTradeEnabled($tradeEnabled)
    {
        if (is_null($tradeEnabled)) {
            throw new \InvalidArgumentException('non-nullable tradeEnabled cannot be null');
        }
        $this->container['tradeEnabled'] = $tradeEnabled;

        return $this;
    }

    /**
     * Gets transferInEnabled.
     *
     * @return null|bool
     */
    public function getTransferInEnabled()
    {
        return $this->container['transferInEnabled'];
    }

    /**
     * Sets transferInEnabled.
     *
     * @param null|bool $transferInEnabled transferInEnabled
     *
     * @return self
     */
    public function setTransferInEnabled($transferInEnabled)
    {
        if (is_null($transferInEnabled)) {
            throw new \InvalidArgumentException('non-nullable transferInEnabled cannot be null');
        }
        $this->container['transferInEnabled'] = $transferInEnabled;

        return $this;
    }

    /**
     * Gets transferOutEnabled.
     *
     * @return null|bool
     */
    public function getTransferOutEnabled()
    {
        return $this->container['transferOutEnabled'];
    }

    /**
     * Sets transferOutEnabled.
     *
     * @param null|bool $transferOutEnabled transferOutEnabled
     *
     * @return self
     */
    public function setTransferOutEnabled($transferOutEnabled)
    {
        if (is_null($transferOutEnabled)) {
            throw new \InvalidArgumentException('non-nullable transferOutEnabled cannot be null');
        }
        $this->container['transferOutEnabled'] = $transferOutEnabled;

        return $this;
    }

    /**
     * Gets accountType.
     *
     * @return null|string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType.
     *
     * @param null|string $accountType accountType
     *
     * @return self
     */
    public function setAccountType($accountType)
    {
        if (is_null($accountType)) {
            throw new \InvalidArgumentException('non-nullable accountType cannot be null');
        }
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets userAssets.
     *
     * @return null|QueryCrossMarginAccountDetailsResponseUserAssetsInner[]
     */
    public function getUserAssets()
    {
        return $this->container['userAssets'];
    }

    /**
     * Sets userAssets.
     *
     * @param null|QueryCrossMarginAccountDetailsResponseUserAssetsInner[] $userAssets userAssets
     *
     * @return self
     */
    public function setUserAssets($userAssets)
    {
        if (is_null($userAssets)) {
            throw new \InvalidArgumentException('non-nullable userAssets cannot be null');
        }
        $this->container['userAssets'] = $userAssets;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
