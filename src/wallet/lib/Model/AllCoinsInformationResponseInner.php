<?php

/**
 * AllCoinsInformationResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Wallet REST API.
 *
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Wallet\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * AllCoinsInformationResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class AllCoinsInformationResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'allCoinsInformationResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'coin' => 'string',
        'depositAllEnable' => 'bool',
        'free' => 'string',
        'freeze' => 'string',
        'ipoable' => 'string',
        'ipoing' => 'string',
        'isLegalMoney' => 'bool',
        'locked' => 'string',
        'name' => 'string',
        'networkList' => '\Binance\Client\Wallet\Model\AllCoinsInformationResponseInnerNetworkListInner[]',
        'storage' => 'string',
        'trading' => 'bool',
        'withdrawAllEnable' => 'bool',
        'withdrawing' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'coin' => null,
        'depositAllEnable' => null,
        'free' => null,
        'freeze' => null,
        'ipoable' => null,
        'ipoing' => null,
        'isLegalMoney' => null,
        'locked' => null,
        'name' => null,
        'networkList' => null,
        'storage' => null,
        'trading' => null,
        'withdrawAllEnable' => null,
        'withdrawing' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'coin' => false,
        'depositAllEnable' => false,
        'free' => false,
        'freeze' => false,
        'ipoable' => false,
        'ipoing' => false,
        'isLegalMoney' => false,
        'locked' => false,
        'name' => false,
        'networkList' => false,
        'storage' => false,
        'trading' => false,
        'withdrawAllEnable' => false,
        'withdrawing' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coin' => 'coin',
        'depositAllEnable' => 'depositAllEnable',
        'free' => 'free',
        'freeze' => 'freeze',
        'ipoable' => 'ipoable',
        'ipoing' => 'ipoing',
        'isLegalMoney' => 'isLegalMoney',
        'locked' => 'locked',
        'name' => 'name',
        'networkList' => 'networkList',
        'storage' => 'storage',
        'trading' => 'trading',
        'withdrawAllEnable' => 'withdrawAllEnable',
        'withdrawing' => 'withdrawing',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'coin' => 'setCoin',
        'depositAllEnable' => 'setDepositAllEnable',
        'free' => 'setFree',
        'freeze' => 'setFreeze',
        'ipoable' => 'setIpoable',
        'ipoing' => 'setIpoing',
        'isLegalMoney' => 'setIsLegalMoney',
        'locked' => 'setLocked',
        'name' => 'setName',
        'networkList' => 'setNetworkList',
        'storage' => 'setStorage',
        'trading' => 'setTrading',
        'withdrawAllEnable' => 'setWithdrawAllEnable',
        'withdrawing' => 'setWithdrawing',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'coin' => 'getCoin',
        'depositAllEnable' => 'getDepositAllEnable',
        'free' => 'getFree',
        'freeze' => 'getFreeze',
        'ipoable' => 'getIpoable',
        'ipoing' => 'getIpoing',
        'isLegalMoney' => 'getIsLegalMoney',
        'locked' => 'getLocked',
        'name' => 'getName',
        'networkList' => 'getNetworkList',
        'storage' => 'getStorage',
        'trading' => 'getTrading',
        'withdrawAllEnable' => 'getWithdrawAllEnable',
        'withdrawing' => 'getWithdrawing',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('depositAllEnable', $data ?? [], null);
        $this->setIfExists('free', $data ?? [], null);
        $this->setIfExists('freeze', $data ?? [], null);
        $this->setIfExists('ipoable', $data ?? [], null);
        $this->setIfExists('ipoing', $data ?? [], null);
        $this->setIfExists('isLegalMoney', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('networkList', $data ?? [], null);
        $this->setIfExists('storage', $data ?? [], null);
        $this->setIfExists('trading', $data ?? [], null);
        $this->setIfExists('withdrawAllEnable', $data ?? [], null);
        $this->setIfExists('withdrawing', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets coin.
     *
     * @return null|string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin.
     *
     * @param null|string $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {
        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets depositAllEnable.
     *
     * @return null|bool
     */
    public function getDepositAllEnable()
    {
        return $this->container['depositAllEnable'];
    }

    /**
     * Sets depositAllEnable.
     *
     * @param null|bool $depositAllEnable depositAllEnable
     *
     * @return self
     */
    public function setDepositAllEnable($depositAllEnable)
    {
        if (is_null($depositAllEnable)) {
            throw new \InvalidArgumentException('non-nullable depositAllEnable cannot be null');
        }
        $this->container['depositAllEnable'] = $depositAllEnable;

        return $this;
    }

    /**
     * Gets free.
     *
     * @return null|string
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free.
     *
     * @param null|string $free free
     *
     * @return self
     */
    public function setFree($free)
    {
        if (is_null($free)) {
            throw new \InvalidArgumentException('non-nullable free cannot be null');
        }
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets freeze.
     *
     * @return null|string
     */
    public function getFreeze()
    {
        return $this->container['freeze'];
    }

    /**
     * Sets freeze.
     *
     * @param null|string $freeze freeze
     *
     * @return self
     */
    public function setFreeze($freeze)
    {
        if (is_null($freeze)) {
            throw new \InvalidArgumentException('non-nullable freeze cannot be null');
        }
        $this->container['freeze'] = $freeze;

        return $this;
    }

    /**
     * Gets ipoable.
     *
     * @return null|string
     */
    public function getIpoable()
    {
        return $this->container['ipoable'];
    }

    /**
     * Sets ipoable.
     *
     * @param null|string $ipoable ipoable
     *
     * @return self
     */
    public function setIpoable($ipoable)
    {
        if (is_null($ipoable)) {
            throw new \InvalidArgumentException('non-nullable ipoable cannot be null');
        }
        $this->container['ipoable'] = $ipoable;

        return $this;
    }

    /**
     * Gets ipoing.
     *
     * @return null|string
     */
    public function getIpoing()
    {
        return $this->container['ipoing'];
    }

    /**
     * Sets ipoing.
     *
     * @param null|string $ipoing ipoing
     *
     * @return self
     */
    public function setIpoing($ipoing)
    {
        if (is_null($ipoing)) {
            throw new \InvalidArgumentException('non-nullable ipoing cannot be null');
        }
        $this->container['ipoing'] = $ipoing;

        return $this;
    }

    /**
     * Gets isLegalMoney.
     *
     * @return null|bool
     */
    public function getIsLegalMoney()
    {
        return $this->container['isLegalMoney'];
    }

    /**
     * Sets isLegalMoney.
     *
     * @param null|bool $isLegalMoney isLegalMoney
     *
     * @return self
     */
    public function setIsLegalMoney($isLegalMoney)
    {
        if (is_null($isLegalMoney)) {
            throw new \InvalidArgumentException('non-nullable isLegalMoney cannot be null');
        }
        $this->container['isLegalMoney'] = $isLegalMoney;

        return $this;
    }

    /**
     * Gets locked.
     *
     * @return null|string
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked.
     *
     * @param null|string $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return null|string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param null|string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets networkList.
     *
     * @return null|AllCoinsInformationResponseInnerNetworkListInner[]
     */
    public function getNetworkList()
    {
        return $this->container['networkList'];
    }

    /**
     * Sets networkList.
     *
     * @param null|AllCoinsInformationResponseInnerNetworkListInner[] $networkList networkList
     *
     * @return self
     */
    public function setNetworkList($networkList)
    {
        if (is_null($networkList)) {
            throw new \InvalidArgumentException('non-nullable networkList cannot be null');
        }
        $this->container['networkList'] = $networkList;

        return $this;
    }

    /**
     * Gets storage.
     *
     * @return null|string
     */
    public function getStorage()
    {
        return $this->container['storage'];
    }

    /**
     * Sets storage.
     *
     * @param null|string $storage storage
     *
     * @return self
     */
    public function setStorage($storage)
    {
        if (is_null($storage)) {
            throw new \InvalidArgumentException('non-nullable storage cannot be null');
        }
        $this->container['storage'] = $storage;

        return $this;
    }

    /**
     * Gets trading.
     *
     * @return null|bool
     */
    public function getTrading()
    {
        return $this->container['trading'];
    }

    /**
     * Sets trading.
     *
     * @param null|bool $trading trading
     *
     * @return self
     */
    public function setTrading($trading)
    {
        if (is_null($trading)) {
            throw new \InvalidArgumentException('non-nullable trading cannot be null');
        }
        $this->container['trading'] = $trading;

        return $this;
    }

    /**
     * Gets withdrawAllEnable.
     *
     * @return null|bool
     */
    public function getWithdrawAllEnable()
    {
        return $this->container['withdrawAllEnable'];
    }

    /**
     * Sets withdrawAllEnable.
     *
     * @param null|bool $withdrawAllEnable withdrawAllEnable
     *
     * @return self
     */
    public function setWithdrawAllEnable($withdrawAllEnable)
    {
        if (is_null($withdrawAllEnable)) {
            throw new \InvalidArgumentException('non-nullable withdrawAllEnable cannot be null');
        }
        $this->container['withdrawAllEnable'] = $withdrawAllEnable;

        return $this;
    }

    /**
     * Gets withdrawing.
     *
     * @return null|string
     */
    public function getWithdrawing()
    {
        return $this->container['withdrawing'];
    }

    /**
     * Sets withdrawing.
     *
     * @param null|string $withdrawing withdrawing
     *
     * @return self
     */
    public function setWithdrawing($withdrawing)
    {
        if (is_null($withdrawing)) {
            throw new \InvalidArgumentException('non-nullable withdrawing cannot be null');
        }
        $this->container['withdrawing'] = $withdrawing;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
