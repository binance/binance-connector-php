<?php

/**
 * SubscribeDualInvestmentProductsResponse.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Dual Investment REST API.
 *
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DualInvestment\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * SubscribeDualInvestmentProductsResponse Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class SubscribeDualInvestmentProductsResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'subscribeDualInvestmentProductsResponse';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'positionId' => 'int',
        'investCoin' => 'string',
        'exercisedCoin' => 'string',
        'subscriptionAmount' => 'string',
        'duration' => 'int',
        'autoCompoundPlan' => 'string',
        'strikePrice' => 'string',
        'settleDate' => 'int',
        'purchaseStatus' => 'string',
        'apr' => 'string',
        'orderId' => 'int',
        'purchaseTime' => 'int',
        'optionType' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'positionId' => 'int64',
        'investCoin' => null,
        'exercisedCoin' => null,
        'subscriptionAmount' => null,
        'duration' => 'int64',
        'autoCompoundPlan' => null,
        'strikePrice' => null,
        'settleDate' => 'int64',
        'purchaseStatus' => null,
        'apr' => null,
        'orderId' => 'int64',
        'purchaseTime' => 'int64',
        'optionType' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'positionId' => false,
        'investCoin' => false,
        'exercisedCoin' => false,
        'subscriptionAmount' => false,
        'duration' => false,
        'autoCompoundPlan' => false,
        'strikePrice' => false,
        'settleDate' => false,
        'purchaseStatus' => false,
        'apr' => false,
        'orderId' => false,
        'purchaseTime' => false,
        'optionType' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'positionId' => 'positionId',
        'investCoin' => 'investCoin',
        'exercisedCoin' => 'exercisedCoin',
        'subscriptionAmount' => 'subscriptionAmount',
        'duration' => 'duration',
        'autoCompoundPlan' => 'autoCompoundPlan',
        'strikePrice' => 'strikePrice',
        'settleDate' => 'settleDate',
        'purchaseStatus' => 'purchaseStatus',
        'apr' => 'apr',
        'orderId' => 'orderId',
        'purchaseTime' => 'purchaseTime',
        'optionType' => 'optionType',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'positionId' => 'setPositionId',
        'investCoin' => 'setInvestCoin',
        'exercisedCoin' => 'setExercisedCoin',
        'subscriptionAmount' => 'setSubscriptionAmount',
        'duration' => 'setDuration',
        'autoCompoundPlan' => 'setAutoCompoundPlan',
        'strikePrice' => 'setStrikePrice',
        'settleDate' => 'setSettleDate',
        'purchaseStatus' => 'setPurchaseStatus',
        'apr' => 'setApr',
        'orderId' => 'setOrderId',
        'purchaseTime' => 'setPurchaseTime',
        'optionType' => 'setOptionType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'positionId' => 'getPositionId',
        'investCoin' => 'getInvestCoin',
        'exercisedCoin' => 'getExercisedCoin',
        'subscriptionAmount' => 'getSubscriptionAmount',
        'duration' => 'getDuration',
        'autoCompoundPlan' => 'getAutoCompoundPlan',
        'strikePrice' => 'getStrikePrice',
        'settleDate' => 'getSettleDate',
        'purchaseStatus' => 'getPurchaseStatus',
        'apr' => 'getApr',
        'orderId' => 'getOrderId',
        'purchaseTime' => 'getPurchaseTime',
        'optionType' => 'getOptionType',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('positionId', $data ?? [], null);
        $this->setIfExists('investCoin', $data ?? [], null);
        $this->setIfExists('exercisedCoin', $data ?? [], null);
        $this->setIfExists('subscriptionAmount', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('autoCompoundPlan', $data ?? [], null);
        $this->setIfExists('strikePrice', $data ?? [], null);
        $this->setIfExists('settleDate', $data ?? [], null);
        $this->setIfExists('purchaseStatus', $data ?? [], null);
        $this->setIfExists('apr', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('purchaseTime', $data ?? [], null);
        $this->setIfExists('optionType', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets positionId.
     *
     * @return null|int
     */
    public function getPositionId()
    {
        return $this->container['positionId'];
    }

    /**
     * Sets positionId.
     *
     * @param null|int $positionId positionId
     *
     * @return self
     */
    public function setPositionId($positionId)
    {
        if (is_null($positionId)) {
            throw new \InvalidArgumentException('non-nullable positionId cannot be null');
        }
        $this->container['positionId'] = $positionId;

        return $this;
    }

    /**
     * Gets investCoin.
     *
     * @return null|string
     */
    public function getInvestCoin()
    {
        return $this->container['investCoin'];
    }

    /**
     * Sets investCoin.
     *
     * @param null|string $investCoin investCoin
     *
     * @return self
     */
    public function setInvestCoin($investCoin)
    {
        if (is_null($investCoin)) {
            throw new \InvalidArgumentException('non-nullable investCoin cannot be null');
        }
        $this->container['investCoin'] = $investCoin;

        return $this;
    }

    /**
     * Gets exercisedCoin.
     *
     * @return null|string
     */
    public function getExercisedCoin()
    {
        return $this->container['exercisedCoin'];
    }

    /**
     * Sets exercisedCoin.
     *
     * @param null|string $exercisedCoin exercisedCoin
     *
     * @return self
     */
    public function setExercisedCoin($exercisedCoin)
    {
        if (is_null($exercisedCoin)) {
            throw new \InvalidArgumentException('non-nullable exercisedCoin cannot be null');
        }
        $this->container['exercisedCoin'] = $exercisedCoin;

        return $this;
    }

    /**
     * Gets subscriptionAmount.
     *
     * @return null|string
     */
    public function getSubscriptionAmount()
    {
        return $this->container['subscriptionAmount'];
    }

    /**
     * Sets subscriptionAmount.
     *
     * @param null|string $subscriptionAmount subscriptionAmount
     *
     * @return self
     */
    public function setSubscriptionAmount($subscriptionAmount)
    {
        if (is_null($subscriptionAmount)) {
            throw new \InvalidArgumentException('non-nullable subscriptionAmount cannot be null');
        }
        $this->container['subscriptionAmount'] = $subscriptionAmount;

        return $this;
    }

    /**
     * Gets duration.
     *
     * @return null|int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration.
     *
     * @param null|int $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets autoCompoundPlan.
     *
     * @return null|string
     */
    public function getAutoCompoundPlan()
    {
        return $this->container['autoCompoundPlan'];
    }

    /**
     * Sets autoCompoundPlan.
     *
     * @param null|string $autoCompoundPlan autoCompoundPlan
     *
     * @return self
     */
    public function setAutoCompoundPlan($autoCompoundPlan)
    {
        if (is_null($autoCompoundPlan)) {
            throw new \InvalidArgumentException('non-nullable autoCompoundPlan cannot be null');
        }
        $this->container['autoCompoundPlan'] = $autoCompoundPlan;

        return $this;
    }

    /**
     * Gets strikePrice.
     *
     * @return null|string
     */
    public function getStrikePrice()
    {
        return $this->container['strikePrice'];
    }

    /**
     * Sets strikePrice.
     *
     * @param null|string $strikePrice strikePrice
     *
     * @return self
     */
    public function setStrikePrice($strikePrice)
    {
        if (is_null($strikePrice)) {
            throw new \InvalidArgumentException('non-nullable strikePrice cannot be null');
        }
        $this->container['strikePrice'] = $strikePrice;

        return $this;
    }

    /**
     * Gets settleDate.
     *
     * @return null|int
     */
    public function getSettleDate()
    {
        return $this->container['settleDate'];
    }

    /**
     * Sets settleDate.
     *
     * @param null|int $settleDate settleDate
     *
     * @return self
     */
    public function setSettleDate($settleDate)
    {
        if (is_null($settleDate)) {
            throw new \InvalidArgumentException('non-nullable settleDate cannot be null');
        }
        $this->container['settleDate'] = $settleDate;

        return $this;
    }

    /**
     * Gets purchaseStatus.
     *
     * @return null|string
     */
    public function getPurchaseStatus()
    {
        return $this->container['purchaseStatus'];
    }

    /**
     * Sets purchaseStatus.
     *
     * @param null|string $purchaseStatus purchaseStatus
     *
     * @return self
     */
    public function setPurchaseStatus($purchaseStatus)
    {
        if (is_null($purchaseStatus)) {
            throw new \InvalidArgumentException('non-nullable purchaseStatus cannot be null');
        }
        $this->container['purchaseStatus'] = $purchaseStatus;

        return $this;
    }

    /**
     * Gets apr.
     *
     * @return null|string
     */
    public function getApr()
    {
        return $this->container['apr'];
    }

    /**
     * Sets apr.
     *
     * @param null|string $apr apr
     *
     * @return self
     */
    public function setApr($apr)
    {
        if (is_null($apr)) {
            throw new \InvalidArgumentException('non-nullable apr cannot be null');
        }
        $this->container['apr'] = $apr;

        return $this;
    }

    /**
     * Gets orderId.
     *
     * @return null|int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId.
     *
     * @param null|int $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets purchaseTime.
     *
     * @return null|int
     */
    public function getPurchaseTime()
    {
        return $this->container['purchaseTime'];
    }

    /**
     * Sets purchaseTime.
     *
     * @param null|int $purchaseTime purchaseTime
     *
     * @return self
     */
    public function setPurchaseTime($purchaseTime)
    {
        if (is_null($purchaseTime)) {
            throw new \InvalidArgumentException('non-nullable purchaseTime cannot be null');
        }
        $this->container['purchaseTime'] = $purchaseTime;

        return $this;
    }

    /**
     * Gets optionType.
     *
     * @return null|string
     */
    public function getOptionType()
    {
        return $this->container['optionType'];
    }

    /**
     * Sets optionType.
     *
     * @param null|string $optionType optionType
     *
     * @return self
     */
    public function setOptionType($optionType)
    {
        if (is_null($optionType)) {
            throw new \InvalidArgumentException('non-nullable optionType cannot be null');
        }
        $this->container['optionType'] = $optionType;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
