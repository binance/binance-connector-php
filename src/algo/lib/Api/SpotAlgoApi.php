<?php

/**
 * SpotAlgoApi
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Algo REST API.
 *
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Algo\Api;

use Binance\Client\Algo\Model\CancelAlgoOrderSpotAlgoResponse;
use Binance\Client\Algo\Model\QueryCurrentAlgoOpenOrdersSpotAlgoResponse;
use Binance\Client\Algo\Model\QueryHistoricalAlgoOrdersSpotAlgoResponse;
use Binance\Client\Algo\Model\QuerySubOrdersSpotAlgoResponse;
use Binance\Client\Algo\Model\TimeWeightedAveragePriceSpotAlgoRequest;
use Binance\Client\Algo\Model\TimeWeightedAveragePriceSpotAlgoResponse;
use Binance\Common\ApiException;
use Binance\Common\Auth\SignerFactory;
use Binance\Common\Auth\SignerInterface;
use Binance\Common\CommonUtils;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Dtos\ApiResponse;
use Binance\Common\HeaderSelector;
use Binance\Common\HttpClient;
use Binance\Common\ObjectSerializer;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Utils;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * SpotAlgoApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class SpotAlgoApi
{
    /** @var string[] */
    public const contentTypes = [
        'cancelAlgoOrderSpotAlgo' => ['application/x-www-form-urlencoded'],
        'queryCurrentAlgoOpenOrdersSpotAlgo' => ['application/x-www-form-urlencoded'],
        'queryHistoricalAlgoOrdersSpotAlgo' => ['application/x-www-form-urlencoded'],
        'querySubOrdersSpotAlgo' => ['application/x-www-form-urlencoded'],
        'timeWeightedAveragePriceSpotAlgo' => ['application/x-www-form-urlencoded'],
    ];
    private const HAS_TIME_UNIT = false;

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * Summary of clientConfig.
     *
     * @var ClientConfiguration
     */
    protected $clientConfig;

    /**
     * Summary of signer.
     *
     * @var SignerInterface
     */
    protected $signer;

    /**
     * userAgent for HTTP requests.
     *
     * @var string
     */
    private $userAgent;

    public function __construct(
        ?ClientConfiguration $clientConfig = new ClientConfiguration(),
        ?ClientInterface $client = null,
        ?HeaderSelector $selector = null,
    ) {
        $this->clientConfig = $clientConfig;
        $this->client = $client ?: new HttpClient($clientConfig);
        $this->headerSelector = $selector ?: new HeaderSelector();
        if (!empty($clientConfig->getSignatureConfiguration())) {
            $this->signer = SignerFactory::getSigner($clientConfig->getSignatureConfiguration());
        }
        $this->userAgent = CommonUtils::getUserAgent('algo');
    }

    /**
     * Operation cancelAlgoOrderSpotAlgo.
     *
     * Cancel Algo Order(TRADE)
     *
     * @param int      $algoId     eg. 14511 (required)
     * @param null|int $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<CancelAlgoOrderSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function cancelAlgoOrderSpotAlgo($algoId, $recvWindow = null): ApiResponse
    {
        return $this->cancelAlgoOrderSpotAlgoWithHttpInfo($algoId, $recvWindow);
    }

    /**
     * Operation cancelAlgoOrderSpotAlgoWithHttpInfo.
     *
     * Cancel Algo Order(TRADE)
     *
     * @param int      $algoId     eg. 14511 (required)
     * @param null|int $recvWindow (optional)
     *
     * @return ApiResponse<CancelAlgoOrderSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function cancelAlgoOrderSpotAlgoWithHttpInfo($algoId, $recvWindow = null): ApiResponse
    {
        $request = $this->cancelAlgoOrderSpotAlgoRequest($algoId, $recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\Algo\Model\CancelAlgoOrderSpotAlgoResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\Algo\Model\CancelAlgoOrderSpotAlgoResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\Algo\Model\CancelAlgoOrderSpotAlgoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'cancelAlgoOrderSpotAlgo'.
     *
     * @param int      $algoId     eg. 14511 (required)
     * @param null|int $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function cancelAlgoOrderSpotAlgoRequest($algoId, $recvWindow = null)
    {
        $contentType = self::contentTypes['cancelAlgoOrderSpotAlgo'][0];

        // verify the required parameter 'algoId' is set
        if (null === $algoId || (is_array($algoId) && 0 === count($algoId))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $algoId when calling cancelAlgoOrderSpotAlgo'
            );
        }

        $resourcePath = '/sapi/v1/algo/spot/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $algoId,
            'algoId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryCurrentAlgoOpenOrdersSpotAlgo.
     *
     * Query Current Algo Open Orders(USER_DATA)
     *
     * @param null|int $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<QueryCurrentAlgoOpenOrdersSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function queryCurrentAlgoOpenOrdersSpotAlgo($recvWindow = null): ApiResponse
    {
        return $this->queryCurrentAlgoOpenOrdersSpotAlgoWithHttpInfo($recvWindow);
    }

    /**
     * Operation queryCurrentAlgoOpenOrdersSpotAlgoWithHttpInfo.
     *
     * Query Current Algo Open Orders(USER_DATA)
     *
     * @param null|int $recvWindow (optional)
     *
     * @return ApiResponse<QueryCurrentAlgoOpenOrdersSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function queryCurrentAlgoOpenOrdersSpotAlgoWithHttpInfo($recvWindow = null): ApiResponse
    {
        $request = $this->queryCurrentAlgoOpenOrdersSpotAlgoRequest($recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\Algo\Model\QueryCurrentAlgoOpenOrdersSpotAlgoResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\Algo\Model\QueryCurrentAlgoOpenOrdersSpotAlgoResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\Algo\Model\QueryCurrentAlgoOpenOrdersSpotAlgoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'queryCurrentAlgoOpenOrdersSpotAlgo'.
     *
     * @param null|int $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function queryCurrentAlgoOpenOrdersSpotAlgoRequest($recvWindow = null)
    {
        $contentType = self::contentTypes['queryCurrentAlgoOpenOrdersSpotAlgo'][0];

        $resourcePath = '/sapi/v1/algo/spot/openOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricalAlgoOrdersSpotAlgo.
     *
     * Query Historical Algo Orders(USER_DATA)
     *
     * @param null|string $symbol     Trading symbol eg. BTCUSDT (optional)
     * @param null|string $side       BUY or SELL (optional)
     * @param null|int    $startTime  in milliseconds  eg.1641522717552 (optional)
     * @param null|int    $endTime    in milliseconds  eg.1641522526562 (optional)
     * @param null|int    $page       Default is 1 (optional)
     * @param null|int    $pageSize   MIN 1, MAX 100; Default 100 (optional)
     * @param null|int    $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<QueryHistoricalAlgoOrdersSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function queryHistoricalAlgoOrdersSpotAlgo($symbol = null, $side = null, $startTime = null, $endTime = null, $page = null, $pageSize = null, $recvWindow = null): ApiResponse
    {
        return $this->queryHistoricalAlgoOrdersSpotAlgoWithHttpInfo($symbol, $side, $startTime, $endTime, $page, $pageSize, $recvWindow);
    }

    /**
     * Operation queryHistoricalAlgoOrdersSpotAlgoWithHttpInfo.
     *
     * Query Historical Algo Orders(USER_DATA)
     *
     * @param null|string $symbol     Trading symbol eg. BTCUSDT (optional)
     * @param null|string $side       BUY or SELL (optional)
     * @param null|int    $startTime  in milliseconds  eg.1641522717552 (optional)
     * @param null|int    $endTime    in milliseconds  eg.1641522526562 (optional)
     * @param null|int    $page       Default is 1 (optional)
     * @param null|int    $pageSize   MIN 1, MAX 100; Default 100 (optional)
     * @param null|int    $recvWindow (optional)
     *
     * @return ApiResponse<QueryHistoricalAlgoOrdersSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function queryHistoricalAlgoOrdersSpotAlgoWithHttpInfo($symbol = null, $side = null, $startTime = null, $endTime = null, $page = null, $pageSize = null, $recvWindow = null): ApiResponse
    {
        $request = $this->queryHistoricalAlgoOrdersSpotAlgoRequest($symbol, $side, $startTime, $endTime, $page, $pageSize, $recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\Algo\Model\QueryHistoricalAlgoOrdersSpotAlgoResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\Algo\Model\QueryHistoricalAlgoOrdersSpotAlgoResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\Algo\Model\QueryHistoricalAlgoOrdersSpotAlgoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'queryHistoricalAlgoOrdersSpotAlgo'.
     *
     * @param null|string $symbol     Trading symbol eg. BTCUSDT (optional)
     * @param null|string $side       BUY or SELL (optional)
     * @param null|int    $startTime  in milliseconds  eg.1641522717552 (optional)
     * @param null|int    $endTime    in milliseconds  eg.1641522526562 (optional)
     * @param null|int    $page       Default is 1 (optional)
     * @param null|int    $pageSize   MIN 1, MAX 100; Default 100 (optional)
     * @param null|int    $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function queryHistoricalAlgoOrdersSpotAlgoRequest($symbol = null, $side = null, $startTime = null, $endTime = null, $page = null, $pageSize = null, $recvWindow = null)
    {
        $contentType = self::contentTypes['queryHistoricalAlgoOrdersSpotAlgo'][0];

        $resourcePath = '/sapi/v1/algo/spot/historicalOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $side,
            'side', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startTime,
            'startTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endTime,
            'endTime', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation querySubOrdersSpotAlgo.
     *
     * Query Sub Orders(USER_DATA)
     *
     * @param int      $algoId     eg. 14511 (required)
     * @param null|int $page       Default is 1 (optional)
     * @param null|int $pageSize   MIN 1, MAX 100; Default 100 (optional)
     * @param null|int $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<QuerySubOrdersSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function querySubOrdersSpotAlgo($algoId, $page = null, $pageSize = null, $recvWindow = null): ApiResponse
    {
        return $this->querySubOrdersSpotAlgoWithHttpInfo($algoId, $page, $pageSize, $recvWindow);
    }

    /**
     * Operation querySubOrdersSpotAlgoWithHttpInfo.
     *
     * Query Sub Orders(USER_DATA)
     *
     * @param int      $algoId     eg. 14511 (required)
     * @param null|int $page       Default is 1 (optional)
     * @param null|int $pageSize   MIN 1, MAX 100; Default 100 (optional)
     * @param null|int $recvWindow (optional)
     *
     * @return ApiResponse<QuerySubOrdersSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function querySubOrdersSpotAlgoWithHttpInfo($algoId, $page = null, $pageSize = null, $recvWindow = null): ApiResponse
    {
        $request = $this->querySubOrdersSpotAlgoRequest($algoId, $page, $pageSize, $recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\Algo\Model\QuerySubOrdersSpotAlgoResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\Algo\Model\QuerySubOrdersSpotAlgoResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\Algo\Model\QuerySubOrdersSpotAlgoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'querySubOrdersSpotAlgo'.
     *
     * @param int      $algoId     eg. 14511 (required)
     * @param null|int $page       Default is 1 (optional)
     * @param null|int $pageSize   MIN 1, MAX 100; Default 100 (optional)
     * @param null|int $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function querySubOrdersSpotAlgoRequest($algoId, $page = null, $pageSize = null, $recvWindow = null)
    {
        $contentType = self::contentTypes['querySubOrdersSpotAlgo'][0];

        // verify the required parameter 'algoId' is set
        if (null === $algoId || (is_array($algoId) && 0 === count($algoId))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $algoId when calling querySubOrdersSpotAlgo'
            );
        }

        $resourcePath = '/sapi/v1/algo/spot/subOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $algoId,
            'algoId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeWeightedAveragePriceSpotAlgo.
     *
     * Time-Weighted Average Price(Twap) New Order(TRADE)
     *
     * @param TimeWeightedAveragePriceSpotAlgoRequest $timeWeightedAveragePriceSpotAlgoRequest timeWeightedAveragePriceSpotAlgoRequest (required)
     *
     * @return ApiResponse<TimeWeightedAveragePriceSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function timeWeightedAveragePriceSpotAlgo($timeWeightedAveragePriceSpotAlgoRequest): ApiResponse
    {
        return $this->timeWeightedAveragePriceSpotAlgoWithHttpInfo($timeWeightedAveragePriceSpotAlgoRequest);
    }

    /**
     * Operation timeWeightedAveragePriceSpotAlgoWithHttpInfo.
     *
     * Time-Weighted Average Price(Twap) New Order(TRADE)
     *
     * @param TimeWeightedAveragePriceSpotAlgoRequest $timeWeightedAveragePriceSpotAlgoRequest (required)
     *
     * @return ApiResponse<TimeWeightedAveragePriceSpotAlgoResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function timeWeightedAveragePriceSpotAlgoWithHttpInfo($timeWeightedAveragePriceSpotAlgoRequest): ApiResponse
    {
        $request = $this->timeWeightedAveragePriceSpotAlgoRequest($timeWeightedAveragePriceSpotAlgoRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\Algo\Model\TimeWeightedAveragePriceSpotAlgoResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\Algo\Model\TimeWeightedAveragePriceSpotAlgoResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\Algo\Model\TimeWeightedAveragePriceSpotAlgoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'timeWeightedAveragePriceSpotAlgo'.
     *
     * @param TimeWeightedAveragePriceSpotAlgoRequest $timeWeightedAveragePriceSpotAlgoRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function timeWeightedAveragePriceSpotAlgoRequest($timeWeightedAveragePriceSpotAlgoRequest)
    {
        $contentType = self::contentTypes['timeWeightedAveragePriceSpotAlgo'][0];

        // verify the required parameter 'timeWeightedAveragePriceSpotAlgoRequest' is set
        if (null === $timeWeightedAveragePriceSpotAlgoRequest || (is_array($timeWeightedAveragePriceSpotAlgoRequest) && 0 === count($timeWeightedAveragePriceSpotAlgoRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timeWeightedAveragePriceSpotAlgoRequest when calling timeWeightedAveragePriceSpotAlgo'
            );
        }

        $resourcePath = '/sapi/v1/algo/spot/newOrderTwap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $timeWeightedAveragePriceSpotAlgoRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $timeWeightedAveragePriceSpotAlgoRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $timeWeightedAveragePriceSpotAlgoRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($timeWeightedAveragePriceSpotAlgoRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($timeWeightedAveragePriceSpotAlgoRequest));
            } else {
                $httpBody = $timeWeightedAveragePriceSpotAlgoRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Summary of getTimestamp.
     */
    public function getTimestamp(): string
    {
        return date_create()->format('Uv');
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): ApiResponse {
        if ('\SplFileObject' === $dataType) {
            $content = $response->getBody(); // stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ('string' !== $dataType) {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        $rateLimits = CommonUtils::getRateLimits($response->getStatusCode(), $response->getHeaders());

        return new ApiResponse(
            $response->getStatusCode(),
            $response->getHeaders(),
            ObjectSerializer::deserialize($content, $dataType, []),
            $rateLimits
        );
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
