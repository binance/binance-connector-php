<?php

/**
 * QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Algo REST API.
 *
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\Algo\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'queryCurrentAlgoOpenOrdersFutureAlgoResponse_orders_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'algoId' => 'int',
        'symbol' => 'string',
        'side' => 'string',
        'positionSide' => 'string',
        'totalQty' => 'string',
        'executedQty' => 'string',
        'executedAmt' => 'string',
        'avgPrice' => 'string',
        'clientAlgoId' => 'string',
        'bookTime' => 'int',
        'endTime' => 'int',
        'algoStatus' => 'string',
        'algoType' => 'string',
        'urgency' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'algoId' => 'int64',
        'symbol' => null,
        'side' => null,
        'positionSide' => null,
        'totalQty' => null,
        'executedQty' => null,
        'executedAmt' => null,
        'avgPrice' => null,
        'clientAlgoId' => null,
        'bookTime' => 'int64',
        'endTime' => 'int64',
        'algoStatus' => null,
        'algoType' => null,
        'urgency' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'algoId' => false,
        'symbol' => false,
        'side' => false,
        'positionSide' => false,
        'totalQty' => false,
        'executedQty' => false,
        'executedAmt' => false,
        'avgPrice' => false,
        'clientAlgoId' => false,
        'bookTime' => false,
        'endTime' => false,
        'algoStatus' => false,
        'algoType' => false,
        'urgency' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'algoId' => 'algoId',
        'symbol' => 'symbol',
        'side' => 'side',
        'positionSide' => 'positionSide',
        'totalQty' => 'totalQty',
        'executedQty' => 'executedQty',
        'executedAmt' => 'executedAmt',
        'avgPrice' => 'avgPrice',
        'clientAlgoId' => 'clientAlgoId',
        'bookTime' => 'bookTime',
        'endTime' => 'endTime',
        'algoStatus' => 'algoStatus',
        'algoType' => 'algoType',
        'urgency' => 'urgency',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'algoId' => 'setAlgoId',
        'symbol' => 'setSymbol',
        'side' => 'setSide',
        'positionSide' => 'setPositionSide',
        'totalQty' => 'setTotalQty',
        'executedQty' => 'setExecutedQty',
        'executedAmt' => 'setExecutedAmt',
        'avgPrice' => 'setAvgPrice',
        'clientAlgoId' => 'setClientAlgoId',
        'bookTime' => 'setBookTime',
        'endTime' => 'setEndTime',
        'algoStatus' => 'setAlgoStatus',
        'algoType' => 'setAlgoType',
        'urgency' => 'setUrgency',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'algoId' => 'getAlgoId',
        'symbol' => 'getSymbol',
        'side' => 'getSide',
        'positionSide' => 'getPositionSide',
        'totalQty' => 'getTotalQty',
        'executedQty' => 'getExecutedQty',
        'executedAmt' => 'getExecutedAmt',
        'avgPrice' => 'getAvgPrice',
        'clientAlgoId' => 'getClientAlgoId',
        'bookTime' => 'getBookTime',
        'endTime' => 'getEndTime',
        'algoStatus' => 'getAlgoStatus',
        'algoType' => 'getAlgoType',
        'urgency' => 'getUrgency',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('algoId', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
        $this->setIfExists('positionSide', $data ?? [], null);
        $this->setIfExists('totalQty', $data ?? [], null);
        $this->setIfExists('executedQty', $data ?? [], null);
        $this->setIfExists('executedAmt', $data ?? [], null);
        $this->setIfExists('avgPrice', $data ?? [], null);
        $this->setIfExists('clientAlgoId', $data ?? [], null);
        $this->setIfExists('bookTime', $data ?? [], null);
        $this->setIfExists('endTime', $data ?? [], null);
        $this->setIfExists('algoStatus', $data ?? [], null);
        $this->setIfExists('algoType', $data ?? [], null);
        $this->setIfExists('urgency', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets algoId.
     *
     * @return null|int
     */
    public function getAlgoId()
    {
        return $this->container['algoId'];
    }

    /**
     * Sets algoId.
     *
     * @param null|int $algoId algoId
     *
     * @return self
     */
    public function setAlgoId($algoId)
    {
        if (is_null($algoId)) {
            throw new \InvalidArgumentException('non-nullable algoId cannot be null');
        }
        $this->container['algoId'] = $algoId;

        return $this;
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets side.
     *
     * @return null|string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side.
     *
     * @param null|string $side side
     *
     * @return self
     */
    public function setSide($side)
    {
        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets positionSide.
     *
     * @return null|string
     */
    public function getPositionSide()
    {
        return $this->container['positionSide'];
    }

    /**
     * Sets positionSide.
     *
     * @param null|string $positionSide positionSide
     *
     * @return self
     */
    public function setPositionSide($positionSide)
    {
        if (is_null($positionSide)) {
            throw new \InvalidArgumentException('non-nullable positionSide cannot be null');
        }
        $this->container['positionSide'] = $positionSide;

        return $this;
    }

    /**
     * Gets totalQty.
     *
     * @return null|string
     */
    public function getTotalQty()
    {
        return $this->container['totalQty'];
    }

    /**
     * Sets totalQty.
     *
     * @param null|string $totalQty totalQty
     *
     * @return self
     */
    public function setTotalQty($totalQty)
    {
        if (is_null($totalQty)) {
            throw new \InvalidArgumentException('non-nullable totalQty cannot be null');
        }
        $this->container['totalQty'] = $totalQty;

        return $this;
    }

    /**
     * Gets executedQty.
     *
     * @return null|string
     */
    public function getExecutedQty()
    {
        return $this->container['executedQty'];
    }

    /**
     * Sets executedQty.
     *
     * @param null|string $executedQty executedQty
     *
     * @return self
     */
    public function setExecutedQty($executedQty)
    {
        if (is_null($executedQty)) {
            throw new \InvalidArgumentException('non-nullable executedQty cannot be null');
        }
        $this->container['executedQty'] = $executedQty;

        return $this;
    }

    /**
     * Gets executedAmt.
     *
     * @return null|string
     */
    public function getExecutedAmt()
    {
        return $this->container['executedAmt'];
    }

    /**
     * Sets executedAmt.
     *
     * @param null|string $executedAmt executedAmt
     *
     * @return self
     */
    public function setExecutedAmt($executedAmt)
    {
        if (is_null($executedAmt)) {
            throw new \InvalidArgumentException('non-nullable executedAmt cannot be null');
        }
        $this->container['executedAmt'] = $executedAmt;

        return $this;
    }

    /**
     * Gets avgPrice.
     *
     * @return null|string
     */
    public function getAvgPrice()
    {
        return $this->container['avgPrice'];
    }

    /**
     * Sets avgPrice.
     *
     * @param null|string $avgPrice avgPrice
     *
     * @return self
     */
    public function setAvgPrice($avgPrice)
    {
        if (is_null($avgPrice)) {
            throw new \InvalidArgumentException('non-nullable avgPrice cannot be null');
        }
        $this->container['avgPrice'] = $avgPrice;

        return $this;
    }

    /**
     * Gets clientAlgoId.
     *
     * @return null|string
     */
    public function getClientAlgoId()
    {
        return $this->container['clientAlgoId'];
    }

    /**
     * Sets clientAlgoId.
     *
     * @param null|string $clientAlgoId clientAlgoId
     *
     * @return self
     */
    public function setClientAlgoId($clientAlgoId)
    {
        if (is_null($clientAlgoId)) {
            throw new \InvalidArgumentException('non-nullable clientAlgoId cannot be null');
        }
        $this->container['clientAlgoId'] = $clientAlgoId;

        return $this;
    }

    /**
     * Gets bookTime.
     *
     * @return null|int
     */
    public function getBookTime()
    {
        return $this->container['bookTime'];
    }

    /**
     * Sets bookTime.
     *
     * @param null|int $bookTime bookTime
     *
     * @return self
     */
    public function setBookTime($bookTime)
    {
        if (is_null($bookTime)) {
            throw new \InvalidArgumentException('non-nullable bookTime cannot be null');
        }
        $this->container['bookTime'] = $bookTime;

        return $this;
    }

    /**
     * Gets endTime.
     *
     * @return null|int
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime.
     *
     * @param null|int $endTime endTime
     *
     * @return self
     */
    public function setEndTime($endTime)
    {
        if (is_null($endTime)) {
            throw new \InvalidArgumentException('non-nullable endTime cannot be null');
        }
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets algoStatus.
     *
     * @return null|string
     */
    public function getAlgoStatus()
    {
        return $this->container['algoStatus'];
    }

    /**
     * Sets algoStatus.
     *
     * @param null|string $algoStatus algoStatus
     *
     * @return self
     */
    public function setAlgoStatus($algoStatus)
    {
        if (is_null($algoStatus)) {
            throw new \InvalidArgumentException('non-nullable algoStatus cannot be null');
        }
        $this->container['algoStatus'] = $algoStatus;

        return $this;
    }

    /**
     * Gets algoType.
     *
     * @return null|string
     */
    public function getAlgoType()
    {
        return $this->container['algoType'];
    }

    /**
     * Sets algoType.
     *
     * @param null|string $algoType algoType
     *
     * @return self
     */
    public function setAlgoType($algoType)
    {
        if (is_null($algoType)) {
            throw new \InvalidArgumentException('non-nullable algoType cannot be null');
        }
        $this->container['algoType'] = $algoType;

        return $this;
    }

    /**
     * Gets urgency.
     *
     * @return null|string
     */
    public function getUrgency()
    {
        return $this->container['urgency'];
    }

    /**
     * Sets urgency.
     *
     * @param null|string $urgency urgency
     *
     * @return self
     */
    public function setUrgency($urgency)
    {
        if (is_null($urgency)) {
            throw new \InvalidArgumentException('non-nullable urgency cannot be null');
        }
        $this->container['urgency'] = $urgency;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
