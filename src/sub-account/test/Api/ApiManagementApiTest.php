<?php

/**
 * ApiManagementApiTest
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Sub Account REST API.
 *
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Binance\Client\SubAccount\Test\Api;

use Binance\Client\SubAccount\Api\ApiManagementApi;
use Binance\Client\SubAccount\Model\AddIpRestrictionForSubAccountApiKeyRequest;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Configuration\SignatureConfiguration;
use Binance\Common\HttpClient;
use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;

/**
 * ApiManagementApiTest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @internal
 *
 * @coversNothing
 */
class ApiManagementApiTest extends TestCase
{
    public function getApiMock(&$request)
    {
        $clientMock = $this->createMock(HttpClient::class);
        $signatureConfig = new SignatureConfiguration();
        $signatureConfig->setApiKey('apiKey');
        $signatureConfig->setSecretKey('secretKey');
        $clientConfig = new ClientConfiguration();
        $clientConfig->setUrl('http://localhost:8080');
        $clientConfig->setSignatureConfiguration($signatureConfig);
        $responseMock = $this->createMock(ResponseInterface::class);

        $responseMock->expects($this->any())
            ->method('getStatusCode')
            ->willReturn(200)
        ;

        $responseMock->expects($this->any())
            ->method('getBody')
            ->willReturn(Utils::streamFor('{}'))
        ;

        $clientMock->expects($this->once())
            ->method('send')
            ->will($this->returnCallback(function ($actualRequest) use (&$request, $responseMock) {
                $request = $actualRequest;

                return $responseMock;
            }))
        ;

        $apiMock = $this->getMockBuilder(ApiManagementApi::class)
            ->setConstructorArgs([$clientConfig, $clientMock])
            ->onlyMethods(['getTimestamp'])
            ->getMock()
        ;

        $apiMock->method('getTimestamp')->willReturn('1736393892000');

        return $apiMock;
    }

    /**
     * Test case for addIpRestrictionForSubAccountApiKey.
     *
     * Add IP Restriction for Sub-Account API key (For Master Account) (USER_DATA).
     */
    public function testAddIpRestrictionForSubAccountApiKey()
    {
        $addIpRestrictionForSubAccountApiKeyRequest = new AddIpRestrictionForSubAccountApiKeyRequest();
        $addIpRestrictionForSubAccountApiKeyRequest->setEmail('sub-account-email@email.com');
        $addIpRestrictionForSubAccountApiKeyRequest->setSubAccountApiKey('');
        $addIpRestrictionForSubAccountApiKeyRequest->setStatus(1);

        $response = $this->getApiMock($request)->addIpRestrictionForSubAccountApiKey($addIpRestrictionForSubAccountApiKeyRequest);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v2/sub-account/subAccountApi/ipRestriction', $request->getUri()->getPath());
        self::assertEquals('c715f8c4d79d93fc2a7ea9cbb4f82a42143d00dc97ef98cd0af07b1bbd9c95bb', $queryMap['signature']);
    }

    /**
     * Test case for deleteIpListForASubAccountApiKey.
     *
     * Delete IP List For a Sub-account API Key (For Master Account) (USER_DATA).
     */
    public function testDeleteIpListForASubAccountApiKey()
    {
        $email = 'sub-account-email@email.com';
        $subAccountApiKey = '';
        $ipAddress = '';
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->deleteIpListForASubAccountApiKey($email, $subAccountApiKey, $ipAddress, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList', $request->getUri()->getPath());
        self::assertEquals('dbfd7714cbc071ac272d2f9402317af166eb5054a8365e3e2960cf219547989f', $queryMap['signature']);
    }

    /**
     * Test case for getIpRestrictionForASubAccountApiKey.
     *
     * Get IP Restriction for a Sub-account API Key (For Master Account) (USER_DATA).
     */
    public function testGetIpRestrictionForASubAccountApiKey()
    {
        $email = 'sub-account-email@email.com';
        $subAccountApiKey = '';
        $recvWindow = 5000;
        $response = $this->getApiMock($request)->getIpRestrictionForASubAccountApiKey($email, $subAccountApiKey, $recvWindow);

        parse_str($request->getUri(), $queryMap);

        self::assertEquals(200, $response->getStatusCode());
        self::assertEquals('/sapi/v1/sub-account/subAccountApi/ipRestriction', $request->getUri()->getPath());
        self::assertEquals('0ed08ff7787abeae64a40e4a8ddebfefa8063a9c5015b702faa20ffa367a3a3e', $queryMap['signature']);
    }
}
