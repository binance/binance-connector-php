<?php

/**
 * GetDetailOnSubAccountsFuturesAccountV2ResponseFutureAccountRespAssetsInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Sub Account REST API.
 *
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\SubAccount\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * GetDetailOnSubAccountsFuturesAccountV2ResponseFutureAccountRespAssetsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class GetDetailOnSubAccountsFuturesAccountV2ResponseFutureAccountRespAssetsInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'getDetailOnSubAccountsFuturesAccountV2Response_futureAccountResp_assets_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'asset' => 'string',
        'initialMargin' => 'string',
        'maintenanceMargin' => 'string',
        'marginBalance' => 'string',
        'maxWithdrawAmount' => 'string',
        'openOrderInitialMargin' => 'string',
        'positionInitialMargin' => 'string',
        'unrealizedProfit' => 'string',
        'walletBalance' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'asset' => null,
        'initialMargin' => null,
        'maintenanceMargin' => null,
        'marginBalance' => null,
        'maxWithdrawAmount' => null,
        'openOrderInitialMargin' => null,
        'positionInitialMargin' => null,
        'unrealizedProfit' => null,
        'walletBalance' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'asset' => false,
        'initialMargin' => false,
        'maintenanceMargin' => false,
        'marginBalance' => false,
        'maxWithdrawAmount' => false,
        'openOrderInitialMargin' => false,
        'positionInitialMargin' => false,
        'unrealizedProfit' => false,
        'walletBalance' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset' => 'asset',
        'initialMargin' => 'initialMargin',
        'maintenanceMargin' => 'maintenanceMargin',
        'marginBalance' => 'marginBalance',
        'maxWithdrawAmount' => 'maxWithdrawAmount',
        'openOrderInitialMargin' => 'openOrderInitialMargin',
        'positionInitialMargin' => 'positionInitialMargin',
        'unrealizedProfit' => 'unrealizedProfit',
        'walletBalance' => 'walletBalance',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'asset' => 'setAsset',
        'initialMargin' => 'setInitialMargin',
        'maintenanceMargin' => 'setMaintenanceMargin',
        'marginBalance' => 'setMarginBalance',
        'maxWithdrawAmount' => 'setMaxWithdrawAmount',
        'openOrderInitialMargin' => 'setOpenOrderInitialMargin',
        'positionInitialMargin' => 'setPositionInitialMargin',
        'unrealizedProfit' => 'setUnrealizedProfit',
        'walletBalance' => 'setWalletBalance',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'asset' => 'getAsset',
        'initialMargin' => 'getInitialMargin',
        'maintenanceMargin' => 'getMaintenanceMargin',
        'marginBalance' => 'getMarginBalance',
        'maxWithdrawAmount' => 'getMaxWithdrawAmount',
        'openOrderInitialMargin' => 'getOpenOrderInitialMargin',
        'positionInitialMargin' => 'getPositionInitialMargin',
        'unrealizedProfit' => 'getUnrealizedProfit',
        'walletBalance' => 'getWalletBalance',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('initialMargin', $data ?? [], null);
        $this->setIfExists('maintenanceMargin', $data ?? [], null);
        $this->setIfExists('marginBalance', $data ?? [], null);
        $this->setIfExists('maxWithdrawAmount', $data ?? [], null);
        $this->setIfExists('openOrderInitialMargin', $data ?? [], null);
        $this->setIfExists('positionInitialMargin', $data ?? [], null);
        $this->setIfExists('unrealizedProfit', $data ?? [], null);
        $this->setIfExists('walletBalance', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets asset.
     *
     * @return null|string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset.
     *
     * @param null|string $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets initialMargin.
     *
     * @return null|string
     */
    public function getInitialMargin()
    {
        return $this->container['initialMargin'];
    }

    /**
     * Sets initialMargin.
     *
     * @param null|string $initialMargin initialMargin
     *
     * @return self
     */
    public function setInitialMargin($initialMargin)
    {
        if (is_null($initialMargin)) {
            throw new \InvalidArgumentException('non-nullable initialMargin cannot be null');
        }
        $this->container['initialMargin'] = $initialMargin;

        return $this;
    }

    /**
     * Gets maintenanceMargin.
     *
     * @return null|string
     */
    public function getMaintenanceMargin()
    {
        return $this->container['maintenanceMargin'];
    }

    /**
     * Sets maintenanceMargin.
     *
     * @param null|string $maintenanceMargin maintenanceMargin
     *
     * @return self
     */
    public function setMaintenanceMargin($maintenanceMargin)
    {
        if (is_null($maintenanceMargin)) {
            throw new \InvalidArgumentException('non-nullable maintenanceMargin cannot be null');
        }
        $this->container['maintenanceMargin'] = $maintenanceMargin;

        return $this;
    }

    /**
     * Gets marginBalance.
     *
     * @return null|string
     */
    public function getMarginBalance()
    {
        return $this->container['marginBalance'];
    }

    /**
     * Sets marginBalance.
     *
     * @param null|string $marginBalance marginBalance
     *
     * @return self
     */
    public function setMarginBalance($marginBalance)
    {
        if (is_null($marginBalance)) {
            throw new \InvalidArgumentException('non-nullable marginBalance cannot be null');
        }
        $this->container['marginBalance'] = $marginBalance;

        return $this;
    }

    /**
     * Gets maxWithdrawAmount.
     *
     * @return null|string
     */
    public function getMaxWithdrawAmount()
    {
        return $this->container['maxWithdrawAmount'];
    }

    /**
     * Sets maxWithdrawAmount.
     *
     * @param null|string $maxWithdrawAmount maxWithdrawAmount
     *
     * @return self
     */
    public function setMaxWithdrawAmount($maxWithdrawAmount)
    {
        if (is_null($maxWithdrawAmount)) {
            throw new \InvalidArgumentException('non-nullable maxWithdrawAmount cannot be null');
        }
        $this->container['maxWithdrawAmount'] = $maxWithdrawAmount;

        return $this;
    }

    /**
     * Gets openOrderInitialMargin.
     *
     * @return null|string
     */
    public function getOpenOrderInitialMargin()
    {
        return $this->container['openOrderInitialMargin'];
    }

    /**
     * Sets openOrderInitialMargin.
     *
     * @param null|string $openOrderInitialMargin openOrderInitialMargin
     *
     * @return self
     */
    public function setOpenOrderInitialMargin($openOrderInitialMargin)
    {
        if (is_null($openOrderInitialMargin)) {
            throw new \InvalidArgumentException('non-nullable openOrderInitialMargin cannot be null');
        }
        $this->container['openOrderInitialMargin'] = $openOrderInitialMargin;

        return $this;
    }

    /**
     * Gets positionInitialMargin.
     *
     * @return null|string
     */
    public function getPositionInitialMargin()
    {
        return $this->container['positionInitialMargin'];
    }

    /**
     * Sets positionInitialMargin.
     *
     * @param null|string $positionInitialMargin positionInitialMargin
     *
     * @return self
     */
    public function setPositionInitialMargin($positionInitialMargin)
    {
        if (is_null($positionInitialMargin)) {
            throw new \InvalidArgumentException('non-nullable positionInitialMargin cannot be null');
        }
        $this->container['positionInitialMargin'] = $positionInitialMargin;

        return $this;
    }

    /**
     * Gets unrealizedProfit.
     *
     * @return null|string
     */
    public function getUnrealizedProfit()
    {
        return $this->container['unrealizedProfit'];
    }

    /**
     * Sets unrealizedProfit.
     *
     * @param null|string $unrealizedProfit unrealizedProfit
     *
     * @return self
     */
    public function setUnrealizedProfit($unrealizedProfit)
    {
        if (is_null($unrealizedProfit)) {
            throw new \InvalidArgumentException('non-nullable unrealizedProfit cannot be null');
        }
        $this->container['unrealizedProfit'] = $unrealizedProfit;

        return $this;
    }

    /**
     * Gets walletBalance.
     *
     * @return null|string
     */
    public function getWalletBalance()
    {
        return $this->container['walletBalance'];
    }

    /**
     * Sets walletBalance.
     *
     * @param null|string $walletBalance walletBalance
     *
     * @return self
     */
    public function setWalletBalance($walletBalance)
    {
        if (is_null($walletBalance)) {
            throw new \InvalidArgumentException('non-nullable walletBalance cannot be null');
        }
        $this->container['walletBalance'] = $walletBalance;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
