<?php

/**
 * MarketMakerEndpointsApi
 * PHP version 8.1.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Options REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingOptions\Api;

use Binance\Client\DerivativesTradingOptions\Model\AutoCancelAllOpenOrdersRequest;
use Binance\Client\DerivativesTradingOptions\Model\AutoCancelAllOpenOrdersResponse;
use Binance\Client\DerivativesTradingOptions\Model\GetAutoCancelAllOpenOrdersResponse;
use Binance\Client\DerivativesTradingOptions\Model\GetMarketMakerProtectionConfigResponse;
use Binance\Client\DerivativesTradingOptions\Model\OptionMarginAccountInformationResponse;
use Binance\Client\DerivativesTradingOptions\Model\ResetMarketMakerProtectionConfigRequest;
use Binance\Client\DerivativesTradingOptions\Model\ResetMarketMakerProtectionConfigResponse;
use Binance\Client\DerivativesTradingOptions\Model\SetAutoCancelAllOpenOrdersRequest;
use Binance\Client\DerivativesTradingOptions\Model\SetAutoCancelAllOpenOrdersResponse;
use Binance\Client\DerivativesTradingOptions\Model\SetMarketMakerProtectionConfigRequest;
use Binance\Client\DerivativesTradingOptions\Model\SetMarketMakerProtectionConfigResponse;
use Binance\Common\ApiException;
use Binance\Common\Auth\SignerFactory;
use Binance\Common\Auth\SignerInterface;
use Binance\Common\CommonUtils;
use Binance\Common\Configuration\ClientConfiguration;
use Binance\Common\Dtos\ApiResponse;
use Binance\Common\HeaderSelector;
use Binance\Common\HttpClient;
use Binance\Common\ObjectSerializer;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Utils;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * MarketMakerEndpointsApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class MarketMakerEndpointsApi
{
    /** @var string[] */
    public const contentTypes = [
        'autoCancelAllOpenOrders' => ['application/x-www-form-urlencoded'],
        'getAutoCancelAllOpenOrders' => ['application/x-www-form-urlencoded'],
        'getMarketMakerProtectionConfig' => ['application/x-www-form-urlencoded'],
        'optionMarginAccountInformation' => ['application/x-www-form-urlencoded'],
        'resetMarketMakerProtectionConfig' => ['application/x-www-form-urlencoded'],
        'setAutoCancelAllOpenOrders' => ['application/x-www-form-urlencoded'],
        'setMarketMakerProtectionConfig' => ['application/x-www-form-urlencoded'],
    ];
    private const HAS_TIME_UNIT = false;

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * Summary of clientConfig.
     *
     * @var ClientConfiguration
     */
    protected $clientConfig;

    /**
     * Summary of signer.
     *
     * @var SignerInterface
     */
    protected $signer;

    /**
     * userAgent for HTTP requests.
     *
     * @var string
     */
    private $userAgent;

    public function __construct(
        ?ClientConfiguration $clientConfig = new ClientConfiguration(),
        ?ClientInterface $client = null,
        ?HeaderSelector $selector = null,
    ) {
        $this->clientConfig = $clientConfig;
        $this->client = $client ?: new HttpClient($clientConfig);
        $this->headerSelector = $selector ?: new HeaderSelector();
        if (!empty($clientConfig->getSignatureConfiguration())) {
            $this->signer = SignerFactory::getSigner($clientConfig->getSignatureConfiguration());
        }
        $this->userAgent = sprintf('binance-derivatives-trading-options/1.0.0 (PHP/%s; %s; %s)', phpversion(), PHP_OS_FAMILY, php_uname('m'));
    }

    /**
     * Operation autoCancelAllOpenOrders.
     *
     * Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
     *
     * @param AutoCancelAllOpenOrdersRequest $autoCancelAllOpenOrdersRequest autoCancelAllOpenOrdersRequest (required)
     *
     * @return ApiResponse<AutoCancelAllOpenOrdersResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function autoCancelAllOpenOrders($autoCancelAllOpenOrdersRequest): ApiResponse
    {
        return $this->autoCancelAllOpenOrdersWithHttpInfo($autoCancelAllOpenOrdersRequest);
    }

    /**
     * Operation autoCancelAllOpenOrdersWithHttpInfo.
     *
     * Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
     *
     * @param AutoCancelAllOpenOrdersRequest $autoCancelAllOpenOrdersRequest (required)
     *
     * @return ApiResponse<AutoCancelAllOpenOrdersResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function autoCancelAllOpenOrdersWithHttpInfo($autoCancelAllOpenOrdersRequest): ApiResponse
    {
        $request = $this->autoCancelAllOpenOrdersRequest($autoCancelAllOpenOrdersRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\DerivativesTradingOptions\Model\AutoCancelAllOpenOrdersResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\DerivativesTradingOptions\Model\AutoCancelAllOpenOrdersResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\DerivativesTradingOptions\Model\AutoCancelAllOpenOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'autoCancelAllOpenOrders'.
     *
     * @param AutoCancelAllOpenOrdersRequest $autoCancelAllOpenOrdersRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function autoCancelAllOpenOrdersRequest($autoCancelAllOpenOrdersRequest)
    {
        $contentType = self::contentTypes['autoCancelAllOpenOrders'][0];

        // verify the required parameter 'autoCancelAllOpenOrdersRequest' is set
        if (null === $autoCancelAllOpenOrdersRequest || (is_array($autoCancelAllOpenOrdersRequest) && 0 === count($autoCancelAllOpenOrdersRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $autoCancelAllOpenOrdersRequest when calling autoCancelAllOpenOrders'
            );
        }

        $resourcePath = '/eapi/v1/countdownCancelAllHeartBeat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $autoCancelAllOpenOrdersRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $autoCancelAllOpenOrdersRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $autoCancelAllOpenOrdersRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($autoCancelAllOpenOrdersRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($autoCancelAllOpenOrdersRequest));
            } else {
                $httpBody = $autoCancelAllOpenOrdersRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutoCancelAllOpenOrders.
     *
     * Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     *
     * @param null|string $underlying underlying, e.g BTCUSDT (optional)
     * @param null|int    $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<GetAutoCancelAllOpenOrdersResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function getAutoCancelAllOpenOrders($underlying = null, $recvWindow = null): ApiResponse
    {
        return $this->getAutoCancelAllOpenOrdersWithHttpInfo($underlying, $recvWindow);
    }

    /**
     * Operation getAutoCancelAllOpenOrdersWithHttpInfo.
     *
     * Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     *
     * @param null|string $underlying underlying, e.g BTCUSDT (optional)
     * @param null|int    $recvWindow (optional)
     *
     * @return ApiResponse<GetAutoCancelAllOpenOrdersResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function getAutoCancelAllOpenOrdersWithHttpInfo($underlying = null, $recvWindow = null): ApiResponse
    {
        $request = $this->getAutoCancelAllOpenOrdersRequest($underlying, $recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\DerivativesTradingOptions\Model\GetAutoCancelAllOpenOrdersResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\DerivativesTradingOptions\Model\GetAutoCancelAllOpenOrdersResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\DerivativesTradingOptions\Model\GetAutoCancelAllOpenOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'getAutoCancelAllOpenOrders'.
     *
     * @param null|string $underlying underlying, e.g BTCUSDT (optional)
     * @param null|int    $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function getAutoCancelAllOpenOrdersRequest($underlying = null, $recvWindow = null)
    {
        $contentType = self::contentTypes['getAutoCancelAllOpenOrders'][0];

        $resourcePath = '/eapi/v1/countdownCancelAll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $underlying,
            'underlying', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMarketMakerProtectionConfig.
     *
     * Get Market Maker Protection Config (TRADE)
     *
     * @param null|string $underlying underlying, e.g BTCUSDT (optional)
     * @param null|int    $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<GetMarketMakerProtectionConfigResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function getMarketMakerProtectionConfig($underlying = null, $recvWindow = null): ApiResponse
    {
        return $this->getMarketMakerProtectionConfigWithHttpInfo($underlying, $recvWindow);
    }

    /**
     * Operation getMarketMakerProtectionConfigWithHttpInfo.
     *
     * Get Market Maker Protection Config (TRADE)
     *
     * @param null|string $underlying underlying, e.g BTCUSDT (optional)
     * @param null|int    $recvWindow (optional)
     *
     * @return ApiResponse<GetMarketMakerProtectionConfigResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function getMarketMakerProtectionConfigWithHttpInfo($underlying = null, $recvWindow = null): ApiResponse
    {
        $request = $this->getMarketMakerProtectionConfigRequest($underlying, $recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\DerivativesTradingOptions\Model\GetMarketMakerProtectionConfigResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\DerivativesTradingOptions\Model\GetMarketMakerProtectionConfigResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\DerivativesTradingOptions\Model\GetMarketMakerProtectionConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'getMarketMakerProtectionConfig'.
     *
     * @param null|string $underlying underlying, e.g BTCUSDT (optional)
     * @param null|int    $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function getMarketMakerProtectionConfigRequest($underlying = null, $recvWindow = null)
    {
        $contentType = self::contentTypes['getMarketMakerProtectionConfig'][0];

        $resourcePath = '/eapi/v1/mmp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $underlying,
            'underlying', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation optionMarginAccountInformation.
     *
     * Option Margin Account Information (USER_DATA)
     *
     * @param null|int $recvWindow recvWindow (optional)
     *
     * @return ApiResponse<OptionMarginAccountInformationResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function optionMarginAccountInformation($recvWindow = null): ApiResponse
    {
        return $this->optionMarginAccountInformationWithHttpInfo($recvWindow);
    }

    /**
     * Operation optionMarginAccountInformationWithHttpInfo.
     *
     * Option Margin Account Information (USER_DATA)
     *
     * @param null|int $recvWindow (optional)
     *
     * @return ApiResponse<OptionMarginAccountInformationResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function optionMarginAccountInformationWithHttpInfo($recvWindow = null): ApiResponse
    {
        $request = $this->optionMarginAccountInformationRequest($recvWindow);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\DerivativesTradingOptions\Model\OptionMarginAccountInformationResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\DerivativesTradingOptions\Model\OptionMarginAccountInformationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\DerivativesTradingOptions\Model\OptionMarginAccountInformationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'optionMarginAccountInformation'.
     *
     * @param null|int $recvWindow (optional)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function optionMarginAccountInformationRequest($recvWindow = null)
    {
        $contentType = self::contentTypes['optionMarginAccountInformation'][0];

        $resourcePath = '/eapi/v1/marginAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recvWindow,
            'recvWindow', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetMarketMakerProtectionConfig.
     *
     * Reset Market Maker Protection Config (TRADE)
     *
     * @param ResetMarketMakerProtectionConfigRequest $resetMarketMakerProtectionConfigRequest resetMarketMakerProtectionConfigRequest (required)
     *
     * @return ApiResponse<ResetMarketMakerProtectionConfigResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function resetMarketMakerProtectionConfig($resetMarketMakerProtectionConfigRequest): ApiResponse
    {
        return $this->resetMarketMakerProtectionConfigWithHttpInfo($resetMarketMakerProtectionConfigRequest);
    }

    /**
     * Operation resetMarketMakerProtectionConfigWithHttpInfo.
     *
     * Reset Market Maker Protection Config (TRADE)
     *
     * @param ResetMarketMakerProtectionConfigRequest $resetMarketMakerProtectionConfigRequest (required)
     *
     * @return ApiResponse<ResetMarketMakerProtectionConfigResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function resetMarketMakerProtectionConfigWithHttpInfo($resetMarketMakerProtectionConfigRequest): ApiResponse
    {
        $request = $this->resetMarketMakerProtectionConfigRequest($resetMarketMakerProtectionConfigRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\DerivativesTradingOptions\Model\ResetMarketMakerProtectionConfigResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\DerivativesTradingOptions\Model\ResetMarketMakerProtectionConfigResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\DerivativesTradingOptions\Model\ResetMarketMakerProtectionConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'resetMarketMakerProtectionConfig'.
     *
     * @param ResetMarketMakerProtectionConfigRequest $resetMarketMakerProtectionConfigRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function resetMarketMakerProtectionConfigRequest($resetMarketMakerProtectionConfigRequest)
    {
        $contentType = self::contentTypes['resetMarketMakerProtectionConfig'][0];

        // verify the required parameter 'resetMarketMakerProtectionConfigRequest' is set
        if (null === $resetMarketMakerProtectionConfigRequest || (is_array($resetMarketMakerProtectionConfigRequest) && 0 === count($resetMarketMakerProtectionConfigRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resetMarketMakerProtectionConfigRequest when calling resetMarketMakerProtectionConfig'
            );
        }

        $resourcePath = '/eapi/v1/mmpReset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $resetMarketMakerProtectionConfigRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $resetMarketMakerProtectionConfigRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $resetMarketMakerProtectionConfigRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($resetMarketMakerProtectionConfigRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resetMarketMakerProtectionConfigRequest));
            } else {
                $httpBody = $resetMarketMakerProtectionConfigRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAutoCancelAllOpenOrders.
     *
     * Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     *
     * @param SetAutoCancelAllOpenOrdersRequest $setAutoCancelAllOpenOrdersRequest setAutoCancelAllOpenOrdersRequest (required)
     *
     * @return ApiResponse<SetAutoCancelAllOpenOrdersResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function setAutoCancelAllOpenOrders($setAutoCancelAllOpenOrdersRequest): ApiResponse
    {
        return $this->setAutoCancelAllOpenOrdersWithHttpInfo($setAutoCancelAllOpenOrdersRequest);
    }

    /**
     * Operation setAutoCancelAllOpenOrdersWithHttpInfo.
     *
     * Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     *
     * @param SetAutoCancelAllOpenOrdersRequest $setAutoCancelAllOpenOrdersRequest (required)
     *
     * @return ApiResponse<SetAutoCancelAllOpenOrdersResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function setAutoCancelAllOpenOrdersWithHttpInfo($setAutoCancelAllOpenOrdersRequest): ApiResponse
    {
        $request = $this->setAutoCancelAllOpenOrdersRequest($setAutoCancelAllOpenOrdersRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\DerivativesTradingOptions\Model\SetAutoCancelAllOpenOrdersResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\DerivativesTradingOptions\Model\SetAutoCancelAllOpenOrdersResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\DerivativesTradingOptions\Model\SetAutoCancelAllOpenOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'setAutoCancelAllOpenOrders'.
     *
     * @param SetAutoCancelAllOpenOrdersRequest $setAutoCancelAllOpenOrdersRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function setAutoCancelAllOpenOrdersRequest($setAutoCancelAllOpenOrdersRequest)
    {
        $contentType = self::contentTypes['setAutoCancelAllOpenOrders'][0];

        // verify the required parameter 'setAutoCancelAllOpenOrdersRequest' is set
        if (null === $setAutoCancelAllOpenOrdersRequest || (is_array($setAutoCancelAllOpenOrdersRequest) && 0 === count($setAutoCancelAllOpenOrdersRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setAutoCancelAllOpenOrdersRequest when calling setAutoCancelAllOpenOrders'
            );
        }

        $resourcePath = '/eapi/v1/countdownCancelAll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $setAutoCancelAllOpenOrdersRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $setAutoCancelAllOpenOrdersRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $setAutoCancelAllOpenOrdersRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($setAutoCancelAllOpenOrdersRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($setAutoCancelAllOpenOrdersRequest));
            } else {
                $httpBody = $setAutoCancelAllOpenOrdersRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMarketMakerProtectionConfig.
     *
     * Set Market Maker Protection Config (TRADE)
     *
     * @param SetMarketMakerProtectionConfigRequest $setMarketMakerProtectionConfigRequest setMarketMakerProtectionConfigRequest (required)
     *
     * @return ApiResponse<SetMarketMakerProtectionConfigResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function setMarketMakerProtectionConfig($setMarketMakerProtectionConfigRequest): ApiResponse
    {
        return $this->setMarketMakerProtectionConfigWithHttpInfo($setMarketMakerProtectionConfigRequest);
    }

    /**
     * Operation setMarketMakerProtectionConfigWithHttpInfo.
     *
     * Set Market Maker Protection Config (TRADE)
     *
     * @param SetMarketMakerProtectionConfigRequest $setMarketMakerProtectionConfigRequest (required)
     *
     * @return ApiResponse<SetMarketMakerProtectionConfigResponse>
     *
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     */
    public function setMarketMakerProtectionConfigWithHttpInfo($setMarketMakerProtectionConfigRequest): ApiResponse
    {
        $request = $this->setMarketMakerProtectionConfigRequest($setMarketMakerProtectionConfigRequest);

        try {
            try {
                $response = $this->client->send($request, []);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Binance\Client\DerivativesTradingOptions\Model\SetMarketMakerProtectionConfigResponse',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Binance\Client\DerivativesTradingOptions\Model\SetMarketMakerProtectionConfigResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Binance\Client\DerivativesTradingOptions\Model\SetMarketMakerProtectionConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Create request for operation 'setMarketMakerProtectionConfig'.
     *
     * @param SetMarketMakerProtectionConfigRequest $setMarketMakerProtectionConfigRequest (required)
     *
     * @return Request
     *
     * @throws \InvalidArgumentException
     */
    public function setMarketMakerProtectionConfigRequest($setMarketMakerProtectionConfigRequest)
    {
        $contentType = self::contentTypes['setMarketMakerProtectionConfig'][0];

        // verify the required parameter 'setMarketMakerProtectionConfigRequest' is set
        if (null === $setMarketMakerProtectionConfigRequest || (is_array($setMarketMakerProtectionConfigRequest) && 0 === count($setMarketMakerProtectionConfigRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setMarketMakerProtectionConfigRequest when calling setMarketMakerProtectionConfig'
            );
        }

        $resourcePath = '/eapi/v1/mmpSet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $getters = $setMarketMakerProtectionConfigRequest::getters();
        $formParams = [];
        foreach ($getters as $property => $getter) {
            $value = $setMarketMakerProtectionConfigRequest->{$getter}();
            if (!empty($value)) {
                $formParams[$property] = $setMarketMakerProtectionConfigRequest->{$getter}();
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        } elseif (isset($setMarketMakerProtectionConfigRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($setMarketMakerProtectionConfigRequest));
            } else {
                $httpBody = $setMarketMakerProtectionConfigRequest;
            }
        }

        $defaultHeaders = [];
        $defaultHeaders['User-Agent'] = $this->userAgent;

        if (self::HAS_TIME_UNIT && !empty($this->clientConfig->getTimeUnit())) {
            $defaultHeaders['X-MBX-TIME-UNIT'] = $this->clientConfig->getTimeUnit();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->clientConfig->getUrl();

        $queryParams['timestamp'] = $this->getTimestamp();
        $query = ObjectSerializer::buildQuery($queryParams);
        $queryParams['signature'] = $this->signer->sign($query.$httpBody);
        $headers['X-MBX-APIKEY'] = $this->clientConfig->getSignatureConfiguration()->getApiKey();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Summary of getTimestamp.
     */
    public function getTimestamp(): string
    {
        return date_create()->format('Uv');
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): ApiResponse {
        if ('\SplFileObject' === $dataType) {
            $content = $response->getBody(); // stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ('string' !== $dataType) {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        $rateLimits = CommonUtils::getRateLimits($response->getStatusCode(), $response->getHeaders());

        return new ApiResponse(
            $response->getStatusCode(),
            $response->getHeaders(),
            ObjectSerializer::deserialize($content, $dataType, []),
            $rateLimits
        );
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
