<?php

/**
 * Ticker24hrPriceChangeStatisticsResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Options REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingOptions\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * Ticker24hrPriceChangeStatisticsResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class Ticker24hrPriceChangeStatisticsResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'ticker24hrPriceChangeStatisticsResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'priceChange' => 'string',
        'priceChangePercent' => 'string',
        'lastPrice' => 'string',
        'lastQty' => 'string',
        'open' => 'string',
        'high' => 'string',
        'low' => 'string',
        'volume' => 'string',
        'amount' => 'string',
        'bidPrice' => 'string',
        'askPrice' => 'string',
        'openTime' => 'int',
        'closeTime' => 'int',
        'firstTradeId' => 'int',
        'tradeCount' => 'int',
        'strikePrice' => 'string',
        'exercisePrice' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'symbol' => null,
        'priceChange' => null,
        'priceChangePercent' => null,
        'lastPrice' => null,
        'lastQty' => null,
        'open' => null,
        'high' => null,
        'low' => null,
        'volume' => null,
        'amount' => null,
        'bidPrice' => null,
        'askPrice' => null,
        'openTime' => 'int64',
        'closeTime' => 'int64',
        'firstTradeId' => 'int64',
        'tradeCount' => 'int64',
        'strikePrice' => null,
        'exercisePrice' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'symbol' => false,
        'priceChange' => false,
        'priceChangePercent' => false,
        'lastPrice' => false,
        'lastQty' => false,
        'open' => false,
        'high' => false,
        'low' => false,
        'volume' => false,
        'amount' => false,
        'bidPrice' => false,
        'askPrice' => false,
        'openTime' => false,
        'closeTime' => false,
        'firstTradeId' => false,
        'tradeCount' => false,
        'strikePrice' => false,
        'exercisePrice' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'priceChange' => 'priceChange',
        'priceChangePercent' => 'priceChangePercent',
        'lastPrice' => 'lastPrice',
        'lastQty' => 'lastQty',
        'open' => 'open',
        'high' => 'high',
        'low' => 'low',
        'volume' => 'volume',
        'amount' => 'amount',
        'bidPrice' => 'bidPrice',
        'askPrice' => 'askPrice',
        'openTime' => 'openTime',
        'closeTime' => 'closeTime',
        'firstTradeId' => 'firstTradeId',
        'tradeCount' => 'tradeCount',
        'strikePrice' => 'strikePrice',
        'exercisePrice' => 'exercisePrice',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'priceChange' => 'setPriceChange',
        'priceChangePercent' => 'setPriceChangePercent',
        'lastPrice' => 'setLastPrice',
        'lastQty' => 'setLastQty',
        'open' => 'setOpen',
        'high' => 'setHigh',
        'low' => 'setLow',
        'volume' => 'setVolume',
        'amount' => 'setAmount',
        'bidPrice' => 'setBidPrice',
        'askPrice' => 'setAskPrice',
        'openTime' => 'setOpenTime',
        'closeTime' => 'setCloseTime',
        'firstTradeId' => 'setFirstTradeId',
        'tradeCount' => 'setTradeCount',
        'strikePrice' => 'setStrikePrice',
        'exercisePrice' => 'setExercisePrice',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'priceChange' => 'getPriceChange',
        'priceChangePercent' => 'getPriceChangePercent',
        'lastPrice' => 'getLastPrice',
        'lastQty' => 'getLastQty',
        'open' => 'getOpen',
        'high' => 'getHigh',
        'low' => 'getLow',
        'volume' => 'getVolume',
        'amount' => 'getAmount',
        'bidPrice' => 'getBidPrice',
        'askPrice' => 'getAskPrice',
        'openTime' => 'getOpenTime',
        'closeTime' => 'getCloseTime',
        'firstTradeId' => 'getFirstTradeId',
        'tradeCount' => 'getTradeCount',
        'strikePrice' => 'getStrikePrice',
        'exercisePrice' => 'getExercisePrice',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('priceChange', $data ?? [], null);
        $this->setIfExists('priceChangePercent', $data ?? [], null);
        $this->setIfExists('lastPrice', $data ?? [], null);
        $this->setIfExists('lastQty', $data ?? [], null);
        $this->setIfExists('open', $data ?? [], null);
        $this->setIfExists('high', $data ?? [], null);
        $this->setIfExists('low', $data ?? [], null);
        $this->setIfExists('volume', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('bidPrice', $data ?? [], null);
        $this->setIfExists('askPrice', $data ?? [], null);
        $this->setIfExists('openTime', $data ?? [], null);
        $this->setIfExists('closeTime', $data ?? [], null);
        $this->setIfExists('firstTradeId', $data ?? [], null);
        $this->setIfExists('tradeCount', $data ?? [], null);
        $this->setIfExists('strikePrice', $data ?? [], null);
        $this->setIfExists('exercisePrice', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets priceChange.
     *
     * @return null|string
     */
    public function getPriceChange()
    {
        return $this->container['priceChange'];
    }

    /**
     * Sets priceChange.
     *
     * @param null|string $priceChange priceChange
     *
     * @return self
     */
    public function setPriceChange($priceChange)
    {
        if (is_null($priceChange)) {
            throw new \InvalidArgumentException('non-nullable priceChange cannot be null');
        }
        $this->container['priceChange'] = $priceChange;

        return $this;
    }

    /**
     * Gets priceChangePercent.
     *
     * @return null|string
     */
    public function getPriceChangePercent()
    {
        return $this->container['priceChangePercent'];
    }

    /**
     * Sets priceChangePercent.
     *
     * @param null|string $priceChangePercent priceChangePercent
     *
     * @return self
     */
    public function setPriceChangePercent($priceChangePercent)
    {
        if (is_null($priceChangePercent)) {
            throw new \InvalidArgumentException('non-nullable priceChangePercent cannot be null');
        }
        $this->container['priceChangePercent'] = $priceChangePercent;

        return $this;
    }

    /**
     * Gets lastPrice.
     *
     * @return null|string
     */
    public function getLastPrice()
    {
        return $this->container['lastPrice'];
    }

    /**
     * Sets lastPrice.
     *
     * @param null|string $lastPrice lastPrice
     *
     * @return self
     */
    public function setLastPrice($lastPrice)
    {
        if (is_null($lastPrice)) {
            throw new \InvalidArgumentException('non-nullable lastPrice cannot be null');
        }
        $this->container['lastPrice'] = $lastPrice;

        return $this;
    }

    /**
     * Gets lastQty.
     *
     * @return null|string
     */
    public function getLastQty()
    {
        return $this->container['lastQty'];
    }

    /**
     * Sets lastQty.
     *
     * @param null|string $lastQty lastQty
     *
     * @return self
     */
    public function setLastQty($lastQty)
    {
        if (is_null($lastQty)) {
            throw new \InvalidArgumentException('non-nullable lastQty cannot be null');
        }
        $this->container['lastQty'] = $lastQty;

        return $this;
    }

    /**
     * Gets open.
     *
     * @return null|string
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open.
     *
     * @param null|string $open open
     *
     * @return self
     */
    public function setOpen($open)
    {
        if (is_null($open)) {
            throw new \InvalidArgumentException('non-nullable open cannot be null');
        }
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets high.
     *
     * @return null|string
     */
    public function getHigh()
    {
        return $this->container['high'];
    }

    /**
     * Sets high.
     *
     * @param null|string $high high
     *
     * @return self
     */
    public function setHigh($high)
    {
        if (is_null($high)) {
            throw new \InvalidArgumentException('non-nullable high cannot be null');
        }
        $this->container['high'] = $high;

        return $this;
    }

    /**
     * Gets low.
     *
     * @return null|string
     */
    public function getLow()
    {
        return $this->container['low'];
    }

    /**
     * Sets low.
     *
     * @param null|string $low low
     *
     * @return self
     */
    public function setLow($low)
    {
        if (is_null($low)) {
            throw new \InvalidArgumentException('non-nullable low cannot be null');
        }
        $this->container['low'] = $low;

        return $this;
    }

    /**
     * Gets volume.
     *
     * @return null|string
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume.
     *
     * @param null|string $volume volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        if (is_null($volume)) {
            throw new \InvalidArgumentException('non-nullable volume cannot be null');
        }
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return null|string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param null|string $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets bidPrice.
     *
     * @return null|string
     */
    public function getBidPrice()
    {
        return $this->container['bidPrice'];
    }

    /**
     * Sets bidPrice.
     *
     * @param null|string $bidPrice bidPrice
     *
     * @return self
     */
    public function setBidPrice($bidPrice)
    {
        if (is_null($bidPrice)) {
            throw new \InvalidArgumentException('non-nullable bidPrice cannot be null');
        }
        $this->container['bidPrice'] = $bidPrice;

        return $this;
    }

    /**
     * Gets askPrice.
     *
     * @return null|string
     */
    public function getAskPrice()
    {
        return $this->container['askPrice'];
    }

    /**
     * Sets askPrice.
     *
     * @param null|string $askPrice askPrice
     *
     * @return self
     */
    public function setAskPrice($askPrice)
    {
        if (is_null($askPrice)) {
            throw new \InvalidArgumentException('non-nullable askPrice cannot be null');
        }
        $this->container['askPrice'] = $askPrice;

        return $this;
    }

    /**
     * Gets openTime.
     *
     * @return null|int
     */
    public function getOpenTime()
    {
        return $this->container['openTime'];
    }

    /**
     * Sets openTime.
     *
     * @param null|int $openTime openTime
     *
     * @return self
     */
    public function setOpenTime($openTime)
    {
        if (is_null($openTime)) {
            throw new \InvalidArgumentException('non-nullable openTime cannot be null');
        }
        $this->container['openTime'] = $openTime;

        return $this;
    }

    /**
     * Gets closeTime.
     *
     * @return null|int
     */
    public function getCloseTime()
    {
        return $this->container['closeTime'];
    }

    /**
     * Sets closeTime.
     *
     * @param null|int $closeTime closeTime
     *
     * @return self
     */
    public function setCloseTime($closeTime)
    {
        if (is_null($closeTime)) {
            throw new \InvalidArgumentException('non-nullable closeTime cannot be null');
        }
        $this->container['closeTime'] = $closeTime;

        return $this;
    }

    /**
     * Gets firstTradeId.
     *
     * @return null|int
     */
    public function getFirstTradeId()
    {
        return $this->container['firstTradeId'];
    }

    /**
     * Sets firstTradeId.
     *
     * @param null|int $firstTradeId firstTradeId
     *
     * @return self
     */
    public function setFirstTradeId($firstTradeId)
    {
        if (is_null($firstTradeId)) {
            throw new \InvalidArgumentException('non-nullable firstTradeId cannot be null');
        }
        $this->container['firstTradeId'] = $firstTradeId;

        return $this;
    }

    /**
     * Gets tradeCount.
     *
     * @return null|int
     */
    public function getTradeCount()
    {
        return $this->container['tradeCount'];
    }

    /**
     * Sets tradeCount.
     *
     * @param null|int $tradeCount tradeCount
     *
     * @return self
     */
    public function setTradeCount($tradeCount)
    {
        if (is_null($tradeCount)) {
            throw new \InvalidArgumentException('non-nullable tradeCount cannot be null');
        }
        $this->container['tradeCount'] = $tradeCount;

        return $this;
    }

    /**
     * Gets strikePrice.
     *
     * @return null|string
     */
    public function getStrikePrice()
    {
        return $this->container['strikePrice'];
    }

    /**
     * Sets strikePrice.
     *
     * @param null|string $strikePrice strikePrice
     *
     * @return self
     */
    public function setStrikePrice($strikePrice)
    {
        if (is_null($strikePrice)) {
            throw new \InvalidArgumentException('non-nullable strikePrice cannot be null');
        }
        $this->container['strikePrice'] = $strikePrice;

        return $this;
    }

    /**
     * Gets exercisePrice.
     *
     * @return null|string
     */
    public function getExercisePrice()
    {
        return $this->container['exercisePrice'];
    }

    /**
     * Sets exercisePrice.
     *
     * @param null|string $exercisePrice exercisePrice
     *
     * @return self
     */
    public function setExercisePrice($exercisePrice)
    {
        if (is_null($exercisePrice)) {
            throw new \InvalidArgumentException('non-nullable exercisePrice cannot be null');
        }
        $this->container['exercisePrice'] = $exercisePrice;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
