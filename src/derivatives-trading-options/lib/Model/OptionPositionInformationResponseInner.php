<?php

/**
 * OptionPositionInformationResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Options REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingOptions\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * OptionPositionInformationResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class OptionPositionInformationResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'optionPositionInformationResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'entryPrice' => 'string',
        'symbol' => 'string',
        'side' => 'string',
        'quantity' => 'string',
        'reducibleQty' => 'string',
        'markValue' => 'string',
        'ror' => 'string',
        'unrealizedPNL' => 'string',
        'markPrice' => 'string',
        'strikePrice' => 'string',
        'positionCost' => 'string',
        'expiryDate' => 'int',
        'priceScale' => 'int',
        'quantityScale' => 'int',
        'optionSide' => 'string',
        'quoteAsset' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'entryPrice' => null,
        'symbol' => null,
        'side' => null,
        'quantity' => null,
        'reducibleQty' => null,
        'markValue' => null,
        'ror' => null,
        'unrealizedPNL' => null,
        'markPrice' => null,
        'strikePrice' => null,
        'positionCost' => null,
        'expiryDate' => 'int64',
        'priceScale' => 'int64',
        'quantityScale' => 'int64',
        'optionSide' => null,
        'quoteAsset' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'entryPrice' => false,
        'symbol' => false,
        'side' => false,
        'quantity' => false,
        'reducibleQty' => false,
        'markValue' => false,
        'ror' => false,
        'unrealizedPNL' => false,
        'markPrice' => false,
        'strikePrice' => false,
        'positionCost' => false,
        'expiryDate' => false,
        'priceScale' => false,
        'quantityScale' => false,
        'optionSide' => false,
        'quoteAsset' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entryPrice' => 'entryPrice',
        'symbol' => 'symbol',
        'side' => 'side',
        'quantity' => 'quantity',
        'reducibleQty' => 'reducibleQty',
        'markValue' => 'markValue',
        'ror' => 'ror',
        'unrealizedPNL' => 'unrealizedPNL',
        'markPrice' => 'markPrice',
        'strikePrice' => 'strikePrice',
        'positionCost' => 'positionCost',
        'expiryDate' => 'expiryDate',
        'priceScale' => 'priceScale',
        'quantityScale' => 'quantityScale',
        'optionSide' => 'optionSide',
        'quoteAsset' => 'quoteAsset',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'entryPrice' => 'setEntryPrice',
        'symbol' => 'setSymbol',
        'side' => 'setSide',
        'quantity' => 'setQuantity',
        'reducibleQty' => 'setReducibleQty',
        'markValue' => 'setMarkValue',
        'ror' => 'setRor',
        'unrealizedPNL' => 'setUnrealizedPNL',
        'markPrice' => 'setMarkPrice',
        'strikePrice' => 'setStrikePrice',
        'positionCost' => 'setPositionCost',
        'expiryDate' => 'setExpiryDate',
        'priceScale' => 'setPriceScale',
        'quantityScale' => 'setQuantityScale',
        'optionSide' => 'setOptionSide',
        'quoteAsset' => 'setQuoteAsset',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'entryPrice' => 'getEntryPrice',
        'symbol' => 'getSymbol',
        'side' => 'getSide',
        'quantity' => 'getQuantity',
        'reducibleQty' => 'getReducibleQty',
        'markValue' => 'getMarkValue',
        'ror' => 'getRor',
        'unrealizedPNL' => 'getUnrealizedPNL',
        'markPrice' => 'getMarkPrice',
        'strikePrice' => 'getStrikePrice',
        'positionCost' => 'getPositionCost',
        'expiryDate' => 'getExpiryDate',
        'priceScale' => 'getPriceScale',
        'quantityScale' => 'getQuantityScale',
        'optionSide' => 'getOptionSide',
        'quoteAsset' => 'getQuoteAsset',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('entryPrice', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('reducibleQty', $data ?? [], null);
        $this->setIfExists('markValue', $data ?? [], null);
        $this->setIfExists('ror', $data ?? [], null);
        $this->setIfExists('unrealizedPNL', $data ?? [], null);
        $this->setIfExists('markPrice', $data ?? [], null);
        $this->setIfExists('strikePrice', $data ?? [], null);
        $this->setIfExists('positionCost', $data ?? [], null);
        $this->setIfExists('expiryDate', $data ?? [], null);
        $this->setIfExists('priceScale', $data ?? [], null);
        $this->setIfExists('quantityScale', $data ?? [], null);
        $this->setIfExists('optionSide', $data ?? [], null);
        $this->setIfExists('quoteAsset', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets entryPrice.
     *
     * @return null|string
     */
    public function getEntryPrice()
    {
        return $this->container['entryPrice'];
    }

    /**
     * Sets entryPrice.
     *
     * @param null|string $entryPrice entryPrice
     *
     * @return self
     */
    public function setEntryPrice($entryPrice)
    {
        if (is_null($entryPrice)) {
            throw new \InvalidArgumentException('non-nullable entryPrice cannot be null');
        }
        $this->container['entryPrice'] = $entryPrice;

        return $this;
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets side.
     *
     * @return null|string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side.
     *
     * @param null|string $side side
     *
     * @return self
     */
    public function setSide($side)
    {
        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets quantity.
     *
     * @return null|string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity.
     *
     * @param null|string $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reducibleQty.
     *
     * @return null|string
     */
    public function getReducibleQty()
    {
        return $this->container['reducibleQty'];
    }

    /**
     * Sets reducibleQty.
     *
     * @param null|string $reducibleQty reducibleQty
     *
     * @return self
     */
    public function setReducibleQty($reducibleQty)
    {
        if (is_null($reducibleQty)) {
            throw new \InvalidArgumentException('non-nullable reducibleQty cannot be null');
        }
        $this->container['reducibleQty'] = $reducibleQty;

        return $this;
    }

    /**
     * Gets markValue.
     *
     * @return null|string
     */
    public function getMarkValue()
    {
        return $this->container['markValue'];
    }

    /**
     * Sets markValue.
     *
     * @param null|string $markValue markValue
     *
     * @return self
     */
    public function setMarkValue($markValue)
    {
        if (is_null($markValue)) {
            throw new \InvalidArgumentException('non-nullable markValue cannot be null');
        }
        $this->container['markValue'] = $markValue;

        return $this;
    }

    /**
     * Gets ror.
     *
     * @return null|string
     */
    public function getRor()
    {
        return $this->container['ror'];
    }

    /**
     * Sets ror.
     *
     * @param null|string $ror ror
     *
     * @return self
     */
    public function setRor($ror)
    {
        if (is_null($ror)) {
            throw new \InvalidArgumentException('non-nullable ror cannot be null');
        }
        $this->container['ror'] = $ror;

        return $this;
    }

    /**
     * Gets unrealizedPNL.
     *
     * @return null|string
     */
    public function getUnrealizedPNL()
    {
        return $this->container['unrealizedPNL'];
    }

    /**
     * Sets unrealizedPNL.
     *
     * @param null|string $unrealizedPNL unrealizedPNL
     *
     * @return self
     */
    public function setUnrealizedPNL($unrealizedPNL)
    {
        if (is_null($unrealizedPNL)) {
            throw new \InvalidArgumentException('non-nullable unrealizedPNL cannot be null');
        }
        $this->container['unrealizedPNL'] = $unrealizedPNL;

        return $this;
    }

    /**
     * Gets markPrice.
     *
     * @return null|string
     */
    public function getMarkPrice()
    {
        return $this->container['markPrice'];
    }

    /**
     * Sets markPrice.
     *
     * @param null|string $markPrice markPrice
     *
     * @return self
     */
    public function setMarkPrice($markPrice)
    {
        if (is_null($markPrice)) {
            throw new \InvalidArgumentException('non-nullable markPrice cannot be null');
        }
        $this->container['markPrice'] = $markPrice;

        return $this;
    }

    /**
     * Gets strikePrice.
     *
     * @return null|string
     */
    public function getStrikePrice()
    {
        return $this->container['strikePrice'];
    }

    /**
     * Sets strikePrice.
     *
     * @param null|string $strikePrice strikePrice
     *
     * @return self
     */
    public function setStrikePrice($strikePrice)
    {
        if (is_null($strikePrice)) {
            throw new \InvalidArgumentException('non-nullable strikePrice cannot be null');
        }
        $this->container['strikePrice'] = $strikePrice;

        return $this;
    }

    /**
     * Gets positionCost.
     *
     * @return null|string
     */
    public function getPositionCost()
    {
        return $this->container['positionCost'];
    }

    /**
     * Sets positionCost.
     *
     * @param null|string $positionCost positionCost
     *
     * @return self
     */
    public function setPositionCost($positionCost)
    {
        if (is_null($positionCost)) {
            throw new \InvalidArgumentException('non-nullable positionCost cannot be null');
        }
        $this->container['positionCost'] = $positionCost;

        return $this;
    }

    /**
     * Gets expiryDate.
     *
     * @return null|int
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate.
     *
     * @param null|int $expiryDate expiryDate
     *
     * @return self
     */
    public function setExpiryDate($expiryDate)
    {
        if (is_null($expiryDate)) {
            throw new \InvalidArgumentException('non-nullable expiryDate cannot be null');
        }
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets priceScale.
     *
     * @return null|int
     */
    public function getPriceScale()
    {
        return $this->container['priceScale'];
    }

    /**
     * Sets priceScale.
     *
     * @param null|int $priceScale priceScale
     *
     * @return self
     */
    public function setPriceScale($priceScale)
    {
        if (is_null($priceScale)) {
            throw new \InvalidArgumentException('non-nullable priceScale cannot be null');
        }
        $this->container['priceScale'] = $priceScale;

        return $this;
    }

    /**
     * Gets quantityScale.
     *
     * @return null|int
     */
    public function getQuantityScale()
    {
        return $this->container['quantityScale'];
    }

    /**
     * Sets quantityScale.
     *
     * @param null|int $quantityScale quantityScale
     *
     * @return self
     */
    public function setQuantityScale($quantityScale)
    {
        if (is_null($quantityScale)) {
            throw new \InvalidArgumentException('non-nullable quantityScale cannot be null');
        }
        $this->container['quantityScale'] = $quantityScale;

        return $this;
    }

    /**
     * Gets optionSide.
     *
     * @return null|string
     */
    public function getOptionSide()
    {
        return $this->container['optionSide'];
    }

    /**
     * Sets optionSide.
     *
     * @param null|string $optionSide optionSide
     *
     * @return self
     */
    public function setOptionSide($optionSide)
    {
        if (is_null($optionSide)) {
            throw new \InvalidArgumentException('non-nullable optionSide cannot be null');
        }
        $this->container['optionSide'] = $optionSide;

        return $this;
    }

    /**
     * Gets quoteAsset.
     *
     * @return null|string
     */
    public function getQuoteAsset()
    {
        return $this->container['quoteAsset'];
    }

    /**
     * Sets quoteAsset.
     *
     * @param null|string $quoteAsset quoteAsset
     *
     * @return self
     */
    public function setQuoteAsset($quoteAsset)
    {
        if (is_null($quoteAsset)) {
            throw new \InvalidArgumentException('non-nullable quoteAsset cannot be null');
        }
        $this->container['quoteAsset'] = $quoteAsset;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
