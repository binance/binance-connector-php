<?php

/**
 * ExchangeInformationResponseOptionSymbolsInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Options REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingOptions\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * ExchangeInformationResponseOptionSymbolsInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ExchangeInformationResponseOptionSymbolsInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'exchangeInformationResponse_optionSymbols_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'expiryDate' => 'int',
        'filters' => '\Binance\Client\DerivativesTradingOptions\Model\ExchangeInformationResponseOptionSymbolsInnerFiltersInner[]',
        'symbol' => 'string',
        'side' => 'string',
        'strikePrice' => 'string',
        'underlying' => 'string',
        'unit' => 'int',
        'makerFeeRate' => 'string',
        'takerFeeRate' => 'string',
        'minQty' => 'string',
        'maxQty' => 'string',
        'initialMargin' => 'string',
        'maintenanceMargin' => 'string',
        'minInitialMargin' => 'string',
        'minMaintenanceMargin' => 'string',
        'priceScale' => 'int',
        'quantityScale' => 'int',
        'quoteAsset' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'expiryDate' => 'int64',
        'filters' => null,
        'symbol' => null,
        'side' => null,
        'strikePrice' => null,
        'underlying' => null,
        'unit' => 'int64',
        'makerFeeRate' => null,
        'takerFeeRate' => null,
        'minQty' => null,
        'maxQty' => null,
        'initialMargin' => null,
        'maintenanceMargin' => null,
        'minInitialMargin' => null,
        'minMaintenanceMargin' => null,
        'priceScale' => 'int64',
        'quantityScale' => 'int64',
        'quoteAsset' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'expiryDate' => false,
        'filters' => false,
        'symbol' => false,
        'side' => false,
        'strikePrice' => false,
        'underlying' => false,
        'unit' => false,
        'makerFeeRate' => false,
        'takerFeeRate' => false,
        'minQty' => false,
        'maxQty' => false,
        'initialMargin' => false,
        'maintenanceMargin' => false,
        'minInitialMargin' => false,
        'minMaintenanceMargin' => false,
        'priceScale' => false,
        'quantityScale' => false,
        'quoteAsset' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expiryDate' => 'expiryDate',
        'filters' => 'filters',
        'symbol' => 'symbol',
        'side' => 'side',
        'strikePrice' => 'strikePrice',
        'underlying' => 'underlying',
        'unit' => 'unit',
        'makerFeeRate' => 'makerFeeRate',
        'takerFeeRate' => 'takerFeeRate',
        'minQty' => 'minQty',
        'maxQty' => 'maxQty',
        'initialMargin' => 'initialMargin',
        'maintenanceMargin' => 'maintenanceMargin',
        'minInitialMargin' => 'minInitialMargin',
        'minMaintenanceMargin' => 'minMaintenanceMargin',
        'priceScale' => 'priceScale',
        'quantityScale' => 'quantityScale',
        'quoteAsset' => 'quoteAsset',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'expiryDate' => 'setExpiryDate',
        'filters' => 'setFilters',
        'symbol' => 'setSymbol',
        'side' => 'setSide',
        'strikePrice' => 'setStrikePrice',
        'underlying' => 'setUnderlying',
        'unit' => 'setUnit',
        'makerFeeRate' => 'setMakerFeeRate',
        'takerFeeRate' => 'setTakerFeeRate',
        'minQty' => 'setMinQty',
        'maxQty' => 'setMaxQty',
        'initialMargin' => 'setInitialMargin',
        'maintenanceMargin' => 'setMaintenanceMargin',
        'minInitialMargin' => 'setMinInitialMargin',
        'minMaintenanceMargin' => 'setMinMaintenanceMargin',
        'priceScale' => 'setPriceScale',
        'quantityScale' => 'setQuantityScale',
        'quoteAsset' => 'setQuoteAsset',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'expiryDate' => 'getExpiryDate',
        'filters' => 'getFilters',
        'symbol' => 'getSymbol',
        'side' => 'getSide',
        'strikePrice' => 'getStrikePrice',
        'underlying' => 'getUnderlying',
        'unit' => 'getUnit',
        'makerFeeRate' => 'getMakerFeeRate',
        'takerFeeRate' => 'getTakerFeeRate',
        'minQty' => 'getMinQty',
        'maxQty' => 'getMaxQty',
        'initialMargin' => 'getInitialMargin',
        'maintenanceMargin' => 'getMaintenanceMargin',
        'minInitialMargin' => 'getMinInitialMargin',
        'minMaintenanceMargin' => 'getMinMaintenanceMargin',
        'priceScale' => 'getPriceScale',
        'quantityScale' => 'getQuantityScale',
        'quoteAsset' => 'getQuoteAsset',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('expiryDate', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
        $this->setIfExists('strikePrice', $data ?? [], null);
        $this->setIfExists('underlying', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('makerFeeRate', $data ?? [], null);
        $this->setIfExists('takerFeeRate', $data ?? [], null);
        $this->setIfExists('minQty', $data ?? [], null);
        $this->setIfExists('maxQty', $data ?? [], null);
        $this->setIfExists('initialMargin', $data ?? [], null);
        $this->setIfExists('maintenanceMargin', $data ?? [], null);
        $this->setIfExists('minInitialMargin', $data ?? [], null);
        $this->setIfExists('minMaintenanceMargin', $data ?? [], null);
        $this->setIfExists('priceScale', $data ?? [], null);
        $this->setIfExists('quantityScale', $data ?? [], null);
        $this->setIfExists('quoteAsset', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets expiryDate.
     *
     * @return null|int
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate.
     *
     * @param null|int $expiryDate expiryDate
     *
     * @return self
     */
    public function setExpiryDate($expiryDate)
    {
        if (is_null($expiryDate)) {
            throw new \InvalidArgumentException('non-nullable expiryDate cannot be null');
        }
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets filters.
     *
     * @return null|ExchangeInformationResponseOptionSymbolsInnerFiltersInner[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters.
     *
     * @param null|ExchangeInformationResponseOptionSymbolsInnerFiltersInner[] $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets side.
     *
     * @return null|string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side.
     *
     * @param null|string $side side
     *
     * @return self
     */
    public function setSide($side)
    {
        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets strikePrice.
     *
     * @return null|string
     */
    public function getStrikePrice()
    {
        return $this->container['strikePrice'];
    }

    /**
     * Sets strikePrice.
     *
     * @param null|string $strikePrice strikePrice
     *
     * @return self
     */
    public function setStrikePrice($strikePrice)
    {
        if (is_null($strikePrice)) {
            throw new \InvalidArgumentException('non-nullable strikePrice cannot be null');
        }
        $this->container['strikePrice'] = $strikePrice;

        return $this;
    }

    /**
     * Gets underlying.
     *
     * @return null|string
     */
    public function getUnderlying()
    {
        return $this->container['underlying'];
    }

    /**
     * Sets underlying.
     *
     * @param null|string $underlying underlying
     *
     * @return self
     */
    public function setUnderlying($underlying)
    {
        if (is_null($underlying)) {
            throw new \InvalidArgumentException('non-nullable underlying cannot be null');
        }
        $this->container['underlying'] = $underlying;

        return $this;
    }

    /**
     * Gets unit.
     *
     * @return null|int
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit.
     *
     * @param null|int $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets makerFeeRate.
     *
     * @return null|string
     */
    public function getMakerFeeRate()
    {
        return $this->container['makerFeeRate'];
    }

    /**
     * Sets makerFeeRate.
     *
     * @param null|string $makerFeeRate makerFeeRate
     *
     * @return self
     */
    public function setMakerFeeRate($makerFeeRate)
    {
        if (is_null($makerFeeRate)) {
            throw new \InvalidArgumentException('non-nullable makerFeeRate cannot be null');
        }
        $this->container['makerFeeRate'] = $makerFeeRate;

        return $this;
    }

    /**
     * Gets takerFeeRate.
     *
     * @return null|string
     */
    public function getTakerFeeRate()
    {
        return $this->container['takerFeeRate'];
    }

    /**
     * Sets takerFeeRate.
     *
     * @param null|string $takerFeeRate takerFeeRate
     *
     * @return self
     */
    public function setTakerFeeRate($takerFeeRate)
    {
        if (is_null($takerFeeRate)) {
            throw new \InvalidArgumentException('non-nullable takerFeeRate cannot be null');
        }
        $this->container['takerFeeRate'] = $takerFeeRate;

        return $this;
    }

    /**
     * Gets minQty.
     *
     * @return null|string
     */
    public function getMinQty()
    {
        return $this->container['minQty'];
    }

    /**
     * Sets minQty.
     *
     * @param null|string $minQty minQty
     *
     * @return self
     */
    public function setMinQty($minQty)
    {
        if (is_null($minQty)) {
            throw new \InvalidArgumentException('non-nullable minQty cannot be null');
        }
        $this->container['minQty'] = $minQty;

        return $this;
    }

    /**
     * Gets maxQty.
     *
     * @return null|string
     */
    public function getMaxQty()
    {
        return $this->container['maxQty'];
    }

    /**
     * Sets maxQty.
     *
     * @param null|string $maxQty maxQty
     *
     * @return self
     */
    public function setMaxQty($maxQty)
    {
        if (is_null($maxQty)) {
            throw new \InvalidArgumentException('non-nullable maxQty cannot be null');
        }
        $this->container['maxQty'] = $maxQty;

        return $this;
    }

    /**
     * Gets initialMargin.
     *
     * @return null|string
     */
    public function getInitialMargin()
    {
        return $this->container['initialMargin'];
    }

    /**
     * Sets initialMargin.
     *
     * @param null|string $initialMargin initialMargin
     *
     * @return self
     */
    public function setInitialMargin($initialMargin)
    {
        if (is_null($initialMargin)) {
            throw new \InvalidArgumentException('non-nullable initialMargin cannot be null');
        }
        $this->container['initialMargin'] = $initialMargin;

        return $this;
    }

    /**
     * Gets maintenanceMargin.
     *
     * @return null|string
     */
    public function getMaintenanceMargin()
    {
        return $this->container['maintenanceMargin'];
    }

    /**
     * Sets maintenanceMargin.
     *
     * @param null|string $maintenanceMargin maintenanceMargin
     *
     * @return self
     */
    public function setMaintenanceMargin($maintenanceMargin)
    {
        if (is_null($maintenanceMargin)) {
            throw new \InvalidArgumentException('non-nullable maintenanceMargin cannot be null');
        }
        $this->container['maintenanceMargin'] = $maintenanceMargin;

        return $this;
    }

    /**
     * Gets minInitialMargin.
     *
     * @return null|string
     */
    public function getMinInitialMargin()
    {
        return $this->container['minInitialMargin'];
    }

    /**
     * Sets minInitialMargin.
     *
     * @param null|string $minInitialMargin minInitialMargin
     *
     * @return self
     */
    public function setMinInitialMargin($minInitialMargin)
    {
        if (is_null($minInitialMargin)) {
            throw new \InvalidArgumentException('non-nullable minInitialMargin cannot be null');
        }
        $this->container['minInitialMargin'] = $minInitialMargin;

        return $this;
    }

    /**
     * Gets minMaintenanceMargin.
     *
     * @return null|string
     */
    public function getMinMaintenanceMargin()
    {
        return $this->container['minMaintenanceMargin'];
    }

    /**
     * Sets minMaintenanceMargin.
     *
     * @param null|string $minMaintenanceMargin minMaintenanceMargin
     *
     * @return self
     */
    public function setMinMaintenanceMargin($minMaintenanceMargin)
    {
        if (is_null($minMaintenanceMargin)) {
            throw new \InvalidArgumentException('non-nullable minMaintenanceMargin cannot be null');
        }
        $this->container['minMaintenanceMargin'] = $minMaintenanceMargin;

        return $this;
    }

    /**
     * Gets priceScale.
     *
     * @return null|int
     */
    public function getPriceScale()
    {
        return $this->container['priceScale'];
    }

    /**
     * Sets priceScale.
     *
     * @param null|int $priceScale priceScale
     *
     * @return self
     */
    public function setPriceScale($priceScale)
    {
        if (is_null($priceScale)) {
            throw new \InvalidArgumentException('non-nullable priceScale cannot be null');
        }
        $this->container['priceScale'] = $priceScale;

        return $this;
    }

    /**
     * Gets quantityScale.
     *
     * @return null|int
     */
    public function getQuantityScale()
    {
        return $this->container['quantityScale'];
    }

    /**
     * Sets quantityScale.
     *
     * @param null|int $quantityScale quantityScale
     *
     * @return self
     */
    public function setQuantityScale($quantityScale)
    {
        if (is_null($quantityScale)) {
            throw new \InvalidArgumentException('non-nullable quantityScale cannot be null');
        }
        $this->container['quantityScale'] = $quantityScale;

        return $this;
    }

    /**
     * Gets quoteAsset.
     *
     * @return null|string
     */
    public function getQuoteAsset()
    {
        return $this->container['quoteAsset'];
    }

    /**
     * Sets quoteAsset.
     *
     * @param null|string $quoteAsset quoteAsset
     *
     * @return self
     */
    public function setQuoteAsset($quoteAsset)
    {
        if (is_null($quoteAsset)) {
            throw new \InvalidArgumentException('non-nullable quoteAsset cannot be null');
        }
        $this->container['quoteAsset'] = $quoteAsset;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
