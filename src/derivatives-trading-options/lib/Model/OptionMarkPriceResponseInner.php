<?php

/**
 * OptionMarkPriceResponseInner.
 *
 * PHP version 8.1
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Binance Derivatives Trading Options REST API.
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Binance\Client\DerivativesTradingOptions\Model;

use Binance\Common\Dtos\ModelInterface;
use Binance\Common\ObjectSerializer;

/**
 * OptionMarkPriceResponseInner Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class OptionMarkPriceResponseInner implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'optionMarkPriceResponse_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'markPrice' => 'string',
        'bidIV' => 'string',
        'askIV' => 'string',
        'markIV' => 'string',
        'delta' => 'string',
        'theta' => 'string',
        'gamma' => 'string',
        'vega' => 'string',
        'highPriceLimit' => 'string',
        'lowPriceLimit' => 'string',
        'riskFreeInterest' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'symbol' => null,
        'markPrice' => null,
        'bidIV' => null,
        'askIV' => null,
        'markIV' => null,
        'delta' => null,
        'theta' => null,
        'gamma' => null,
        'vega' => null,
        'highPriceLimit' => null,
        'lowPriceLimit' => null,
        'riskFreeInterest' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'symbol' => false,
        'markPrice' => false,
        'bidIV' => false,
        'askIV' => false,
        'markIV' => false,
        'delta' => false,
        'theta' => false,
        'gamma' => false,
        'vega' => false,
        'highPriceLimit' => false,
        'lowPriceLimit' => false,
        'riskFreeInterest' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'markPrice' => 'markPrice',
        'bidIV' => 'bidIV',
        'askIV' => 'askIV',
        'markIV' => 'markIV',
        'delta' => 'delta',
        'theta' => 'theta',
        'gamma' => 'gamma',
        'vega' => 'vega',
        'highPriceLimit' => 'highPriceLimit',
        'lowPriceLimit' => 'lowPriceLimit',
        'riskFreeInterest' => 'riskFreeInterest',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'markPrice' => 'setMarkPrice',
        'bidIV' => 'setBidIV',
        'askIV' => 'setAskIV',
        'markIV' => 'setMarkIV',
        'delta' => 'setDelta',
        'theta' => 'setTheta',
        'gamma' => 'setGamma',
        'vega' => 'setVega',
        'highPriceLimit' => 'setHighPriceLimit',
        'lowPriceLimit' => 'setLowPriceLimit',
        'riskFreeInterest' => 'setRiskFreeInterest',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'markPrice' => 'getMarkPrice',
        'bidIV' => 'getBidIV',
        'askIV' => 'getAskIV',
        'markIV' => 'getMarkIV',
        'delta' => 'getDelta',
        'theta' => 'getTheta',
        'gamma' => 'getGamma',
        'vega' => 'getVega',
        'highPriceLimit' => 'getHighPriceLimit',
        'lowPriceLimit' => 'getLowPriceLimit',
        'riskFreeInterest' => 'getRiskFreeInterest',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('markPrice', $data ?? [], null);
        $this->setIfExists('bidIV', $data ?? [], null);
        $this->setIfExists('askIV', $data ?? [], null);
        $this->setIfExists('markIV', $data ?? [], null);
        $this->setIfExists('delta', $data ?? [], null);
        $this->setIfExists('theta', $data ?? [], null);
        $this->setIfExists('gamma', $data ?? [], null);
        $this->setIfExists('vega', $data ?? [], null);
        $this->setIfExists('highPriceLimit', $data ?? [], null);
        $this->setIfExists('lowPriceLimit', $data ?? [], null);
        $this->setIfExists('riskFreeInterest', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * If oneOf schema, get the possible response types.
     */
    public static function getComposedSchemas(): array
    {
        return [
        ];
    }

    /**
     * Return true if the model is an array.
     */
    public static function isArray(): bool
    {
        return false;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets symbol.
     *
     * @return null|string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol.
     *
     * @param null|string $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets markPrice.
     *
     * @return null|string
     */
    public function getMarkPrice()
    {
        return $this->container['markPrice'];
    }

    /**
     * Sets markPrice.
     *
     * @param null|string $markPrice markPrice
     *
     * @return self
     */
    public function setMarkPrice($markPrice)
    {
        if (is_null($markPrice)) {
            throw new \InvalidArgumentException('non-nullable markPrice cannot be null');
        }
        $this->container['markPrice'] = $markPrice;

        return $this;
    }

    /**
     * Gets bidIV.
     *
     * @return null|string
     */
    public function getBidIV()
    {
        return $this->container['bidIV'];
    }

    /**
     * Sets bidIV.
     *
     * @param null|string $bidIV bidIV
     *
     * @return self
     */
    public function setBidIV($bidIV)
    {
        if (is_null($bidIV)) {
            throw new \InvalidArgumentException('non-nullable bidIV cannot be null');
        }
        $this->container['bidIV'] = $bidIV;

        return $this;
    }

    /**
     * Gets askIV.
     *
     * @return null|string
     */
    public function getAskIV()
    {
        return $this->container['askIV'];
    }

    /**
     * Sets askIV.
     *
     * @param null|string $askIV askIV
     *
     * @return self
     */
    public function setAskIV($askIV)
    {
        if (is_null($askIV)) {
            throw new \InvalidArgumentException('non-nullable askIV cannot be null');
        }
        $this->container['askIV'] = $askIV;

        return $this;
    }

    /**
     * Gets markIV.
     *
     * @return null|string
     */
    public function getMarkIV()
    {
        return $this->container['markIV'];
    }

    /**
     * Sets markIV.
     *
     * @param null|string $markIV markIV
     *
     * @return self
     */
    public function setMarkIV($markIV)
    {
        if (is_null($markIV)) {
            throw new \InvalidArgumentException('non-nullable markIV cannot be null');
        }
        $this->container['markIV'] = $markIV;

        return $this;
    }

    /**
     * Gets delta.
     *
     * @return null|string
     */
    public function getDelta()
    {
        return $this->container['delta'];
    }

    /**
     * Sets delta.
     *
     * @param null|string $delta delta
     *
     * @return self
     */
    public function setDelta($delta)
    {
        if (is_null($delta)) {
            throw new \InvalidArgumentException('non-nullable delta cannot be null');
        }
        $this->container['delta'] = $delta;

        return $this;
    }

    /**
     * Gets theta.
     *
     * @return null|string
     */
    public function getTheta()
    {
        return $this->container['theta'];
    }

    /**
     * Sets theta.
     *
     * @param null|string $theta theta
     *
     * @return self
     */
    public function setTheta($theta)
    {
        if (is_null($theta)) {
            throw new \InvalidArgumentException('non-nullable theta cannot be null');
        }
        $this->container['theta'] = $theta;

        return $this;
    }

    /**
     * Gets gamma.
     *
     * @return null|string
     */
    public function getGamma()
    {
        return $this->container['gamma'];
    }

    /**
     * Sets gamma.
     *
     * @param null|string $gamma gamma
     *
     * @return self
     */
    public function setGamma($gamma)
    {
        if (is_null($gamma)) {
            throw new \InvalidArgumentException('non-nullable gamma cannot be null');
        }
        $this->container['gamma'] = $gamma;

        return $this;
    }

    /**
     * Gets vega.
     *
     * @return null|string
     */
    public function getVega()
    {
        return $this->container['vega'];
    }

    /**
     * Sets vega.
     *
     * @param null|string $vega vega
     *
     * @return self
     */
    public function setVega($vega)
    {
        if (is_null($vega)) {
            throw new \InvalidArgumentException('non-nullable vega cannot be null');
        }
        $this->container['vega'] = $vega;

        return $this;
    }

    /**
     * Gets highPriceLimit.
     *
     * @return null|string
     */
    public function getHighPriceLimit()
    {
        return $this->container['highPriceLimit'];
    }

    /**
     * Sets highPriceLimit.
     *
     * @param null|string $highPriceLimit highPriceLimit
     *
     * @return self
     */
    public function setHighPriceLimit($highPriceLimit)
    {
        if (is_null($highPriceLimit)) {
            throw new \InvalidArgumentException('non-nullable highPriceLimit cannot be null');
        }
        $this->container['highPriceLimit'] = $highPriceLimit;

        return $this;
    }

    /**
     * Gets lowPriceLimit.
     *
     * @return null|string
     */
    public function getLowPriceLimit()
    {
        return $this->container['lowPriceLimit'];
    }

    /**
     * Sets lowPriceLimit.
     *
     * @param null|string $lowPriceLimit lowPriceLimit
     *
     * @return self
     */
    public function setLowPriceLimit($lowPriceLimit)
    {
        if (is_null($lowPriceLimit)) {
            throw new \InvalidArgumentException('non-nullable lowPriceLimit cannot be null');
        }
        $this->container['lowPriceLimit'] = $lowPriceLimit;

        return $this;
    }

    /**
     * Gets riskFreeInterest.
     *
     * @return null|string
     */
    public function getRiskFreeInterest()
    {
        return $this->container['riskFreeInterest'];
    }

    /**
     * Sets riskFreeInterest.
     *
     * @param null|string $riskFreeInterest riskFreeInterest
     *
     * @return self
     */
    public function setRiskFreeInterest($riskFreeInterest)
    {
        if (is_null($riskFreeInterest)) {
            throw new \InvalidArgumentException('non-nullable riskFreeInterest cannot be null');
        }
        $this->container['riskFreeInterest'] = $riskFreeInterest;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
